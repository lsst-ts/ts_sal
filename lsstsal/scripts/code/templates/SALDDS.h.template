
#ifndef _SAL_SALDataMGR_
  #define _SAL_SALDataMGR_

  #include <string>
  #include <cassert>
  #include <sstream>
  #include <iostream>
  #include <fstream>
  #include <vector>
  #include <string.h>
  #include <stdlib.h>
  #include <stdio.h>
  #include <time.h>
  #include <sys/time.h>
  #include <sys/timex.h>
  #include <signal.h>
  #include <unistd.h>
  #include "SAL_defines.h"
  #include "ccpp_dds_dcps.h"
  #include "QosProvider.h"
// INSERT TYPE INCLUDES
  #include "SAL_SALDataC.h"

  using namespace std;
  using namespace DDS;

#ifndef _SAL_SALActorMGR_
  #define _SAL_SALActorMGR_

/// The maximum number of Actors for a SAL_SALData object, equal to the number of DDS topic types for SALData
  #define SAL__ACTORS_MAXCOUNT	256

/// The maximum length of a Actor (aka DDS topic) name
  #define SAL__ACTORS_NAMESIZE	128

/// Array to hold the names for all the DDS Return Codes.
  static string RetCodeName[13] = 
  {
	    "DDS_RETCODE_OK", "DDS_RETCODE_ERROR", "DDS_RETCODE_UNSUPPORTED", 
	    "DDS_RETCODE_BAD_PARAMETER", "DDS_RETCODE_PRECONDITION_NOT_MET", 
	    "DDS_RETCODE_OUT_OF_RESOURCES", "DDS_RETCODE_NOT_ENABLED", 
	    "DDS_RETCODE_IMMUTABLE_POLICY", "DDS_RETCODE_INCONSISTENT_POLICY", 
	    "DDS_RETCODE_ALREADY_DELETED", "DDS_RETCODE_TIMEOUT", "DDS_RETCODE_NO_DATA",
	    "DDS_RETCODE_ILLEGAL_OPERATION"
  };

/** The SAL_SALData object is instantiated with an array of salActor data structures.
  * Each salActor maintains the state information for a single DDS topic in the SALData namespace.
  * This includes DDS datatypes , as well as SAL CSC specific information
 */ 
  struct salActor {
/// baseName holds the name of the SALData object
      char 			baseName[SAL__ACTORS_NAMESIZE];
/// topicName holds the root name of the DDS topic
      char 			topicName[SAL__ACTORS_NAMESIZE];
/// partition holds the DDS partition to which the topic is associated with
      DDS::String_var		partition;
/// topicHandle holds the actual name of the DDS topic with an IDL versioned hash appended 
      char 			topicHandle[SAL__ACTORS_NAMESIZE];
/// sFilter is used to build the filtering pattern for indexed DDS topics, for example HexapodID=2
      DDS::String_var 		sFilter;
/// typeName holds the DDS type, in our case it is the same as the topicHandle
      DDS::String_var 		typeName;
/// typeName2 holds the complementary type of the ackCmd when typeName is a command topic
/// a commander needs an ackCmd subscriber , and a processor needs an ackCmd publisher
      DDS::String_var 		typeName2;
/// topic holds a pointer to the internal DDS Topic object
      Topic_var 		topic;
/// topic2 holds a pointer to the internal DDS Topic object
      Topic_var 		topic2;
/// reader holds a pointer to the internal DDS DataReader object
      DataReader_var 		reader;
/// reader2 holds a pointer to the internal DDS DataReader object
      DataReader_var 		reader2;
/// filteredtopic holds a pointer to the internal DDS topic for indexed DDS topics
      ContentFilteredTopic_var  filteredtopic;
/// filteredtopic2 holds a pointer to the internal DDS topic for indexed DDS topics
      ContentFilteredTopic_var  filteredtopic2;
/// writer holds a pointer to the internal DDS DataReader object
      DataWriter_var 		writer;
/// writer2 holds a pointer to the internal DDS DataWriter object
      DataWriter_var 		writer2;
/// publisher holds a pointer to the internal DDS Publisher object
      Publisher_var 		publisher;
/// subscriber holds a pointer to the internal DDS Subscriber object
      Subscriber_var 		subscriber; 
/// topic_qos holds a pointer to the internal DDS TopicQos object
      TopicQos 			topic_qos;
/// topic_qos2 holds a pointer to the internal DDS TopicQos object
      TopicQos 			topic_qos2;
/// pub_qos holds a pointer to the internal DDS PublisherQos object
      PublisherQos 		pub_qos;
/// sub_qos holds a pointer to the internal DDS SubscriberQos object
      SubscriberQos 		sub_qos;
/// dr_qos holds a pointer to the internal DDS DataReaderQos object
      DataReaderQos 		dr_qos;
/// dw_qos holds a pointer to the internal DDS DataWriterQos object
      DataWriterQos 		dw_qos;
/// pub_qos2 holds a pointer to the internal DDS PublisherQos object
      PublisherQos 		pub_qos2;
/// sub_qos2 holds a pointer to the internal DDS SubscriberQos object
      SubscriberQos 		sub_qos2;
/// dr_qos2 holds a pointer to the internal DDS DataReaderQos object
      DataReaderQos 		dr_qos2;
/// dw_qos2 holds a pointer to the internal DDS DataWriterQos object
      DataWriterQos 		dw_qos2;
/// isActive is true when the Actor has been connected to DDS
      bool			isActive;
/// isReader is true when the Actor is a DDS reader
      bool 			isReader;
/// isWriter is true when the Actor is a DDS writer
      bool 			isWriter;
/// isCommand is true when the Actor is a managing a SAL commander
      bool 			isCommand;
/// isEventReader is true when the Actor is a managing a SAL event subscriber
      bool 			isEventReader;
/// isEventWriter is true when the Actor is a managing a SAL event publisher
      bool 			isEventWriter;
/// isCommand is true when the Actor is a managing a SAL command processor
      bool 			isProcessor;
/// debugLevel is the numerical level of verbosity controlling the output of debug messages
      int 			debugLevel;
/// sndSeqNum holds the sequence number of the most recent DDS message sent for this topic
      int 			sndSeqNum;
/// cmdSeqNum holds the sequence number of the most recent DDS command sent for this topic
      int                       cmdSeqNum;
/// sndSeqNum holds the sequence number of the most recent DDS message received for this topic
      int 			rcvSeqNum;
      int                       rcvOrigin;
/// rcvIdentity holds the private_identity filled from the last DDS message received for this topic
      string 			rcvIdentity;
/// maxSamples is used to control the maximum number of DDS messages received by getSample/getNextSample methods
      int			maxSamples;
/// error is the error field for the most recent ackCmd message (commands)
      int			error;
/// ack is the ack field for the most recent ackCmd message (commands)
      int			ack;
/// activeidentity is the private_identity field of the most recent command
      string			activeidentity;
/// activeorigin is the private_origin field of the most recent command
      int activeorigin;
/// activecmdid is the command sequence number of the most recent command
      int			activecmdid;
/// timeout is the number of seconds the command is expected to take to execute
      double			timeout;
/// result is the text message result of the most recent command
      char			result[256];
/// sndStamp is the TAI timestamp of the most recent command sent
      double	 		sndStamp;
/// rcvStamp is the TAI timestamp of the most recent command received
      double			rcvStamp;
/// sampleAge is the time in seconds between command send and receive
      double			sampleAge;
/// historyDepth is the maximum size (in samples) of the DDS message cache for the topic
      int                       historyDepth;
  };
#endif

  class SAL_SALData
  {
      /* Generic DDS entities */
      DomainParticipantFactory_var dpf;
      DomainParticipant_var participant;
      Topic_var topic;
      Topic_var topic2;
      ContentFilteredTopic_var filteredtopic;
      ContentFilteredTopic_var filteredtopic2;
      Publisher_var publisher;
      Subscriber_var subscriber;
      DataWriter_var writer;
      DataWriter_var writer2;
      DataReader_var reader;
      DataReader_var reader2;

      /* QosPolicy holders */
      TopicQos topic_qos;
      TopicQos topic_qos2;
      PublisherQos pub_qos;
      DataWriterQos dw_qos;
      SubscriberQos sub_qos;
      QosProvider_var commandQos;
      QosProvider_var eventQos;
      QosProvider_var telemetryQos;
      QosProvider_var ackcmdQos;

      DomainId_t domain;
      ReturnCode_t status;

      DDS::String_var partition;
      DDS::String_var typeName;
      DDS::String_var typeName2;
      DDS::String_var sFilter;
      bool hasReader;
      bool hasWriter;
      bool hasCommand;
      bool hasEventReader;
      bool hasEventWriter;
      bool hasProcessor;
      int subsystemID;
      int debugLevel;
      int cmdSeqNum;
      int sndSeqNum;
      int rcvSeqNum;
      int rcvOrigin;
      string rcvIdentity;
      int historySync;
      double rcvdTime;
      salU64  origin;
      char domainName[128];
      char partitionPrefix[128];
      salActor sal[SAL__ACTORS_MAXCOUNT];
      int lastActor_telemetry;
      int lastActor_command;
      int lastActor_event;

///   Holds the private_identity of this SAL Object, set at creation
      char *CSC_identity;

///   Holds the current authList authorizedUsers list
      std::string authorizedUsers;

///   Holds the current authList nonAuthorizedCSCs list
      std::string nonAuthorizedCSCs;

    public:

/** Constructor for the SAL_SALData object.
  *
  @param aKey is used to specify the index of an indexed component, or 0 for non-indexed ones
  @param identity is used to specify the private_identity of a commander

 */
     SAL_SALData(int aKey, char *identity);
     SAL_SALData(int aKey);
     SAL_SALData(char *identity);
     SAL_SALData();

/** Environment setup for a SAL_SALData object.
  *
  * + LSST_DDS_DOMAIN is the name of the partition being used
  * + LSST_DDS_IP is the IP address of the DDS ethernet interface
  * + LSST_DDS_QOS is the optional path to the DDS QoS XML description
  * + LSST_DDS_HISTORYSYNC is the maximum number of seconds to wait to obtain historical messages on a topic
  *
  @param aKey is used to specify the index of an indexed component, or 0 for non-indexed ones
 */
     void initSalEnvironment(int aKey);

/** Sets up the DDS Publisher support for the named DDS type
  @param topicName is the name of the DDS topic
  @throws "Unknown Topic" if the topic is not defined
 */    
      salReturn salTelemetryPub(char *topicName);

/** Sets up the DDS Subscriber support for the named DDS type
  @param topicName is the name of the DDS topic
  @throws "Unknown Topic" if the topic is not defined
 */    
      salReturn salTelemetrySub(char *topicName);

/// Returns of vector::string consisting of the topic names of all SAL_SALData telemetry topics
      std::vector<std::string> getTelemetryNames();

/// Returns of vector::string consisting of the topic names of all SAL_SALData command topics
      std::vector<std::string> getCommandNames();

/// Returns of vector::string consisting of the topic names of all SAL_SALData logevent topics
      std::vector<std::string> getEventNames();

// INSERT CMDALIAS SUPPORT  for issueCommandC and acceptCommandC, acceptAnyCommand

// INSERT EVENTALIAS SUPPORT for getEventC and logEventC , getAnyEvent

// INSERT TYPE SUPPORT  

/// Return the text string corresponding to a DDS internal error code
      string getErrorName(DDS::ReturnCode_t status);

/// Check the status of any DDS methods return code, can cause the program to throw DDS exceptions
      void checkStatus(DDS::ReturnCode_t status, const char *info);

/// Check the validity of a DDS low level object pointer, can cause the program to throw DDS exceptions
      void checkHandle(void *handle, string info);

/** Get the time from the system. The TAI time will be used, which assumes that the kernel 
  * leap seconds offset has been correctly set. The getLeapSeconds method can be used to 
  * do a simple sanity check
  @return The current TAI system time
 */
      double getCurrentTime();

/** Get the timestamp from the most recent DDS message received for a topic
  @param Name of the topic as defined in the XML
  @return The TAI timestamp (private_rcvStamp) from the message
 */
      double getRcvdTime(char *topicName);

/** Get the sender timestamp from the most recent DDS message received for a topic
  @param Name of the topic as defined in the XML
  @return The TAI timestamp (private_sndStamp) from the message
 */
      double getSentTime(char *topicName);

/// Returns the integer number of leap seconds that the kernel has set
      int getLeapSeconds();

/// Returns the current SAL version e.g. "4.1.0"
      static std::string getSALVersion();

/// Returns the current XML version e.g. "5.0.0"
      static std::string getXMLVersion();

/// Returns the current OpenSpliceDDS version e.g. "6.9.181127OSS"
      static std::string getOSPLVersion();

/** Sets up the DDS data type low level support for the named DDS type
  @param topicName is the name of the DDS topic
  @throws "Unknown Topic" if the topic is not defined
 */    
      salReturn salTypeSupport(char *topicName);

///  Remove whitespace from the a string
     std::string removeSpaces(std::string list);

///  Check the current commands private_identity against the authList
      salReturn checkAuthList(std::string private_identity);

/// Set the debug message output verbosity level for this SAL_SALData object
      salReturn setDebugLevel( int level );

/// Get the current value of the debug message verbosity level for this SAL_SALData object
      int getDebugLevel( int level );

/// Get the current IP address
      int getOrigin();

/// Generic method to read the value of a SAL_SALData object internal state
      int getProperty(salCHAR *property, salCHAR *value);

/// Generic method to set the value of a SAL_SALData object internal state
      int setProperty(salCHAR *property, salCHAR *value);

/// Generic method to read the integer value of a SAL_SALData object internal state
      int getIntProperty(int actorIdx,salCHAR *property);

/// Generic method to read the double value of a SAL_SALData object internal state
      double getDblProperty(int actorIdx,salCHAR *property);

/// Generic method to read the boolean value of a SAL_SALData object internal state
      bool getBoolProperty(int actorIdx,salCHAR *property);

/** Set the value of maxSamples for the Actor specified
  @param actorIdx is the index into the salActors array
  @param n is the new number of maxSamples to use
 */
      void setMaxSamples(int actorIdx, int n);

/// Placeholder routine to be replaced by system wide logging once available
      void logError(salReturn status);

/// Close down the DDS support for this SAL_SALData object
      void salShutdown();

      void createParticipant(const char *partitiontName);
      void deleteParticipant();
      void registerType(TypeSupport *ts);
      void registerType2(TypeSupport *ts);
      void createTopic(char *topicName);
      void createTopic2(char *topicName);
      void createContentFilteredTopic(const char *topicName, const char *filter,
                                      const StringSeq &expr);
      void createContentFilteredTopic2(const char *topicName, const char *filter,
                                       const StringSeq &expr);
      void deletePublisher();
      void deleteTopics();
      void createWriter();
      void createWriter2();
      void createWriter(bool autodispose_unregistered_instances);
      void createWriter2(bool autodispose_unregistered_instances);
      void deleteWriter();
      void deleteSubscriber();
      void createReader(bool filtered);
      void createReader2(bool filtered);
      void deleteReader();
      DataReader_ptr getReader();
      DataReader_ptr getReader2();
      DataWriter_ptr getWriter();
      DataWriter_ptr getWriter2();
      Publisher_ptr getPublisher();
      Subscriber_ptr getSubscriber();
      Topic_ptr getTopic();
      DomainParticipant_ptr getParticipant();

      void initSalActors();
      salReturn salTelemetryPub(int actorIdx);
      salReturn salTelemetrySub(int actorIdx);
      salReturn salEventSub(char *topicName);
      salReturn salEventPub(char *topicName);
      int getActorIndex(char *topic);
      salReturn salTypeSupport(int actorIdx);
      salReturn salCommand(char *cmdAlias);
      salReturn salProcessor(char *cmdAlias);
      void registerType(int actorIdx,TypeSupport *ts);
      void registerType2(int actorIdx,TypeSupport *ts);
      void createTopic(int actorIdx);
      void createTopic2(int actorIdx);
      void createTopic(int actorIdx, char *topicName);
      void createTopic2(int actorIdx, char *topicName);
      void createContentFilteredTopic(int actorIdx,const char *topicName, const char *filter,const StringSeq &expr);
      void createContentFilteredTopic2(int actorIdx,const char *topicName, const char *filter,const StringSeq &expr);
      void createPublisher(int actorIdx);
      void createWriter(int actorIdx);
      void createWriter(int actorIdx,bool autodispose_unregistered_instances);
      void createWriter2(int actorIdx);
      void createWriter2(int actorIdx,bool autodispose_unregistered_instances);
      void createSubscriber(int actorIdx);
      void createReader(int actorIdx,bool filtered);
      void createReader2(int actorIdx,bool filtered);
      DataReader_ptr getReader(int actorIdx);
      DataWriter_ptr getWriter(int actorIdx);
      DataReader_ptr getReader2(int actorIdx);
      DataWriter_ptr getWriter2(int actorIdx);
      Publisher_ptr  getPublisher(int actorIdx);
      Subscriber_ptr getSubscriber(int actorIdx);
      Topic_ptr      getTopic(int actorIdx);
      Topic_ptr      getTopic2(int actorIdx);
      bool actorActive(int actorIdx);
      bool actorReader(int actorIdx);
      bool actorWriter(int actorIdx);
      bool actorCommand(int actorIdx);
      bool actorEventReader(int actorIdx);
      bool actorEventWriter(int actorIdx);
      bool actorProcessor(int actorIdx);


      ~SAL_SALData();
  };

#endif
