
#ifndef _SAL_SALDataMGR_
  #define _SAL_SALDataMGR_

  #include <string>
  #include <cassert>
  #include <string>
  #include <iostream>
  #include <fstream>
  #include <vector>
  #include <string.h>
  #include <stdlib.h>
  #include <stdio.h>
  #include <string.h>
  #include "SAL_defines.h"
  #include "ccpp_dds_dcps.h"
// INSERT TYPE INCLUDES
  #include "SAL_SALDataC.h"

  using namespace std;
  using namespace DDS;

#ifndef _SAL_SALActorMGR_
  #define _SAL_SALActorMGR_
  #define SAL__ACTORS_MAXCOUNT	128
  #define SAL__ACTORS_NAMESIZE	128

/* Array to hold the names for all ReturnCodes. */
  static string RetCodeName[13] = 
  {
	    "DDS_RETCODE_OK", "DDS_RETCODE_ERROR", "DDS_RETCODE_UNSUPPORTED", 
	    "DDS_RETCODE_BAD_PARAMETER", "DDS_RETCODE_PRECONDITION_NOT_MET", 
	    "DDS_RETCODE_OUT_OF_RESOURCES", "DDS_RETCODE_NOT_ENABLED", 
	    "DDS_RETCODE_IMMUTABLE_POLICY", "DDS_RETCODE_INCONSISTENT_POLICY", 
	    "DDS_RETCODE_ALREADY_DELETED", "DDS_RETCODE_TIMEOUT", "DDS_RETCODE_NO_DATA",
	    "DDS_RETCODE_ILLEGAL_OPERATION"
  };


  struct salActor {
      char 			baseName[SAL__ACTORS_NAMESIZE];
      char 			topicName[SAL__ACTORS_NAMESIZE];
      DDS::String_var 		sFilter;
      DDS::String_var 		typeName;
      DDS::String_var 		typeName2;
      Topic_var 		topic;
      Topic_var 		topic2;
      DataReader_var 		reader;
      DataReader_var 		reader2;
      ContentFilteredTopic_var  filteredtopic;
      ContentFilteredTopic_var  filteredtopic2;
      DataWriter_var 		writer;
      DataWriter_var 		writer2;
      Publisher_var 		publisher;
      Subscriber_var 		subscriber;
 
      /* QosPolicy holders */
      TopicQos 			reliable_topic_qos;
      TopicQos 			reliable_topic_qos2;
      PublisherQos 		pub_qos;
      SubscriberQos 		sub_qos;
      DataReaderQos 		dr_qos;
      DataWriterQos 		dw_qos;
      bool			isActive;
      bool 			isReader;
      bool 			isWriter;
      bool 			isCommand;
      bool 			isEventReader;
      bool 			isEventWriter;
      bool 			isProcessor;
      int 			debugLevel;
      int 			sndSeqNum;
      int                       cmdSeqNum;
      int 			rcvSeqNum;
      int 			rcvOrigin;
      int			maxSamples;
      int			error;
      int			ack;
      char			result[128];
      long long 		sndStamp[2];
      long long			rcvStamp[2];
      double			sampleAge;
      int                       historyDepth;
      bool                      tuneableQos;
  };
#endif


  class SAL_SALData
  {
      /* Generic DDS entities */
      DomainParticipantFactory_var dpf;
      DomainParticipant_var participant;
      Topic_var topic;
      Topic_var topic2;
      ContentFilteredTopic_var filteredtopic;
      ContentFilteredTopic_var filteredtopic2;
      Publisher_var publisher;
      Subscriber_var subscriber;
      DataWriter_var writer;
      DataWriter_var writer2;
      DataReader_var reader;
      DataReader_var reader2;

      /* QosPolicy holders */
      TopicQos reliable_topic_qos;
      TopicQos reliable_topic_qos2;
      PublisherQos pub_qos;
      DataWriterQos dw_qos;
      SubscriberQos sub_qos;

      DomainId_t domain;
      ReturnCode_t status;

      DDS::String_var partition;
      DDS::String_var typeName;
      DDS::String_var typeName2;
      DDS::String_var sFilter;
      bool hasReader;
      bool hasWriter;
      bool hasCommand;
      bool hasEventReader;
      bool hasEventWriter;
      bool hasProcessor;
      int subsystemID;
      int debugLevel;
      int cmdSeqNum;
      int sndSeqNum;
      int rcvSeqNum;
      int rcvOrigin;
      double rcvdTime;
      salU64  origin;
      char   domainName[128];
      salActor sal[SAL__ACTORS_MAXCOUNT];
      int lastActor_telemetry;
      int lastActor_command;
      int lastActor_event;

    public:

     SAL_SALData(int aKey);
     SAL_SALData();

// INSERT TYPE SUPPORT      
      salReturn salTypeSupport(char *topicName);
      salReturn salTelemetryPub(char *topicName);
      salReturn salTelemetrySub(char *topicName);
//      salReturn telemetryAvailable();
//      salReturn commandAvailable();
//      salReturn eventAvailable();

//      template <class T1, class T2>
//      void putSample(T1 data, T2 writer);
//      template <class T1, class T2, class T3>
//      void getSample(T1 data, T2 info, T3 reader);
//      salReturn putSample(SALData::SALTopic data);
//      salReturn getSample(SALData::SALTopicSeq data);

      string getErrorName(DDS::ReturnCode_t status);
      void checkStatus(DDS::ReturnCode_t status, const char *info);
      void checkHandle(void *handle, string info);


      double getCurrentTime();
      double getRcvdTime();
      void setTuneableQos(char *topicName);
      void setDefaultQos(char *topicName);
      std::vector<std::string> getTelemetryNames();
      std::vector<std::string> getCommandNames();
      std::vector<std::string> getEventNames();

      salReturn getResponse(SALData::ackcmdSeq data);
      void salShutdown();
      salReturn salCommand();
      salReturn salProcessor();
      int issueCommand( SALData::command data);
      int issueCommandC( SALData_commandC *data);
      salReturn acceptCommand( SALData::commandSeq data);
      int acceptCommandC( SALData_commandC *data);
// INSERT CMDALIAS SUPPORT  for issueCommandC and acceptCommandC, acceptAnyCommand   
      salReturn ackCommand( int cmdSeqNum, salLONG  ack, salLONG error, char *result );
      salReturn checkCommand( int cmdSeqNum );
      salReturn cancelCommand( int cmdSeqNum );
      salReturn abortCommand( int cmdSeqNum );
      salReturn waitForCompletion( int cmdSeqNum ,unsigned int timeout );
      salReturn setDebugLevel( int level );
      int getDebugLevel( int level );
      int getOrigin();
      int getProperty(salCHAR *property, salCHAR *value);
      int setProperty(salCHAR *property, salCHAR *value);
      int getIntProperty(int actorIdx,salCHAR *property);
      double getDblProperty(int actorIdx,salCHAR *property);
      bool getBoolProperty(int actorIdx,salCHAR *property);
      void setMaxSamples(int actorIdx, int n);
      void logError(salReturn status);
//      salTIME currentTime();

      salReturn logEvent( char *message, int priority );      
      salReturn getEvent(SALData::logeventSeq data);
      int getEventC(SALData_logeventC *data);
// INSERT EVENTALIAS SUPPORT for getEventC and logEventC , getAnyEvent

      void createParticipant(const char *partitiontName);
      void deleteParticipant();
      void registerType(TypeSupport *ts);
      void registerType2(TypeSupport *ts);
      void createTopic(char *topicName);
      void createTopic2(char *topicName);
      void createContentFilteredTopic(const char *topicName, const char *filter,
                                      const StringSeq &expr);
      void createContentFilteredTopic2(const char *topicName, const char *filter,
                                       const StringSeq &expr);
      void createPublisher();
      void deletePublisher();
      void deleteTopics();
      void createWriter();
      void createWriter2();
      void createWriter(bool autodispose_unregistered_instances);
      void createWriter2(bool autodispose_unregistered_instances);
      void deleteWriter();
      void createSubscriber();
      void deleteSubscriber();
      void createReader(bool filtered);
      void createReader2(bool filtered);
      void deleteReader();
      DataReader_ptr getReader();
      DataReader_ptr getReader2();
      DataWriter_ptr getWriter();
      DataWriter_ptr getWriter2();
      Publisher_ptr getPublisher();
      Subscriber_ptr getSubscriber();
      Topic_ptr getTopic();
      DomainParticipant_ptr getParticipant();

      void initSalActors();
      salReturn salTelemetryPub(int actorIdx);
      salReturn salTelemetrySub(int actorIdx);
      salReturn salEvent(char *topicName);
      salReturn salEventSub(char *topicName);
      salReturn salEventPub(char *topicName);
      int getActorIndex(char *topic);
      salReturn salTypeSupport(int actorIdx);
      salReturn salCommand(char *cmdAlias);
      salReturn salProcessor(char *cmdAlias);
      void registerType(int actorIdx,TypeSupport *ts);
      void registerType2(int actorIdx,TypeSupport *ts);
      void createTopic(int actorIdx);
      void createTopic2(int actorIdx);
      void createTopic(int actorIdx, char *topicName);
      void createTopic2(int actorIdx, char *topicName);
      void createContentFilteredTopic(int actorIdx,const char *topicName, const char *filter,const StringSeq &expr);
      void createContentFilteredTopic2(int actorIdx,const char *topicName, const char *filter,const StringSeq &expr);
      void createPublisher(int actorIdx);
      void createWriter(int actorIdx);
      void createWriter(int actorIdx,bool autodispose_unregistered_instances);
      void createWriter2(int actorIdx);
      void createWriter2(int actorIdx,bool autodispose_unregistered_instances);
      void createSubscriber(int actorIdx);
      void createReader(int actorIdx,bool filtered);
      void createReader2(int actorIdx,bool filtered);
      DataReader_ptr getReader(int actorIdx);
      DataWriter_ptr getWriter(int actorIdx);
      DataReader_ptr getReader2(int actorIdx);
      DataWriter_ptr getWriter2(int actorIdx);
      Publisher_ptr  getPublisher(int actorIdx);
      Subscriber_ptr getSubscriber(int actorIdx);
      Topic_ptr      getTopic(int actorIdx);
      Topic_ptr      getTopic2(int actorIdx);
      bool actorActive(int actorIdx);
      bool actorReader(int actorIdx);
      bool actorWriter(int actorIdx);
      bool actorCommand(int actorIdx);
      bool actorEventReader(int actorIdx);
      bool actorEventWriter(int actorIdx);
      bool actorProcessor(int actorIdx);


      ~SAL_SALData();
  };

#endif
