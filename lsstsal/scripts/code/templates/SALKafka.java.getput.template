 	public int putSample(SALTopic data)
	{
          int status = SAL__OK;
	  DataWriter dwriter = getWriter();
	  SALTopicDataWriter SALWriter = SALTopicDataWriterHelper.narrow(dwriter);
	  data.private_revCode = "LSST TEST REVCODE";
	  if (debugLevel > 0) {
	    System.out.println("=== [putSample SALTopic] writing a message containing :");
	    System.out.println("    revCode  : " + data.private_revCode);
	  }
	  SALWriter.register_instance(data);
	  status = SALWriter.write(data, HANDLE_NIL.value);
	  checkStatus(status, "SALCommandDataWriter.write");
	  return status;
	}


	public int getSample(SALTopic data)
	{
	  int status =  -1;
          int last = 0;
          SALTopicSeqHolder SALInstance = new SALTopicSeqHolder();
	  DataReader dreader = getReader();
	  SALTopicDataReader SALReader = SALTopicDataReaderHelper.narrow(dreader);
  	  SampleInfoSeqHolder infoSeq = new SampleInfoSeqHolder();
	  SALReader.take(SALInstance, infoSeq, LENGTH_UNLIMITED.value,
					ANY_SAMPLE_STATE.value, ANY_VIEW_STATE.value,
					ANY_INSTANCE_STATE.value);
	  if (debugLevel > 0) {
		for (int i = 0; i < SALInstance.value.length; i++) {
				System.out.println("=== [getSample SALTopic] message received :");
				System.out.println("    revCode  : "
						+ SALInstance.value[i].private_revCode);
                   last = i;
		}
	  }
          if (last > 0) {
            data = SALInstance.value[last];
          }
          status = SALReader.return_loan (SALInstance, infoSeq);
	  return last;
	}


