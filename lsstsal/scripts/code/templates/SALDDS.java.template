
package org.lsst.sal;

import org.opensplice.dds.dcps.TypeSupportImpl;
import DDS.*;
import DDS.STATUS_MASK_NONE; 
import DDS.DOMAIN_ID_DEFAULT;
import DDS.DATAREADER_QOS_USE_TOPIC_QOS;
import DDS.DataReader;
import DDS.DataWriter;
import DDS.DataWriterQosHolder;
import DDS.DomainParticipant;
import DDS.DomainParticipantFactory;
import DDS.DurabilityQosPolicyKind;
import DDS.PARTICIPANT_QOS_DEFAULT;
import DDS.Publisher;
import DDS.PublisherQosHolder;
import DDS.ReliabilityQosPolicyKind;
import DDS.Subscriber;
import DDS.SubscriberQosHolder;
import DDS.Topic;
import DDS.TopicQosHolder;
import DDS.DurabilityQosPolicyKind;
import DDS.HANDLE_NIL;
import DDS.ANY_INSTANCE_STATE;
import DDS.ANY_SAMPLE_STATE;
import DDS.ANY_VIEW_STATE;
import DDS.DataReader;
import DDS.LENGTH_UNLIMITED;
import DDS.SampleInfoSeqHolder;
import org.lsst.sal.salActor;
import java.util.Random;

// INSERT SAL IMPORTS

public class SAL_SALData {

	private DomainParticipantFactory dpf;
	private DomainParticipant participant;
	private Topic topic;
        private Topic topic2;
        private ContentFilteredTopic filteredtopic;
        private ContentFilteredTopic filteredtopic2;
	private TopicQosHolder topicQos = new TopicQosHolder();
	private TopicQosHolder topicQos2 = new TopicQosHolder();
	private PublisherQosHolder pubQos = new PublisherQosHolder();
	private SubscriberQosHolder subQos = new SubscriberQosHolder();

	private DataWriterQosHolder WQosH = new DataWriterQosHolder();

	private Publisher publisher;
	private DataWriter writer;
	private DataWriter writer2;

	private Subscriber subscriber;
	private DataReader reader;
	private DataReader reader2;

	private String typeName;
	private String typeName2;
	private String partitionName;
        private Boolean hasReader;
        private Boolean hasWriter;
        private Boolean hasEventReader;
        private Boolean hasEventWriter;
        private Boolean hasProcessor;
        private Boolean hasCommand;
        private int debugLevel;
        private int sndSeqNum;
        private int rcvSeqNum;
        private int rcvOrigin;
        private int subsystemID;
        private long origin;
        private String domainName;
        private int lastActor_telemetry;
        private int lastActor_command;
        private int lastActor_event;

        salActor[] sal = new salActor[SAL__ACTORS_MAXCOUNT];

// INSERT TYPE SUPPORT      

        public int getActorIndex (String topicName) {
          for (int i=0; i<SAL__ACTORS_MAXCOUNT;i++) {
             if ( topicName.length() == sal[i].topicName.length() )  {
                if ( topicName.equals(sal[i].topicName) )  {
                   return i;
                }
             }
          }
          return SAL__ERROR;
        }


	public int salTelemetryPub(String topicName)
	{
	  int actorIdx = -1;
	  int status = 0;

	  actorIdx = getActorIndex(topicName);
	  if (actorIdx > -1) {
	     salTelemetryPub(actorIdx);
	  } else {
	     status = SAL__ERROR;
	  }
	  return status;
	}

	public int salTelemetrySub(String topicName)
	{
	  int actorIdx = -1;
	  int status = 0;

	  actorIdx = getActorIndex(topicName);
	  if (actorIdx > -1) {
	     salTelemetrySub(actorIdx);
	  } else {
	     status = SAL__ERROR;
	  }
	  return status;
	}


        public int salTelemetryPub(int actorIdx)
	{
		String partitionName = domainName;

		// create Domain Participant
		createParticipant(partitionName);

		// create Type
		salTypeSupport(actorIdx);

		// create Topic
		createTopic(actorIdx);

		// create Publisher
		createPublisher(actorIdx);

		// create DataWriter
		createWriter(actorIdx,false);
		sal[actorIdx].isWriter = true;
                return SAL__OK;
        }




        public int salTelemetrySub(int actorIdx)
	{
		String partitionName = domainName;
		// create Domain Participant
		createParticipant(partitionName);

		// create Type
		salTypeSupport(actorIdx);
		// create Type

		// create Topic
		createTopic(actorIdx);

		// create Subscriber
		createSubscriber(actorIdx);

		// create DataReader
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
  		// Filter expr
                String expr[] = new String[0];
                String sFilter = "SALDataID = " + subsystemID;
                String ftopicName = "filtered_" + sal[actorIdx].topicHandle;
   		createContentFilteredTopic(actorIdx,ftopicName, sFilter, expr);

		// create DataReader
 		createReader(actorIdx,true);
#else
		createReader(actorIdx,false);
#endif
                sal[actorIdx].isReader = true;
                return SAL__OK;
	}



	public void logError(int status) 
	{
		System.out.println("=== ERROR return value = " + status); 
	}

        
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
        public void salInitialize(int aKey)
	{
                String dname = System.getenv("LSST_DDS_DOMAIN");
                if (dname != null) {
                   domainName = dname;
                } else {
                   domainName = "LSST";
                }
		hasReader = false;
		hasWriter = false;
		debugLevel = 0;
		hasCommand = false;
		hasProcessor = false;
		hasEventReader = false;
		hasEventWriter = false;
		subsystemID = aKey;
                rcvOrigin = 0;
	}

        public SAL_SALData(int aKey)
	{
                String dname = System.getenv("LSST_DDS_DOMAIN");
                if (dname != null) {
                   domainName = dname;
                } else {
                   domainName = "LSST";
                }
		hasReader = false;
		hasWriter = false;
		hasCommand = false;
		hasProcessor = false;
		hasEventReader = false;
		hasEventWriter = false;
		subsystemID = aKey;
		debugLevel = 0;
                rcvOrigin = 0;
                initSalActors();
	}
#else
        public void salInitialize()
	{
                String dname = System.getenv("LSST_DDS_DOMAIN");
                if (dname != null) {
                   domainName = dname;
                } else {
                   domainName = "LSST";
                }
		hasReader = false;
		hasWriter = false;
		debugLevel = 0;
		hasCommand = false;
		hasProcessor = false;
		hasEventReader = false;
		hasEventWriter = false;
		subsystemID = 0;
                rcvOrigin = 0;
	}

	public SAL_SALData()
	{
                String dname = System.getenv("LSST_DDS_DOMAIN");
                if (dname != null) {
                   domainName = dname;
                } else {
                   domainName = "LSST";
                }
		hasReader = false;
		hasWriter = false;
		hasCommand = false;
		hasEventReader = false;
		hasEventWriter = false;
		hasProcessor = false;
		subsystemID = 0;
		debugLevel = 0;
                rcvOrigin = 0;
                initSalActors();
	}
#endif

	public void setTuneableQos (String topicName)
	{
	    int actorIdx;
	    actorIdx = getActorIndex(topicName);
	    if (actorIdx > 0) {
	       sal[actorIdx].tuneableQos = true;
	    }
	}


	public void setDefaultQos (String topicName)
	{
	    int actorIdx;
	    actorIdx = getActorIndex(topicName);
	    if (actorIdx > 0) {
	       sal[actorIdx].tuneableQos = false;
	    }
	}


	public double getCurrentTime()
	{
		long ms = System.currentTimeMillis();
  		double ts = (double)ms / 1000.0;
		return ts;
	}

	public int issueCommand( command data )
	{
  	  long cmdHandle = HANDLE_NIL.value;
          int status;
	  if (!hasWriter) {
	     createWriter(false);
	     hasWriter = true;
	     sndSeqNum = 1;
	  }
	  DataWriter dwriter = getWriter();	
	  commandDataWriter SALWriter = commandDataWriterHelper.narrow(dwriter);
	  data.private_revCode = "LSST TEST COMMAND";
	  data.private_seqNum = sndSeqNum;
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
	  data.SALDataID = subsystemID;
	  cmdHandle = SALWriter.register_instance(data);
#else
	  SALWriter.register_instance(data);
#endif
	  if (debugLevel > 0) {
	    System.out.println( "=== [issueCommand] writing a command containing :");
	    System.out.println( " " + data.device + "." + data.property + "." + data.action + " : " + data.itemValue);
	  }
	  status = SALWriter.write(data, cmdHandle);
	  sndSeqNum++;
	  return (sndSeqNum-1);
	}

	public int ackCommand( int cmdId, int ack, int error, String result )
	{
   		int istatus = -1;
   		long ackHandle = HANDLE_NIL.value;

   		SALData.ackcmd ackdata;
   		DataWriter dwriter = getWriter2();
   		ackcmdDataWriter SALWriter = ackcmdDataWriterHelper.narrow(dwriter);
                ackdata = new SALData.ackcmd();
   		ackdata.private_origin = rcvOrigin;
   		ackdata.private_seqNum = rcvSeqNum;
   		ackdata.error = error;
   		ackdata.ack = ack;
   		ackdata.result = result;
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
   		ackdata.SALDataID = subsystemID;
#endif
   		if (debugLevel > 0) {
      			System.out.println(  "=== [ackCommand] acknowledging a command with :" );
      			System.out.println(  "    seqNum   : " + ackdata.private_seqNum );
      			System.out.println(  "    ack      : " + ackdata.ack );
      			System.out.println(  "    error    : " + ackdata.error );
      			System.out.println(  "    result   : " + ackdata.result );
   		}
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
   		ackdata.SALDataID = subsystemID;
   		ackHandle = SALWriter.register_instance(ackdata);
#endif
   		istatus = SALWriter.write(ackdata, ackHandle);
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
    		SALWriter.unregister_instance(ackdata, ackHandle);
#endif
   		return SAL__OK;
	}



	public int acceptCommand( SALData.command data )
	{
                commandSeqHolder aCmd = new commandSeqHolder();
   		SampleInfoSeqHolder info;
   		int status = 0;
   		int istatus =  -1;
   		SALData.ackcmd ackdata;;
   		long ackHandle = HANDLE_NIL.value;

  		// create DataWriter :
  		// If autodispose_unregistered_instances is set to true (default value),
  		// you will have to start the subscriber before the publisher
  		boolean autodispose_unregistered_instances = false;
  		if (!hasWriter) {
     			createWriter2(autodispose_unregistered_instances);
     			hasWriter = true;
  		}
  		DataWriter dwriter = getWriter2();
  		ackcmdDataWriter SALWriter = ackcmdDataWriterHelper.narrow(dwriter);
  		DataReader dreader = getReader();
  		commandDataReader SALReader = commandDataReaderHelper.narrow(dreader);
                info = new SampleInfoSeqHolder();
  		istatus = SALReader.take(aCmd, info, 1,ANY_SAMPLE_STATE.value, ANY_VIEW_STATE.value, ANY_INSTANCE_STATE.value);
		if (aCmd.value.length > 0) {
   		  if (info.value[0].valid_data) {
    		     if (debugLevel > 0) {
      			System.out.println(  "=== [acceptCommand] reading a command containing :" );
      			System.out.println(  "    seqNum   : " + aCmd.value[0].private_seqNum );
      			System.out.println(  "    device   : " + aCmd.value[0].device);
      			System.out.println(  "    property : " + aCmd.value[0].property);
      			System.out.println(  "    action   : " + aCmd.value[0].action);
      			System.out.println(  "    itemValue: " + aCmd.value[0].itemValue);
      			System.out.println(  "    modifiers: " + aCmd.value[0].modifiers);
    		    }
                    ackdata = new SALData.ackcmd();
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
	            ackdata.SALDataID = subsystemID;
#endif
		    ackdata.private_origin = aCmd.value[0].private_origin;
		    ackdata.private_seqNum = aCmd.value[0].private_seqNum;
		    ackdata.error  = 0;
		    ackdata.result = "SAL ACK";
                    data.device    = aCmd.value[0].device;
                    data.property  = aCmd.value[0].property;
                    data.action    = aCmd.value[0].action;
                    data.itemValue = aCmd.value[0].itemValue;
                    data.modifiers = aCmd.value[0].modifiers;
		    status = aCmd.value[0].private_seqNum;
		    rcvSeqNum = status;
		    rcvOrigin = aCmd.value[0].private_origin;
		    ackdata.ack = SAL__CMD_ACK;
		    SALReader.return_loan(aCmd, info);
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
		    ackdata.SALDataID = subsystemID;
		    ackHandle = SALWriter.register_instance(ackdata);
#endif
		    istatus = SALWriter.write(ackdata, ackHandle);
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
		    SALWriter.unregister_instance(ackdata, ackHandle);
#endif
		 }
	     } else {
	        status = 0;
	     }
	     return status;
	}

// INSERT CMDALIAS SUPPORT  for issueCommand and acceptCommand  


	public int checkCommand( int cmdSeqNum )
	{
	   int status;
	   ackcmdSeqHolder ackcmd = new ackcmdSeqHolder();
	   status = getResponse(ackcmd);
	   return status;
	}

	public int getResponse(ackcmdSeqHolder data)
	{
	  int status =  -1;
          int lastsample = 0;

	  DataReader dreader = getReader2();
	  ackcmdDataReader SALReader = ackcmdDataReaderHelper.narrow(dreader);
  	  SampleInfoSeqHolder infoSeq = new SampleInfoSeqHolder();
	  SALReader.take(data, infoSeq, 1,
					ANY_SAMPLE_STATE.value, ANY_VIEW_STATE.value,
					ANY_INSTANCE_STATE.value);
	  if (data.value.length > 0) {
 		for (int i = 0; i < data.value.length; i++) {
                     if ( debugLevel > 0) {
				System.out.println("=== [getResponse] message received :");
				System.out.println("    revCode  : "
						+ data.value[i].private_revCode);
		    }
                    lastsample = i;
		}
	 	status = data.value[lastsample].ack;
	  	rcvSeqNum = data.value[lastsample].private_seqNum;
	  	rcvOrigin = data.value[lastsample].private_origin;
	  } else {
	        System.out.println("=== [getResponse] No ack yet!"); 
	        status = SAL__CMD_NOACK;
	  }
    	  SALReader.return_loan(data, infoSeq);
	  return status;
	}

	public int cancelCommand( int cmdSeqNum )
	{
	   int status = 0;
	   return status;
	}


	public int abortCommand( int cmdSeqNum )
	{
	   int status = 0;
	   return status;
	}

        public static final int SAL__SLOWPOLL= 		   1;
        public static final int SAL__OK = 		   0;
        public static final int SAL__ERR = 		  -1;
        public static final int SAL__ERROR = 		  -1;
        public static final int SAL__NO_UPDATES = 	-100;
        public static final int SAL__LOG_ROUTINES = 	   1;
        public static final int SAL__CMD_ACK =      	 300;
        public static final int SAL__CMD_INPROGRESS = 	 301;
        public static final int SAL__CMD_STALLED =    	 302;
        public static final int SAL__CMD_COMPLETE =   	 303;
        public static final int SAL__CMD_NOPERM =   	-300;
        public static final int SAL__CMD_NOACK =    	-301;
        public static final int SAL__CMD_FAILED =   	-302;
        public static final int SAL__CMD_ABORTED =  	-303;
        public static final int SAL__CMD_TIMEOUT =  	-304;
        public static final int SAL__DATA_AVAIL	=	400;
        public static final int SAL__DEADLINE_MISS =	401;
        public static final int SAL__INCOMPAT_QOS =	402;
        public static final int SAL__SAMPLE_REJ	=	403;
        public static final int SAL__LIVELINESS_CHG =	404;
        public static final int SAL__SAMPLELOST	=	405;
        public static final int SAL__SUBSCR_MATCH =	406;
        public static final int SAL__STATE_DISABLED = 	1;
        public static final int SAL__STATE_ENABLED = 	2;
        public static final int SAL__STATE_FAULT = 	3;
        public static final int SAL__STATE_OFFLINE = 	4;
        public static final int SAL__STATE_STANDBY = 	5;
        public static final int SAL__STATE_COUNT = 	5;


	public int waitForCompletion( int cmdSeqNum , int timeout )
	{
	   int status = 0;
	   int countdown = timeout;
	   ackcmdSeqHolder ackcmd = new ackcmdSeqHolder();

	   while (status != SAL__CMD_COMPLETE && countdown != 0) {
	      status = getResponse(ackcmd);
	      if (status != SAL__CMD_NOACK) {
	        if (rcvSeqNum != cmdSeqNum) { 
	           status = SAL__CMD_NOACK;
	        }
	      }
	      try
		{
	 	  Thread.sleep(100*timeout);
		}
		catch(InterruptedException ie)
		{
			// nothing to do
	      }
	      System.out.println( "=== [waitForCompletion] command " + cmdSeqNum +  " countdown = " + countdown);
	      countdown--;
	   }
	   if (status != SAL__CMD_COMPLETE) {
	      if (debugLevel > 0) {
	         System.out.println( "=== [waitForCompletion] command " + cmdSeqNum +  " timed out");
	      } 
	      logError(status);
	   } else {
	      if (debugLevel > 0) {
	         System.out.println( "=== [waitForCompletion] command " + cmdSeqNum +  " completed ok");
	      } 
           }
 	   return status;
	}


	public int getEvent(SALData.logevent anEvent)
	{
	  int status =  -1;
	  int actorIdx = SAL__SALData_logevent_ACTOR; 
	  if (sal[actorIdx].isEventReader == false) {
	     salTelemetrySub("SALData_logevent");
	     sal[actorIdx].isEventReader = true;
	  }
	  DataReader dreader = getReader(actorIdx);
	  logeventDataReader SALReader = logeventDataReaderHelper.narrow(dreader);
          logeventSeqHolder data = new logeventSeqHolder();
  	  SampleInfoSeqHolder infoSeq = new SampleInfoSeqHolder();
	  SALReader.take(data, infoSeq, 1,
					ANY_SAMPLE_STATE.value, ANY_VIEW_STATE.value,
					ANY_INSTANCE_STATE.value);
          if (data.value.length > 0) {
  	     if (infoSeq.value[0].valid_data) {
		for (int i = 0; i < data.value.length; i++) {
		  if (debugLevel > 0) {
				System.out.println("=== [getEvent] message received :");
				System.out.println("    revCode  : "
						+ data.value[i].private_revCode);
                  }
		}
                anEvent.message = data.value[0].message;
                status = SAL__OK;
             } else {
                status = SAL__NO_UPDATES;
             }
	  } else {
             status = SAL__NO_UPDATES;
          }
          SALReader.return_loan(data,infoSeq);
	  return status;
	}

	public int logEvent( String message, int priority )
	{
	   int status = 0;
	   int actorIdx = SAL__SALData_logevent_ACTOR; 
	   int istatus =  -1;
	   SALData.logevent event;
	   String stopic="SALData_logevent";
	   long eventHandle = HANDLE_NIL.value;

	  if (sal[actorIdx].isEventWriter == false) {
	    salTelemetryPub(stopic);
	    sal[actorIdx].isEventWriter = true;	
  	  }
	  DataWriter dwriter = getWriter(actorIdx);
	  logeventDataWriter SALWriter = logeventDataWriterHelper.narrow(dwriter);
          event = new SALData.logevent();
	  event.message = message;
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
	   event.SALDataID = subsystemID;
	   eventHandle = SALWriter.register_instance(event);	
#endif
	  status=SALWriter.write(event, eventHandle);
	  checkStatus(status, "logEventDataWriter.write");
	  SALWriter.dispose(event, eventHandle);
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
	   SALWriter.unregister_instance(event, eventHandle);
#endif
	   return status;
	}

// INSERT EVENTALIAS SUPPORT



	public int setDebugLevel( int level )
	{
           int status = 0;
	   debugLevel = level;
	   return status;	
	}

	public int getDebugLevel( int level )
	{
	   return debugLevel;
	}

	public int getOrigin()
	{
	   int status = 0;
	   return status;
	}

	public int getProperty(String property, String value)
	{
	   int status = SAL__OK;
	   value = "UNKNOWN";
	   if (status != SAL__OK) {
	      if (debugLevel >= SAL__LOG_ROUTINES) {
	          logError(status);
	      }
	   }
	   return status;
	}

	public int setProperty(String property, String value)
	{
           int status = SAL__OK;
	   if (status != SAL__OK) {
	      if (debugLevel >= SAL__LOG_ROUTINES) {
	          logError(status);
	      }
	   }
	   return status;
	}
 

	public void salCommand()
	{
	  String stopic1="keyedCommand";
	  String stopic2="keyedResponse";
	  String scommand="SALData_command";
	  String sresponse="SALData_ackcmd";

	  // create domain participant
	  createParticipant(domainName);

	  //create Publisher
	  createPublisher();
	  createSubscriber();

	  //create types
	  commandTypeSupport mt = new commandTypeSupport();
	  registerType(mt);
	  ackcmdTypeSupport mtr = new ackcmdTypeSupport();
	  registerType2(mtr);

	  //create Topics
	  createTopic(scommand);
	  createTopic2(sresponse);
	
	  //create a reader for responses
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
  	  // Filter expr
          String expr[] = new String[0];
          String sFilter = "SALDataID = " + subsystemID;
    	  createContentFilteredTopic2("filteredResponse", sFilter, expr);

	  // create DataReader
 	  createReader2(false);
#else
	  createReader2(false);
#endif
	  hasReader = true;
	  hasCommand = true;
	}


	public void salCommand(String cmdAlias)
	{
          int actorIdx = getActorIndex(cmdAlias);
	  String stopic1="keyedCommand";
	  String stopic2="keyedResponse";
	  String sresponse="SALData_ackcmd";

	  // create domain participant
	  createParticipant(domainName);

	  //create Publisher
	  createPublisher(actorIdx);

	  //create types
	  salTypeSupport(actorIdx);

	  //create Topics
	  createTopic(actorIdx,cmdAlias);
	  boolean autodispose_unregistered_instances = false;
	  createWriter(actorIdx,autodispose_unregistered_instances);
	  sal[actorIdx].isWriter = true;
	  sal[actorIdx].isCommand = true;
          sal[actorIdx].sndSeqNum = (int)getCurrentTime();
          sal[SAL__SALData_ackcmd_ACTOR].sampleAge = 1.0;
	
          if ( sal[SAL__SALData_ackcmd_ACTOR].isReader == false ) {
	    createSubscriber(SAL__SALData_ackcmd_ACTOR);
	    ackcmdTypeSupport mtr = new ackcmdTypeSupport();
	    registerType2(SAL__SALData_ackcmd_ACTOR,mtr);
	    createTopic2(SAL__SALData_ackcmd_ACTOR,sresponse);
	    //create a reader for responses
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
  	    // Filter expr
            String expr[] = new String[0];
            String sFilter = "SALDataID = " + subsystemID;
    	    createContentFilteredTopic2(SAL__SALData_ackcmd_ACTOR,"filteredResponse", sFilter, expr);

	    // create DataReader
 	    createReader2(SAL__SALData_ackcmd_ACTOR,false);
#else
	    createReader2(SAL__SALData_ackcmd_ACTOR,false);
#endif
 	    sal[SAL__SALData_ackcmd_ACTOR].isReader = true;
          }

	}



	public void salProcessor()
	{
	  String stopic1="keyedCommand";
	  String stopic2="keyedResponse";
	  String scommand="SALData_command";
	  String sresponse="SALData_ackcmd";

	  // create domain participant
	  createParticipant(domainName);

	  //create Publisher
	  createPublisher();
	  createSubscriber();

	  //create types
	  commandTypeSupport mt = new commandTypeSupport();
	  registerType(mt);
	  ackcmdTypeSupport mtr = new ackcmdTypeSupport();
	  registerType2(mtr);

	  //create Topics
	  createTopic(scommand);
	  createTopic2(sresponse);

	  //create a reader for commands
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
  	  // Filter expr
          String expr[] = new String[0];
          String sFilter = "SALDataID = " + subsystemID;
    	  createContentFilteredTopic("filteredCommand", sFilter, expr);
 	  createReader(false);
#else
	  createReader(false);
#endif
	  boolean autodispose_unregistered_instances = false;
	  createWriter2(autodispose_unregistered_instances);
	  hasWriter = true;
	  hasProcessor = true;
	}


	public void salProcessor(String cmdAlias)
	{
          int actorIdx = getActorIndex(cmdAlias);
	  String stopic1="keyedCommand";
	  String stopic2="keyedResponse";
	  String sresponse="SALData_ackcmd";

	  // create domain participant
	  createParticipant(domainName);

	  createSubscriber(actorIdx);

	  //create types
	  salTypeSupport(actorIdx);

	  //create Topics
	  createTopic(actorIdx,cmdAlias);

	  //create a reader for commands
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
  	  // Filter expr
          String expr[] = new String[0];
          String sFilter = "SALDataID = " + subsystemID;
          String fCmd = "filteredCmd" + sal[actorIdx].topicHandle;
    	  createContentFilteredTopic(actorIdx,fCmd, sFilter, expr);
 	  createReader(actorIdx,false);
#else
	  createReader(actorIdx,false);
#endif

          if (sal[actorIdx].isProcessor == false) {
  	    //create Publisher
	    createPublisher(SAL__SALData_ackcmd_ACTOR);
	    ackcmdTypeSupport mtr = new ackcmdTypeSupport();
	    registerType2(SAL__SALData_ackcmd_ACTOR,mtr);
	    createTopic2(SAL__SALData_ackcmd_ACTOR,sresponse);
   	    boolean autodispose_unregistered_instances = false;
	    createWriter2(SAL__SALData_ackcmd_ACTOR,autodispose_unregistered_instances);
	    sal[SAL__SALData_ackcmd_ACTOR].isWriter = true;
          }
	  sal[actorIdx].isProcessor = true;
          sal[actorIdx].sampleAge = 1.0;
	}

	public void salShutdown()
	{
          if (participant != null) {
            participant.delete_contained_entities();
  	    deleteParticipant();
          }
	}

	public int salEvent(String topicName)
	{
                int actorIdx = getActorIndex(topicName);
                if ( actorIdx < 0) {return SAL__ERROR;}

		String partitionName = domainName;

		// create Domain Participant
		createParticipant(partitionName);

		// create Type
		salTypeSupport(actorIdx);

		// create Topic
		createTopic(actorIdx);
                return SAL__OK;
	}

	public int salEventSub(String topicName)
	{
		int status = SAL__ERROR;
                int actorIdx = getActorIndex(topicName);
                if ( actorIdx < 0) {return SAL__ERROR;}
		status = salTelemetrySub(actorIdx);
                sal[actorIdx].isEventReader = true;
		return status;
	}

	public int salEventPub(String topicName)
	{
		int status = SAL__ERROR;
                int actorIdx = getActorIndex(topicName);
                if ( actorIdx < 0) {return SAL__ERROR;}
		status = salTelemetryPub(actorIdx);
                sal[actorIdx].isEventWriter = true;
		return status;
	}

	public void createParticipant(String partitionName) {
           if (participant == null) {
		dpf = DomainParticipantFactory.get_instance();
		checkHandle(dpf, "DomainParticipantFactory.get_instance");

		participant = dpf.create_participant(DOMAIN_ID_DEFAULT.value,
				PARTICIPANT_QOS_DEFAULT.value, null, STATUS_MASK_NONE.value);
		checkHandle(dpf,
				"DomainParticipantFactory.create_participant");
		this.partitionName = partitionName;
           }
	}

	public void deleteParticipant() {
		dpf.delete_participant(participant);
	}

	public void registerType(TypeSupportImpl ts) {
		typeName = ts.get_type_name();
		int status = ts.register_type(participant, typeName);
		checkStatus(status, "register_type");
	}

	public void registerType2(TypeSupportImpl ts) {
		typeName2 = ts.get_type_name();
		int status = ts.register_type(participant, typeName2);
		checkStatus(status, "register_type");
	}

	public void registerType(int actorIdx, TypeSupportImpl ts) {
		sal[actorIdx].typeName = ts.get_type_name();
		int status = ts.register_type(participant, sal[actorIdx].typeName);
		checkStatus(status, "register_type");
	}

	public void registerType2(int actorIdx,TypeSupportImpl ts) {
		sal[actorIdx].typeName2 = ts.get_type_name();
		int status = ts.register_type(participant, sal[actorIdx].typeName2);
		checkStatus(status, "register_type");
	}



	public void createTopic(String topicName) {
		int status = -1;
		participant.get_default_topic_qos(topicQos);
		topicQos.value.reliability.kind = ReliabilityQosPolicyKind.RELIABLE_RELIABILITY_QOS;
		topicQos.value.durability.kind = DurabilityQosPolicyKind.TRANSIENT_DURABILITY_QOS;
		topicQos.value.history.kind = HistoryQosPolicyKind.KEEP_LAST_HISTORY_QOS;
		topicQos.value.history.depth = 1000;
		status = participant.set_default_topic_qos(topicQos.value);
		checkStatus(status,
				"DomainParticipant.set_default_topic_qos");
		System.out.println("=== [createTopic] : topicName " + topicName + " type = " + typeName);
		topic = participant.create_topic(topicName, typeName, topicQos.value,
				null, STATUS_MASK_NONE.value);
		checkHandle(topic, "DomainParticipant.create_topic");
	}

	public void createTopic2(String topicName) {
		int status = -1;
		participant.get_default_topic_qos(topicQos2);
		topicQos2.value.reliability.kind = ReliabilityQosPolicyKind.RELIABLE_RELIABILITY_QOS;
		topicQos2.value.durability.kind = DurabilityQosPolicyKind.TRANSIENT_DURABILITY_QOS;
		topicQos2.value.history.kind = HistoryQosPolicyKind.KEEP_LAST_HISTORY_QOS;
		topicQos2.value.history.depth = 1000;
		status = participant.set_default_topic_qos(topicQos2.value);
		checkStatus(status,
				"DomainParticipant.set_default_topic_qos");
		System.out.println("=== [createTopic2] : topicName " + topicName + " type = " + typeName2);

		topic2 = participant.create_topic(topicName, typeName2, topicQos2.value,
				null, STATUS_MASK_NONE.value);
		checkHandle(topic2, "DomainParticipant.create_topic");
	}


	public void createTopic(int actorIdx) {
		int status = -1;
		participant.get_default_topic_qos(sal[actorIdx].topicQos);
		if (sal[actorIdx].tuneableQos) {
			sal[actorIdx].topicQos.value.reliability.kind = ReliabilityQosPolicyKind.RELIABLE_RELIABILITY_QOS;
			sal[actorIdx].topicQos.value.durability.kind = DurabilityQosPolicyKind.TRANSIENT_DURABILITY_QOS;
			sal[actorIdx].topicQos.value.history.kind = HistoryQosPolicyKind.KEEP_LAST_HISTORY_QOS;
			sal[actorIdx].topicQos.value.history.depth = sal[actorIdx].historyDepth;
//                        sal[actorIdx].topicQos.resource_limits.max_samples = sal[actorIdx].historyDepth;
//                        sal[actorIdx].topicQos.resource_limits.max_instances = sal[actorIdx].historyDepth;
//                        sal[actorIdx].topicQos.resource_limits.max_samples_per_instance = sal[actorIdx].historyDepth;
			status = participant.set_default_topic_qos(sal[actorIdx].topicQos.value);
			checkStatus(status,
				"DomainParticipant.set_default_topic_qos");
		}
		System.out.println("=== [createTopic] : topicName " + sal[actorIdx].topicName + " type = " + sal[actorIdx].typeName);
		sal[actorIdx].topic = participant.create_topic(sal[actorIdx].topicHandle, sal[actorIdx].typeName, sal[actorIdx].topicQos.value,
				null, STATUS_MASK_NONE.value);
		checkHandle(sal[actorIdx].topic, "DomainParticipant.create_topic");
	}

	public void createTopic2(int actorIdx) {
		int status = -1;
		participant.get_default_topic_qos(sal[actorIdx].topicQos2);
		if (sal[actorIdx].tuneableQos) {
			sal[actorIdx].topicQos2.value.reliability.kind = ReliabilityQosPolicyKind.RELIABLE_RELIABILITY_QOS;
			sal[actorIdx].topicQos2.value.durability.kind = DurabilityQosPolicyKind.TRANSIENT_DURABILITY_QOS;
			sal[actorIdx].topicQos2.value.history.kind = HistoryQosPolicyKind.KEEP_LAST_HISTORY_QOS;
			sal[actorIdx].topicQos2.value.history.depth = sal[actorIdx].historyDepth;
//                        sal[actorIdx].topicQos2.resource_limits.max_samples = sal[actorIdx].historyDepth;
//                        sal[actorIdx].topicQos2.resource_limits.max_instances = sal[actorIdx].historyDepth;
//                        sal[actorIdx].topicQos2.resource_limits.max_samples_per_instance = sal[actorIdx].historyDepth;
			status = participant.set_default_topic_qos(sal[actorIdx].topicQos2.value);
			checkStatus(status,
				"DomainParticipant.set_default_topic_qos");
		}
		System.out.println("=== [createTopic2] : topicName " + sal[actorIdx].topicName + " type = " + sal[actorIdx].typeName2);

		sal[actorIdx].topic2 = participant.create_topic(sal[actorIdx].topicHandle, sal[actorIdx].typeName2, sal[actorIdx].topicQos2.value,
				null, STATUS_MASK_NONE.value);
		checkHandle(sal[actorIdx].topic2, "DomainParticipant.create_topic");
	}

	public void createTopic(int actorIdx, String topicName) {
		int status = -1;
		participant.get_default_topic_qos(sal[actorIdx].topicQos);
		if (sal[actorIdx].tuneableQos) {
			sal[actorIdx].topicQos.value.reliability.kind = ReliabilityQosPolicyKind.RELIABLE_RELIABILITY_QOS;
			sal[actorIdx].topicQos.value.durability.kind = DurabilityQosPolicyKind.TRANSIENT_DURABILITY_QOS;
			sal[actorIdx].topicQos.value.history.kind = HistoryQosPolicyKind.KEEP_LAST_HISTORY_QOS;
			sal[actorIdx].topicQos.value.history.depth = sal[actorIdx].historyDepth;
//                        sal[actorIdx].topicQos.resource_limits.max_samples = sal[actorIdx].historyDepth;
//                        sal[actorIdx].topicQos.resource_limits.max_instances = sal[actorIdx].historyDepth;
//                        sal[actorIdx].topicQos.resource_limits.max_samples_per_instance = sal[actorIdx].historyDepth;
			status = participant.set_default_topic_qos(sal[actorIdx].topicQos.value);
			checkStatus(status,
				"DomainParticipant.set_default_topic_qos");
		}
		System.out.println("=== [createTopic] : topicName " + topicName + " type = " + sal[actorIdx].typeName);
		sal[actorIdx].topic = participant.create_topic(sal[actorIdx].topicHandle, sal[actorIdx].typeName, sal[actorIdx].topicQos.value,
				null, STATUS_MASK_NONE.value);
		checkHandle(sal[actorIdx].topic, "DomainParticipant.create_topic");
	}

	public void createTopic2(int actorIdx, String topicName) {
		int status = -1;
		participant.get_default_topic_qos(sal[actorIdx].topicQos2);
		if (sal[actorIdx].tuneableQos) {
			sal[actorIdx].topicQos2.value.reliability.kind = ReliabilityQosPolicyKind.RELIABLE_RELIABILITY_QOS;
			sal[actorIdx].topicQos2.value.durability.kind = DurabilityQosPolicyKind.TRANSIENT_DURABILITY_QOS;
			sal[actorIdx].topicQos2.value.history.kind = HistoryQosPolicyKind.KEEP_LAST_HISTORY_QOS;
			sal[actorIdx].topicQos2.value.history.depth = sal[actorIdx].historyDepth;
//                        sal[actorIdx].topicQos2.resource_limits.max_samples = sal[actorIdx].historyDepth;
//                        sal[actorIdx].topicQos2.resource_limits.max_instances = sal[actorIdx].historyDepth;
//                        sal[actorIdx].topicQos2.resource_limits.max_samples_per_instance = sal[actorIdx].historyDepth;
			status = participant.set_default_topic_qos(sal[actorIdx].topicQos2.value);
			checkStatus(status,
				"DomainParticipant.set_default_topic_qos");
		}
		System.out.println("=== [createTopic2] : topicName " + topicName + " type = " + sal[actorIdx].typeName2);

		sal[actorIdx].topic2 = participant.create_topic(sal[actorIdx].topicHandle, sal[actorIdx].typeName2, sal[actorIdx].topicQos2.value,
				null, STATUS_MASK_NONE.value);
		checkHandle(sal[actorIdx].topic2, "DomainParticipant.create_topic");
	}



        public void  createContentFilteredTopic( String topicName, String filter, String[] expr)
	{
	  filteredtopic = participant.create_contentfilteredtopic(topicName,topic, filter, expr);
	  checkHandle(filteredtopic, "DomainParticipant::create_contentfilteredtopic");
	}

        public void  createContentFilteredTopic2( String topicName, String filter, String[] expr)
	{
	  filteredtopic2 = participant.create_contentfilteredtopic(topicName,topic2, filter, expr);
	  checkHandle(filteredtopic2, "DomainParticipant::create_contentfilteredtopic");
	}



        public void  createContentFilteredTopic(int actorIdx, String topicName, String filter, String[] expr)
	{
	  sal[actorIdx].filteredtopic = participant.create_contentfilteredtopic(topicName,sal[actorIdx].topic, filter, expr);
	  checkHandle(sal[actorIdx].filteredtopic, "DomainParticipant::create_contentfilteredtopic");
	}

        public void  createContentFilteredTopic2(int actorIdx,  String topicName, String filter, String[] expr)
	{
	  sal[actorIdx].filteredtopic2 = participant.create_contentfilteredtopic(topicName,sal[actorIdx].topic2, filter, expr);
	  checkHandle(sal[actorIdx].filteredtopic2, "DomainParticipant::create_contentfilteredtopic");
	}



	public void deleteTopics() {
            if (filteredtopic != null) {
		int status = participant.delete_contentfilteredtopic(filteredtopic);
		checkStatus(status, "DDS.DomainParticipant.delete_contentfilteredtopic");
            }
            if (filteredtopic2 != null) {
		int status = participant.delete_contentfilteredtopic(filteredtopic2);
		checkStatus(status, "DDS.DomainParticipant.delete_contentfilteredtopic");
            }
            if (topic != null) {
		int status = participant.delete_topic(topic);
		checkStatus(status, "DDS.DomainParticipant.delete_topic");
            }
            if (topic2 != null) {
		int status = participant.delete_topic(topic2);
		checkStatus(status, "DDS.DomainParticipant.delete_topic");
            }
            for (int i=0;  i<SAL__ACTORS_MAXCOUNT; i++) {
             if (sal[i] != null) {
              if (sal[i].filteredtopic != null) {
  		  int status = participant.delete_contentfilteredtopic(sal[i].filteredtopic);
  		  checkStatus(status, "DDS.DomainParticipant.delete_contentfilteredtopic");
              }
              if (sal[i].filteredtopic2 != null) {
		  int status = participant.delete_contentfilteredtopic(sal[i].filteredtopic2);
		  checkStatus(status, "DDS.DomainParticipant.delete_contentfilteredtopic");
              }
              if (sal[i].topic != null) {
		  int status = participant.delete_topic(sal[i].topic);
		  checkStatus(status, "DDS.DomainParticipant.delete_topic");
              }
              if (sal[i].topic2 != null) {
		  int status = participant.delete_topic(sal[i].topic2);
		  checkStatus(status, "DDS.DomainParticipant.delete_topic");
              }
             }
            }
	}


	public void createPublisher() {
		int status = participant.get_default_publisher_qos(pubQos);
		checkStatus(status,
				"DomainParticipant.get_default_publisher_qos");

		pubQos.value.partition.name = new String[1];
		pubQos.value.partition.name[0] = partitionName;
		publisher = participant.create_publisher(pubQos.value, null,
				STATUS_MASK_NONE.value);
		checkHandle(publisher,
				"DomainParticipant.create_publisher");
	}


	public void createPublisher(int actorIdx) {
		int status = participant.get_default_publisher_qos(sal[actorIdx].pubQos);
		checkStatus(status,
				"DomainParticipant.get_default_publisher_qos");

		sal[actorIdx].pubQos.value.partition.name = new String[1];
		sal[actorIdx].pubQos.value.partition.name[0] = partitionName;
		sal[actorIdx].publisher = participant.create_publisher(sal[actorIdx].pubQos.value, null,
				STATUS_MASK_NONE.value);
		checkHandle(sal[actorIdx].publisher,
				"DomainParticipant.create_publisher");
	}


	public void deletePublisher() {
            if (publisher != null) {
		participant.delete_publisher(publisher);
            }
            for (int i=0;  i<SAL__ACTORS_MAXCOUNT; i++) {
                   if (sal[i] != null) {
                      if (sal[i].publisher != null) {
		         participant.delete_publisher(sal[i].publisher);
                      }
                   }
            }
	}

	public void deleteReaders() {
            if (reader != null) {
		subscriber.delete_datareader(reader);
            }
            if (reader2 != null) {
		subscriber.delete_datareader(reader2);
            }
            for (int i=0;  i<SAL__ACTORS_MAXCOUNT; i++) {
               if (sal[i] != null) {
                 if (sal[i].reader != null) {
	   	   sal[i].subscriber.delete_datareader(sal[i].reader);
                 }
                 if (sal[i].reader2 != null) {
		   sal[i].subscriber.delete_datareader(sal[i].reader2);
                 }
               }
            }
	}

	public void deleteWriters() {
            if (writer != null) {
		publisher.delete_datawriter(writer);
            }
            if (writer2 != null) {
		publisher.delete_datawriter(writer2);
            }
            for (int i=0;  i<SAL__ACTORS_MAXCOUNT; i++) {
               if (sal[i] != null) {
                 if (sal[i].writer != null) {
		   sal[i].publisher.delete_datawriter(sal[i].writer);
                 }
                 if (sal[i].writer2 != null) {
		   sal[i].publisher.delete_datawriter(sal[i].writer2);
                 }
               }
            }
	}



	public void createWriter(boolean autodispose) {
		publisher.get_default_datawriter_qos(WQosH);
		publisher.copy_from_topic_qos(WQosH, topicQos.value);
		WQosH.value.writer_data_lifecycle.autodispose_unregistered_instances = autodispose;
		writer = publisher.create_datawriter(topic, WQosH.value, null,STATUS_MASK_NONE.value);
		checkHandle(writer, "Publisher.create_datawriter");
	}
        
	public void createWriter2(boolean autodispose) {
		publisher.get_default_datawriter_qos(WQosH);
		publisher.copy_from_topic_qos(WQosH, topicQos.value);
		WQosH.value.writer_data_lifecycle.autodispose_unregistered_instances = autodispose;
		writer2 = publisher.create_datawriter(topic2, WQosH.value, null,STATUS_MASK_NONE.value);
		checkHandle(writer2, "Publisher.create_datawriter");
	}


	public void createWriter(int actorIdx, boolean autodispose) {
		sal[actorIdx].publisher.get_default_datawriter_qos(sal[actorIdx].WQosH);
		sal[actorIdx].publisher.copy_from_topic_qos(sal[actorIdx].WQosH, sal[actorIdx].topicQos.value);
		sal[actorIdx].WQosH.value.writer_data_lifecycle.autodispose_unregistered_instances = autodispose;
		sal[actorIdx].writer = sal[actorIdx].publisher.create_datawriter(sal[actorIdx].topic, sal[actorIdx].WQosH.value, null,STATUS_MASK_NONE.value);
		checkHandle(sal[actorIdx].writer, "Publisher.create_datawriter");
		System.out.println("=== [createwriter idx] : topic " + sal[actorIdx].topic + " writer = " + sal[actorIdx].writer);
                sal[actorIdx].isWriter = true;
	}
        
	public void createWriter2(int actorIdx, boolean autodispose) {
		sal[actorIdx].publisher.get_default_datawriter_qos(sal[actorIdx].WQosH);
		sal[actorIdx].publisher.copy_from_topic_qos(sal[actorIdx].WQosH, sal[actorIdx].topicQos2.value);
		sal[actorIdx].WQosH.value.writer_data_lifecycle.autodispose_unregistered_instances = autodispose;
		sal[actorIdx].writer2 = sal[actorIdx].publisher.create_datawriter(sal[actorIdx].topic2, sal[actorIdx].WQosH.value, null,STATUS_MASK_NONE.value);
		checkHandle(sal[actorIdx].writer2, "Publisher.create_datawriter");
		System.out.println("=== [createwriter2 idx] : topic " + sal[actorIdx].topic2 + " writer = " + sal[actorIdx].writer2);
                sal[actorIdx].isWriter = true;
	}



	public void createSubscriber() {
		int status = participant.get_default_subscriber_qos(subQos);
		checkStatus(status,
				"DomainParticipant.get_default_subscriber_qos");

		subQos.value.partition.name = new String[1];
		subQos.value.partition.name[0] = partitionName;
		subscriber = participant.create_subscriber(subQos.value, null,
				STATUS_MASK_NONE.value);
		checkHandle(subscriber,
				"DomainParticipant.create_subscriber");
	}


	public void createSubscriber(int actorIdx) {
		int status = participant.get_default_subscriber_qos(sal[actorIdx].subQos);
		checkStatus(status,
				"DomainParticipant.get_default_subscriber_qos");

		sal[actorIdx].subQos.value.partition.name = new String[1];
		sal[actorIdx].subQos.value.partition.name[0] = partitionName;
		sal[actorIdx].subscriber = participant.create_subscriber(sal[actorIdx].subQos.value, null,
				STATUS_MASK_NONE.value);
		checkHandle(sal[actorIdx].subscriber,
				"DomainParticipant.create_subscriber");
	}



	public void deleteSubscriber() {
                if (subscriber != null) {
  		   participant.delete_subscriber(subscriber);
                }
                for (int i=0;  i<SAL__ACTORS_MAXCOUNT; i++) {
                   if (sal[i] != null) {
                      if (sal[i].subscriber != null) {
		         participant.delete_subscriber(sal[i].subscriber);
                      }
                   }
                }
	}



	public void createReader(boolean filtered) {
	  if (filtered) {
	  	 reader = subscriber.create_datareader(filteredtopic,
		   	 DATAREADER_QOS_USE_TOPIC_QOS.value, null, STATUS_MASK_NONE.value);
	  } else {
		reader = subscriber.create_datareader(topic,
			DATAREADER_QOS_USE_TOPIC_QOS.value, null, STATUS_MASK_NONE.value);
	  }
	  checkHandle(reader, "Subscriber.create_datareader");
	}

	public void createReader2(boolean filtered) {
	  if (filtered) {
	  	 reader2 = subscriber.create_datareader(filteredtopic2,
		   	 DATAREADER_QOS_USE_TOPIC_QOS.value, null, STATUS_MASK_NONE.value);
	  } else {
		reader2 = subscriber.create_datareader(topic2,
			DATAREADER_QOS_USE_TOPIC_QOS.value, null, STATUS_MASK_NONE.value);
	  }
	  checkHandle(reader2, "Subscriber.create_datareader");
	}


	public void createReader(int actorIdx, boolean filtered) {
	  if (filtered) {
	  	 sal[actorIdx].reader = sal[actorIdx].subscriber.create_datareader(sal[actorIdx].filteredtopic,
		   	 DATAREADER_QOS_USE_TOPIC_QOS.value, null, STATUS_MASK_NONE.value);
		System.out.println("=== [createreader idx] : topic " + sal[actorIdx].filteredtopic + " reader = " + sal[actorIdx].reader);
	  } else {
		sal[actorIdx].reader = sal[actorIdx].subscriber.create_datareader(sal[actorIdx].topic,
			DATAREADER_QOS_USE_TOPIC_QOS.value, null, STATUS_MASK_NONE.value);
		System.out.println("=== [createreader idx] : topic " + sal[actorIdx].topic + " reader = " + sal[actorIdx].reader);
	  }
	  checkHandle(sal[actorIdx].reader, "Subscriber.create_datareader");
	  DDS.Duration_t a_timeout = new Duration_t();
	  a_timeout.sec = 5;
	  a_timeout.nanosec = 10000000;
          sal[actorIdx].sampleAge = 100.0;
	  sal[actorIdx].reader.wait_for_historical_data(a_timeout);
          sal[actorIdx].isReader = true;
	}

	public void createReader2(int actorIdx,boolean filtered) {
	  if (filtered) {
	   	sal[actorIdx].reader2 = sal[actorIdx].subscriber.create_datareader(sal[actorIdx].filteredtopic2,
		   	 DATAREADER_QOS_USE_TOPIC_QOS.value, null, STATUS_MASK_NONE.value);
		System.out.println("=== [createreader2 idx] : topic " + sal[actorIdx].filteredtopic2 + " reader = " + sal[actorIdx].reader2);
	  } else {
		sal[actorIdx].reader2 = sal[actorIdx].subscriber.create_datareader(sal[actorIdx].topic2,
			DATAREADER_QOS_USE_TOPIC_QOS.value, null, STATUS_MASK_NONE.value);
		System.out.println("=== [createreader2 idx] : topic " + sal[actorIdx].topic2 + " reader = " + sal[actorIdx].reader2);
	  }
	  checkHandle(sal[actorIdx].reader2, "Subscriber.create_datareader");
	  DDS.Duration_t a_timeout = new Duration_t();
	  a_timeout.sec = 5;
	  a_timeout.nanosec = 10000000;
          sal[actorIdx].sampleAge = 100.0;
	  sal[actorIdx].reader2.wait_for_historical_data(a_timeout);
          sal[actorIdx].isReader = true;
	}

	public DataReader getReader() {
		return reader;
	}

	public DataReader getReader2() {
		return reader2;
	}

	public DataWriter getWriter() {
		return writer;
	}

	public DataWriter getWriter2() {
		return writer2;
	}

	public Publisher getPublisher() {
		return publisher;
	}

	public Subscriber getSubscriber() {
		return subscriber;
	}

	public Topic getTopic() {
		return topic;
	}

	public Topic getTopic2() {
		return topic2;
	}



	public DataReader getReader(int actorIdx) {
		return sal[actorIdx].reader;
	}

	public DataReader getReader2(int actorIdx) {
		return sal[actorIdx].reader2;
	}

	public DataWriter getWriter(int actorIdx) {
		return sal[actorIdx].writer;
	}

	public DataWriter getWriter2(int actorIdx) {
		return sal[actorIdx].writer2;
	}

	public Publisher getPublisher(int actorIdx) {
		return sal[actorIdx].publisher;
	}

	public Subscriber getSubscriber(int actorIdx) {
		return sal[actorIdx].subscriber;
	}

	public Topic getTopic(int actorIdx) {
		return sal[actorIdx].topic;
	}

	public Topic getTopic2(int actorIdx) {
		return sal[actorIdx].topic2;
	}

	public DomainParticipant getParticipant() {
		return participant;
	}

	public static final int NR_ERROR_CODES = 13;

	/* Array to hold the names for all ReturnCodes. */
	public static String[] RetCodeName = new String[NR_ERROR_CODES];

	static {
		RetCodeName[0] = new String("DDS_RETCODE_OK");
		RetCodeName[1] = new String("DDS_RETCODE_ERROR");
		RetCodeName[2] = new String("DDS_RETCODE_UNSUPPORTED");
		RetCodeName[3] = new String("DDS_RETCODE_BAD_PARAMETER");
		RetCodeName[4] = new String("DDS_RETCODE_PRECONDITION_NOT_MET");
		RetCodeName[5] = new String("DDS_RETCODE_OUT_OF_RESOURCES");
		RetCodeName[6] = new String("DDS_RETCODE_NOT_ENABLED");
		RetCodeName[7] = new String("DDS_RETCODE_IMMUTABLE_POLICY");
		RetCodeName[8] = new String("DDS_RETCODE_INCONSISTENT_POLICY");
		RetCodeName[9] = new String("DDS_RETCODE_ALREADY_DELETED");
		RetCodeName[10] = new String("DDS_RETCODE_TIMEOUT");
		RetCodeName[11] = new String("DDS_RETCODE_NO_DATA");
		RetCodeName[12] = new String("DDS_RETCODE_ILLEGAL_OPERATION");
	}

	/*
	 * Returns the name of an error code.
	 */
	public static String getErrorName(int status) {
		return RetCodeName[status];
	}

	/*
	 * Check the return status for errors. If there is an error, then terminate.
	 */
	public static void checkStatus(int status, String info) {
		if (status != RETCODE_OK.value && status != RETCODE_NO_DATA.value) {
			System.out
					.println("Error in " + info + ": " + getErrorName
(status));
			System.exit(-1);
		}
	}

	/*
	 * Check whether a valid handle has been returned. If not, then terminate.
	 */
	public static void checkHandle(Object handle, String info) {
		if (handle == null) {
			System.out.println("Error in " + info
					+ ": Creation failed: invalid handle");
			System.exit(-1);
		}
	}

}

