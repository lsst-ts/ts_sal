


package org.lsst.sal;

import org.opensplice.dds.dcps.TypeSupportImpl;
import DDS.*;
import DDS.STATUS_MASK_NONE; 
import DDS.DOMAIN_ID_DEFAULT;
import DDS.DATAREADER_QOS_USE_TOPIC_QOS;
import DDS.DataReader;
import DDS.DataWriter;
import DDS.DataWriterQosHolder;
import DDS.DomainParticipant;
import DDS.DomainParticipantFactory;
import DDS.DurabilityQosPolicyKind;
import DDS.PARTICIPANT_QOS_DEFAULT;
import DDS.Publisher;
import DDS.PublisherQosHolder;
import DDS.ReliabilityQosPolicyKind;
import DDS.Subscriber;
import DDS.SubscriberQosHolder;
import DDS.Topic;
import DDS.TopicQosHolder;
import DDS.DurabilityQosPolicyKind;
import DDS.HANDLE_NIL;
import DDS.DataReader;
import DDS.LENGTH_UNLIMITED;
import DDS.SampleInfoSeqHolder;
import DDS.QosProvider;
import org.lsst.sal.salActor;
import org.lsst.sal.salUtils;
import java.util.Random;
import java.util.StringTokenizer;

// INSERT SAL IMPORTS

public class SAL_SALData {

	private DomainParticipantFactory dpf;
	private DomainParticipant participant;
	private Topic topic;
        private Topic topic2;
        private ContentFilteredTopic filteredtopic;
        private ContentFilteredTopic filteredtopic2;
	private TopicQosHolder topicQos = new TopicQosHolder();
	private TopicQosHolder topicQos2 = new TopicQosHolder();
	private PublisherQosHolder pubQos = new PublisherQosHolder();
	private SubscriberQosHolder subQos = new SubscriberQosHolder();

	private DataWriterQosHolder WQosH = new DataWriterQosHolder();

	private Publisher publisher;
	private DataWriter writer;
	private DataWriter writer2;

	private Subscriber subscriber;
	private DataReader reader;
	private DataReader reader2;
        private QosProvider commandQos;
        private QosProvider eventQos;
        private QosProvider telemetryQos;
        private QosProvider ackcmdQos;
	private String typeName;
	private String typeName2;
	private String partitionName;
        private Boolean hasReader;
        private Boolean hasWriter;
        private Boolean hasEventReader;
        private Boolean hasEventWriter;
        private Boolean hasProcessor;
        private Boolean hasCommand;
        private int debugLevel;
        private int sndSeqNum;
        private int rcvSeqNum;
        private int rcvOrigin;
        private int historySync;
        private String rcvIdentity;
        private int subsystemID;
        private int origin;
        private String domainName;
        private String partitionPrefix;
        private int lastActor_telemetry;
        private int lastActor_command;
        private int lastActor_event;
        private String CSC_identity;
        private String authorizedUsers;
        private String nonAuthorizedCSCs;
 
        salUtils salUtil = new salUtils();
        salActor[] sal = new salActor[SAL__ACTORS_MAXCOUNT];

// INSERT TYPE SUPPORT      


        public int getActorIndex (String topicName) {
          for (int i=0; i<SAL__ACTORS_MAXCOUNT;i++) {
             if ( topicName.length() == sal[i].topicName.length() )  {
                if ( topicName.equals(sal[i].topicName) )  {
                   return i;
                }
             }
          }
          return SAL__ERROR;
        }


/** Sets up the DDS Publisher support for the named DDS type
  @param topicName is the name of the DDS topic
  @throws "Unknown Topic" if the topic is not defined
 */    
	public int salTelemetryPub(String topicName)
	{
	  int actorIdx = -1;
	  int status = 0;

	  actorIdx = getActorIndex(topicName);
	  if (actorIdx > -1) {
	     salTelemetryPub(actorIdx);
	  } else {
	     status = SAL__ERROR;
	  }
	  return status;
	}

/** Sets up the DDS Subscriber support for the named DDS type
  @param topicName is the name of the DDS topic
  @throws "Unknown Topic" if the topic is not defined
 */    
	public int salTelemetrySub(String topicName)
	{
	  int actorIdx = -1;
	  int status = 0;

	  actorIdx = getActorIndex(topicName);
	  if (actorIdx > -1) {
	     salTelemetrySub(actorIdx);
	  } else {
	     status = SAL__ERROR;
	  }
	  return status;
	}


/** Sets up the DDS Publisher support for the indexed SAL Actor
  @param actorIdx is the index of the DDS topic's salActor
  @throws "Unknown Topic" if the topic is not defined
 */    
        public int salTelemetryPub(int actorIdx)
	{
		String partitionName = domainName;

		// create Domain Participant
		createParticipant(partitionName);

		// create Type
		salTypeSupport(actorIdx);

		// create Topic
		createTopic(actorIdx);

		// create Publisher
		createPublisher(actorIdx);

		// create DataWriter
		createWriter(actorIdx,true);
		sal[actorIdx].isWriter = true;
                return SAL__OK;
        }




/** Sets up the DDS Subscriber support for the indexed SAL Actor
  @param actorIdx is the index of the DDS topic's salActor
  @throws "Unknown Topic" if the topic is not defined
 */    
        public int salTelemetrySub(int actorIdx)
	{
		String partitionName = domainName;
		// create Domain Participant
		createParticipant(partitionName);

		// create Type
		salTypeSupport(actorIdx);
		// create Type

		// create Topic
		createTopic(actorIdx);

		// create Subscriber
		createSubscriber(actorIdx);

		// create DataReader
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
  		// Filter expr
                String expr[] = new String[0];
                String sFilter = "SALDataID = " + subsystemID;
                String ftopicName = "filtered_" + sal[actorIdx].topicHandle;
   		createContentFilteredTopic(actorIdx,ftopicName, sFilter, expr);

		// create DataReader
 		createReader(actorIdx,true);
#else
		createReader(actorIdx,false);
#endif
                sal[actorIdx].isReader = true;
                return SAL__OK;
	}



/// Placeholder routine to be replaced by system wide logging once available
	public void logError(int status) 
	{
		System.out.println("=== ERROR return value = " + status); 
	}

/** Constructor for the SAL_SALData object.
  *
  @param aKey is used to specify the index of an indexed component, or 0 for non-indexed ones
  @param identity is used to specify the private_identity of a commander

 */
        
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
        public SAL_SALData(int aKey, String identity)
	{
                if (identity == null) {
                   CSC_identity = String.format("SALData:%d" , aKey);
                } else {
                   CSC_identity = String.format("%s" , identity);
                }
		initSalEnvironment(aKey);
	}

        public SAL_SALData(int aKey)
	{
                CSC_identity = String.format("SALData:%d" , aKey);
		initSalEnvironment(aKey);
	}
#endif
        public SAL_SALData(String identity)
	{
                if (identity == null) {
                  CSC_identity = "SALData";
                } else {
                  CSC_identity = String.format("%s" , identity);
                }
		initSalEnvironment(0);
	}
	public SAL_SALData()
	{
                CSC_identity = "SALData";
		initSalEnvironment(0);
	}


/** Environment setup for a SAL_SALData object.
  *
  * + LSST_DDS_PARTITION_PREFIX is the name of the partition being used
  * + LSST_DDS_IP is the IP address of the DDS ethernet interface
  * + LSST_DDS_QOS is the optional path to the DDS QoS XML description
  * + LSST_DDS_HISTORYSYNC is the maximum number of seconds to wait to obtain historical messages on a topic
  *
  @param aKey is used to specify the index of an indexed component, or 0 for non-indexed ones
 */
        public void initSalEnvironment(int aKey)
	{
		Random randGen = new java.util.Random();
                String pname = System.getenv("LSST_DDS_PARTITION_PREFIX");
                String hname = System.getenv("LSST_DDS_HISTORYSYNC");
                String qname = System.getenv("LSST_DDS_QOS");
                if (pname != null) {
                   partitionPrefix = pname;
                } else {
                   System.out.println("=== WARNING : LSST_DDS_PARTITION_PREFIX not defined\n");
                }
                if (hname == null) {
                   historySync = 0;
                } else {
                   historySync = Integer.parseInt(hname);
                }
                if (qname != null) {
                  commandQos = new QosProvider(qname,"CommandProfile");
                  eventQos = new QosProvider(qname,"EventProfile");
                  telemetryQos = new QosProvider(qname,"TelemetryProfile");
                  ackcmdQos = new QosProvider(qname,"AckcmdProfile");
                }
                origin = (int)randGen.nextInt(99999999);
		hasReader = false;
		hasWriter = false;
		hasCommand = false;
		hasEventReader = false;
		hasEventWriter = false;
		hasProcessor = false;
		subsystemID = 0;
		debugLevel = 1;
                System.loadLibrary("salUtils");
                initSalActors();
	}


/** Get the time from the system. The TAI time will be used, which assumes that the kernel 
  * leap seconds offset has been correctly set. The getLeapSeconds method can be used to 
  * do a simple sanity check
  @return The current TAI system time
 */
	public double getCurrentTime()
	{
  		double ts = salUtil.getTAISeconds();
		return ts;
	}



// INSERT CMDALIAS SUPPORT  for issueCommand and acceptCommand  



	public int cancelCommand( int cmdSeqNum )
	{
	   int status = 0;
	   return status;
	}


	public int abortCommand( int cmdSeqNum )
	{
	   int status = 0;
	   return status;
	}

        public static final int SAL__SLOWPOLL= 		   1;
        public static final int SAL__OK = 		   0;
        public static final int SAL__ERR = 		  -1;
        public static final int SAL__ERROR = 		  -1;
        public static final int SAL__NO_UPDATES = 	-100;
        public static final int SAL__LOG_ROUTINES = 	   1;
        public static final int SAL__CMD_ACK =      	 300;
        public static final int SAL__CMD_INPROGRESS = 	 301;
        public static final int SAL__CMD_STALLED =    	 302;
        public static final int SAL__CMD_COMPLETE =   	 303;
        public static final int SAL__CMD_NOPERM =   	-300;
        public static final int SAL__CMD_NOACK =    	-301;
        public static final int SAL__CMD_FAILED =   	-302;
        public static final int SAL__CMD_ABORTED =  	-303;
        public static final int SAL__CMD_TIMEOUT =  	-304;
        public static final int SAL__DATA_AVAIL	=	400;
        public static final int SAL__DEADLINE_MISS =	401;
        public static final int SAL__INCOMPAT_QOS =	402;
        public static final int SAL__SAMPLE_REJ	=	403;
        public static final int SAL__LIVELINESS_CHG =	404;
        public static final int SAL__SAMPLELOST	=	405;
        public static final int SAL__SUBSCR_MATCH =	406;
        public static final int SAL__STATE_DISABLED = 	1;
        public static final int SAL__STATE_ENABLED = 	2;
        public static final int SAL__STATE_FAULT = 	3;
        public static final int SAL__STATE_OFFLINE = 	4;
        public static final int SAL__STATE_STANDBY = 	5;
        public static final int SAL__STATE_COUNT = 	5;





// INSERT EVENTALIAS SUPPORT



/// Set the debug message output verbosity level for this SAL_SALData object
	public int setDebugLevel( int level )
	{
           int status = 0;
	   debugLevel = level;
	   return status;	
	}

/// Get the current value of the debug message verbosity level for this SAL_SALData object
	public int getDebugLevel( int level )
	{
	   return debugLevel;
	}

/// Get the current IP address
	public int getOrigin()
	{
	   int status = 0;
	   return status;
	}

/// Generic method to read the value of a SAL_SALData object internal state
	public int getProperty(String property, String value)
	{
	   int status = SAL__OK;
	   value = "UNKNOWN";
	   if (status != SAL__OK) {
	      if (debugLevel >= SAL__LOG_ROUTINES) {
	          logError(status);
	      }
	   }
	   return status;
	}

/// Generic method to set the value of a SAL_SALData object internal state
	public int setProperty(String property, String value)
	{
           int status = SAL__OK;
	   if (status != SAL__OK) {
	      if (debugLevel >= SAL__LOG_ROUTINES) {
	          logError(status);
	      }
	   }
	   return status;
	}
 

/// Close down the DDS support for this SAL_SALData object
	public void salShutdown()
	{
          if (participant != null) {
            participant.delete_contained_entities();
  	    deleteParticipant();
          }
	}


/** Sets up the DDS Subscriber support for the named DDS event topic
  @param topicName is the name of the DDS topic
  @throws "Unknown Topic" if the topic is not defined
 */    
	public int salEventSub(String topicName)
	{
		int status = SAL__ERROR;
                int actorIdx = getActorIndex(topicName);
                if ( actorIdx < 0) {return SAL__ERROR;}
		status = salTelemetrySub(actorIdx);
                sal[actorIdx].isEventReader = true;
		return status;
	}

/** Sets up the DDS Publisher support for the named DDS event topic
  @param topicName is the name of the DDS topic
  @throws "Unknown Topic" if the topic is not defined
 */    
	public int salEventPub(String topicName)
	{
		int status = SAL__ERROR;
                int actorIdx = getActorIndex(topicName);
                if ( actorIdx < 0) {return SAL__ERROR;}
		status = salTelemetryPub(actorIdx);
                sal[actorIdx].isEventWriter = true;
		return status;
	}

/** Sets up the DDS Participant and specify a DDS partition for it
  @param partition is the partition specifier of the DDS topic
 */    
	public void createParticipant(String partitionName) {
           if (participant == null) {
		dpf = DomainParticipantFactory.get_instance();
		checkHandle(dpf, "DomainParticipantFactory.get_instance");

		participant = dpf.create_participant(DOMAIN_ID_DEFAULT.value,
				PARTICIPANT_QOS_DEFAULT.value, null, STATUS_MASK_NONE.value);
		checkHandle(dpf,
				"DomainParticipantFactory.create_participant");
		this.partitionName = partitionName;
           }
	}

/** Deletes the DDS Participant
 */    
	public void deleteParticipant() {
		dpf.delete_participant(participant);
	}

	public void registerType(TypeSupportImpl ts) {
		typeName = ts.get_type_name();
		int status = ts.register_type(participant, typeName);
		checkStatus(status, "register_type");
	}

	public void registerType2(TypeSupportImpl ts) {
		typeName2 = ts.get_type_name();
		int status = ts.register_type(participant, typeName2);
		checkStatus(status, "register_type");
	}

	public void registerType(int actorIdx, TypeSupportImpl ts) {
		sal[actorIdx].typeName = ts.get_type_name();
		int status = ts.register_type(participant, sal[actorIdx].typeName);
		checkStatus(status, "register_type");
	}

	public void registerType2(int actorIdx,TypeSupportImpl ts) {
		sal[actorIdx].typeName2 = ts.get_type_name();
		int status = ts.register_type(participant, sal[actorIdx].typeName2);
		checkStatus(status, "register_type");
	}


	public void createTopic(int actorIdx) {
		int status = -1;
                if (debugLevel > 1) {
  		  System.out.println("=== [createTopic] : topicName " + sal[actorIdx].topicName + " type = " + sal[actorIdx].typeName);
                }
		sal[actorIdx].topic = participant.create_topic(sal[actorIdx].topicHandle, sal[actorIdx].typeName, sal[actorIdx].topicQos.value,
				null, STATUS_MASK_NONE.value);
		checkHandle(sal[actorIdx].topic, "DomainParticipant.create_topic");
	}

	public void createTopic2(int actorIdx) {
		int status = -1;
                if (debugLevel > 1) {
		  System.out.println("=== [createTopic2] : topicName " + sal[actorIdx].topicName + " type = " + sal[actorIdx].typeName2);
                }
		sal[actorIdx].topic2 = participant.create_topic(sal[actorIdx].topicHandle, sal[actorIdx].typeName2, sal[actorIdx].topicQos2.value,
				null, STATUS_MASK_NONE.value);
		checkHandle(sal[actorIdx].topic2, "DomainParticipant.create_topic");
	}

	public void createTopic(int actorIdx, String topicName) {
		int status = -1;
                if (debugLevel > 1) {
		  System.out.println("=== [createTopic] : topicName " + topicName + " type = " + sal[actorIdx].typeName);
                }
		sal[actorIdx].topic = participant.create_topic(sal[actorIdx].topicHandle, sal[actorIdx].typeName, sal[actorIdx].topicQos.value,
				null, STATUS_MASK_NONE.value);
		checkHandle(sal[actorIdx].topic, "DomainParticipant.create_topic");
	}

	public void createTopic2(int actorIdx, String topicName) {
		int status = -1;
                if (debugLevel > 1) {
		  System.out.println("=== [createTopic2] : topicName " + topicName + " type = " + sal[actorIdx].typeName2);
                }

		sal[actorIdx].topic2 = participant.create_topic(sal[actorIdx].topicHandle, sal[actorIdx].typeName2, sal[actorIdx].topicQos2.value,
				null, STATUS_MASK_NONE.value);
		checkHandle(sal[actorIdx].topic2, "DomainParticipant.create_topic");
	}



        public void  createContentFilteredTopic( String topicName, String filter, String[] expr)
	{
	  filteredtopic = participant.create_contentfilteredtopic(topicName,topic, filter, expr);
	  checkHandle(filteredtopic, "DomainParticipant::create_contentfilteredtopic");
	}

        public void  createContentFilteredTopic2( String topicName, String filter, String[] expr)
	{
	  filteredtopic2 = participant.create_contentfilteredtopic(topicName,topic2, filter, expr);
	  checkHandle(filteredtopic2, "DomainParticipant::create_contentfilteredtopic");
	}



        public void  createContentFilteredTopic(int actorIdx, String topicName, String filter, String[] expr)
	{
	  sal[actorIdx].filteredtopic = participant.create_contentfilteredtopic(topicName,sal[actorIdx].topic, filter, expr);
	  checkHandle(sal[actorIdx].filteredtopic, "DomainParticipant::create_contentfilteredtopic");
	}

        public void  createContentFilteredTopic2(int actorIdx,  String topicName, String filter, String[] expr)
	{
	  sal[actorIdx].filteredtopic2 = participant.create_contentfilteredtopic(topicName,sal[actorIdx].topic2, filter, expr);
	  checkHandle(sal[actorIdx].filteredtopic2, "DomainParticipant::create_contentfilteredtopic");
	}



	public void deleteTopics() {
            if (filteredtopic != null) {
		int status = participant.delete_contentfilteredtopic(filteredtopic);
		checkStatus(status, "DDS.DomainParticipant.delete_contentfilteredtopic");
            }
            if (filteredtopic2 != null) {
		int status = participant.delete_contentfilteredtopic(filteredtopic2);
		checkStatus(status, "DDS.DomainParticipant.delete_contentfilteredtopic");
            }
            if (topic != null) {
		int status = participant.delete_topic(topic);
		checkStatus(status, "DDS.DomainParticipant.delete_topic");
            }
            if (topic2 != null) {
		int status = participant.delete_topic(topic2);
		checkStatus(status, "DDS.DomainParticipant.delete_topic");
            }
            for (int i=0;  i<SAL__ACTORS_MAXCOUNT; i++) {
             if (sal[i] != null) {
              if (sal[i].filteredtopic != null) {
  		  int status = participant.delete_contentfilteredtopic(sal[i].filteredtopic);
  		  checkStatus(status, "DDS.DomainParticipant.delete_contentfilteredtopic");
              }
              if (sal[i].filteredtopic2 != null) {
		  int status = participant.delete_contentfilteredtopic(sal[i].filteredtopic2);
		  checkStatus(status, "DDS.DomainParticipant.delete_contentfilteredtopic");
              }
              if (sal[i].topic != null) {
		  int status = participant.delete_topic(sal[i].topic);
		  checkStatus(status, "DDS.DomainParticipant.delete_topic");
              }
              if (sal[i].topic2 != null) {
		  int status = participant.delete_topic(sal[i].topic2);
		  checkStatus(status, "DDS.DomainParticipant.delete_topic");
              }
             }
            }
	}


	public void createPublisher(int actorIdx) {
	    sal[actorIdx].pubQos.value.partition.name = new String[1];
	    sal[actorIdx].pubQos.value.partition.name[0] = sal[actorIdx].partition;
	    sal[actorIdx].publisher = participant.create_publisher(sal[actorIdx].pubQos.value, null,
				STATUS_MASK_NONE.value);
	    checkHandle(sal[actorIdx].publisher,
				"DomainParticipant.create_publisher");
	}


	public void deletePublisher() {
            if (publisher != null) {
		participant.delete_publisher(publisher);
            }
            for (int i=0;  i<SAL__ACTORS_MAXCOUNT; i++) {
                   if (sal[i] != null) {
                      if (sal[i].publisher != null) {
		         participant.delete_publisher(sal[i].publisher);
                      }
                   }
            }
	}

	public void deleteReaders() {
            if (reader != null) {
		subscriber.delete_datareader(reader);
            }
            if (reader2 != null) {
		subscriber.delete_datareader(reader2);
            }
            for (int i=0;  i<SAL__ACTORS_MAXCOUNT; i++) {
               if (sal[i] != null) {
                 if (sal[i].reader != null) {
	   	   sal[i].subscriber.delete_datareader(sal[i].reader);
                 }
                 if (sal[i].reader2 != null) {
		   sal[i].subscriber.delete_datareader(sal[i].reader2);
                 }
               }
            }
	}

	public void deleteWriters() {
            if (writer != null) {
		publisher.delete_datawriter(writer);
            }
            if (writer2 != null) {
		publisher.delete_datawriter(writer2);
            }
            for (int i=0;  i<SAL__ACTORS_MAXCOUNT; i++) {
               if (sal[i] != null) {
                 if (sal[i].writer != null) {
		   sal[i].publisher.delete_datawriter(sal[i].writer);
                 }
                 if (sal[i].writer2 != null) {
		   sal[i].publisher.delete_datawriter(sal[i].writer2);
                 }
               }
            }
	}



	public void createWriter(boolean autodispose) {
	    publisher.get_default_datawriter_qos(WQosH);
	    publisher.copy_from_topic_qos(WQosH, topicQos.value);
	    WQosH.value.writer_data_lifecycle.autodispose_unregistered_instances = autodispose;
	    writer = publisher.create_datawriter(topic, WQosH.value, null,STATUS_MASK_NONE.value);
	    checkHandle(writer, "Publisher.create_datawriter");
	}
        
	public void createWriter2(boolean autodispose) {
	    publisher.get_default_datawriter_qos(WQosH);
	    publisher.copy_from_topic_qos(WQosH, topicQos.value);
	    WQosH.value.writer_data_lifecycle.autodispose_unregistered_instances = autodispose;
	    writer2 = publisher.create_datawriter(topic2, WQosH.value, null,STATUS_MASK_NONE.value);
	    checkHandle(writer2, "Publisher.create_datawriter");
	}


	public void createWriter(int actorIdx, boolean autodispose) {
 	    sal[actorIdx].WQosH.value.writer_data_lifecycle.autodispose_unregistered_instances = autodispose;
	    sal[actorIdx].writer = sal[actorIdx].publisher.create_datawriter(sal[actorIdx].topic, sal[actorIdx].WQosH.value, null,STATUS_MASK_NONE.value);
	    checkHandle(sal[actorIdx].writer, "Publisher.create_datawriter");
            if (debugLevel > 1) {
		  System.out.println("=== [createwriter idx] : topic " + sal[actorIdx].topic + " writer = " + sal[actorIdx].writer);
            }
            sal[actorIdx].isWriter = true;
	}
        
	public void createWriter2(int actorIdx, boolean autodispose) {
	    sal[actorIdx].WQosH.value.writer_data_lifecycle.autodispose_unregistered_instances = autodispose;
	    sal[actorIdx].writer2 = sal[actorIdx].publisher.create_datawriter(sal[actorIdx].topic2, sal[actorIdx].WQosH.value, null,STATUS_MASK_NONE.value);
	    checkHandle(sal[actorIdx].writer2, "Publisher.create_datawriter");
            if (debugLevel > 1) {
		  System.out.println("=== [createwriter2 idx] : topic " + sal[actorIdx].topic2 + " writer = " + sal[actorIdx].writer2);
            }
            sal[actorIdx].isWriter = true;
	}


	public void createSubscriber(int actorIdx) {
	    sal[actorIdx].subQos.value.partition.name = new String[1];
	    sal[actorIdx].subQos.value.partition.name[0] = sal[actorIdx].partition;
	    sal[actorIdx].subscriber = participant.create_subscriber(sal[actorIdx].subQos.value, null,
				STATUS_MASK_NONE.value);
	    checkHandle(sal[actorIdx].subscriber,
				"DomainParticipant.create_subscriber");
	}



	public void deleteSubscriber() {
                if (subscriber != null) {
  		   participant.delete_subscriber(subscriber);
                }
                for (int i=0;  i<SAL__ACTORS_MAXCOUNT; i++) {
                   if (sal[i] != null) {
                      if (sal[i].subscriber != null) {
		         participant.delete_subscriber(sal[i].subscriber);
                      }
                   }
                }
	}



	public void createReader(boolean filtered) {
	  if (filtered) {
	  	 reader = subscriber.create_datareader(filteredtopic,
		   	 DATAREADER_QOS_USE_TOPIC_QOS.value, null, STATUS_MASK_NONE.value);
	  } else {
		reader = subscriber.create_datareader(topic,
			DATAREADER_QOS_USE_TOPIC_QOS.value, null, STATUS_MASK_NONE.value);
	  }
	  checkHandle(reader, "Subscriber.create_datareader");
	}

	public void createReader2(boolean filtered) {
	  if (filtered) {
	  	 reader2 = subscriber.create_datareader(filteredtopic2,
		   	 DATAREADER_QOS_USE_TOPIC_QOS.value, null, STATUS_MASK_NONE.value);
	  } else {
		reader2 = subscriber.create_datareader(topic2,
			DATAREADER_QOS_USE_TOPIC_QOS.value, null, STATUS_MASK_NONE.value);
	  }
	  checkHandle(reader2, "Subscriber.create_datareader");
	}


	public void createReader(int actorIdx, boolean filtered) {
	  if (filtered) {
	  	 sal[actorIdx].reader = sal[actorIdx].subscriber.create_datareader(sal[actorIdx].filteredtopic,
		   	sal[actorIdx].RQosH.value, null, STATUS_MASK_NONE.value);
                if (debugLevel > 1) {
		  System.out.println("=== [createreader idx] : topic " + sal[actorIdx].filteredtopic + " reader = " + sal[actorIdx].reader);
                }
	  } else {
		sal[actorIdx].reader = sal[actorIdx].subscriber.create_datareader(sal[actorIdx].topic,
			sal[actorIdx].RQosH.value, null, STATUS_MASK_NONE.value);
                if (debugLevel > 1) {
		  System.out.println("=== [createreader idx] : topic " + sal[actorIdx].topic + " reader = " + sal[actorIdx].reader);
                }
	  }
	  checkHandle(sal[actorIdx].reader, "Subscriber.create_datareader");
          if ( (sal[actorIdx].topicQos.value.durability.kind != DurabilityQosPolicyKind.VOLATILE_DURABILITY_QOS) && (historySync > 0) ) {
	    DDS.Duration_t a_timeout = new Duration_t();
	    a_timeout.sec = historySync;
	    a_timeout.nanosec = 10000000;
	    sal[actorIdx].reader.wait_for_historical_data(a_timeout);
          }
          sal[actorIdx].sampleAge = 100.0;
          sal[actorIdx].isReader = true;
	}

	public void createReader2(int actorIdx,boolean filtered) {
	  if (filtered) {
	   	sal[actorIdx].reader2 = sal[actorIdx].subscriber.create_datareader(sal[actorIdx].filteredtopic2,
		   	 sal[actorIdx].RQosH.value, null, STATUS_MASK_NONE.value);
                if (debugLevel > 1) {
		  System.out.println("=== [createreader2 idx] : topic " + sal[actorIdx].filteredtopic2 + " reader = " + sal[actorIdx].reader2);
                }
	  } else {
		sal[actorIdx].reader2 = sal[actorIdx].subscriber.create_datareader(sal[actorIdx].topic2,
			sal[actorIdx].RQosH.value, null, STATUS_MASK_NONE.value);
                if (debugLevel > 1) {
		  System.out.println("=== [createreader2 idx] : topic " + sal[actorIdx].topic2 + " reader = " + sal[actorIdx].reader2);
                }
	  }
	  checkHandle(sal[actorIdx].reader2, "Subscriber.create_datareader");
          if ( (sal[actorIdx].topicQos2.value.durability.kind != DurabilityQosPolicyKind.VOLATILE_DURABILITY_QOS) && (historySync > 0) ) {
  	    DDS.Duration_t a_timeout = new Duration_t();
	    a_timeout.sec = historySync;
	    a_timeout.nanosec = 10000000;
	    sal[actorIdx].reader2.wait_for_historical_data(a_timeout);
          }
          sal[actorIdx].sampleAge = 100.0;
          sal[actorIdx].isReader = true;
	}

	public DataReader getReader() {
		return reader;
	}

	public DataReader getReader2() {
		return reader2;
	}

	public DataWriter getWriter() {
		return writer;
	}

	public DataWriter getWriter2() {
		return writer2;
	}

	public Publisher getPublisher() {
		return publisher;
	}

	public Subscriber getSubscriber() {
		return subscriber;
	}

	public Topic getTopic() {
		return topic;
	}

	public Topic getTopic2() {
		return topic2;
	}



	public DataReader getReader(int actorIdx) {
		return sal[actorIdx].reader;
	}

	public DataReader getReader2(int actorIdx) {
		return sal[actorIdx].reader2;
	}

	public DataWriter getWriter(int actorIdx) {
		return sal[actorIdx].writer;
	}

	public DataWriter getWriter2(int actorIdx) {
		return sal[actorIdx].writer2;
	}

	public Publisher getPublisher(int actorIdx) {
		return sal[actorIdx].publisher;
	}

	public Subscriber getSubscriber(int actorIdx) {
		return sal[actorIdx].subscriber;
	}

	public Topic getTopic(int actorIdx) {
		return sal[actorIdx].topic;
	}

	public Topic getTopic2(int actorIdx) {
		return sal[actorIdx].topic2;
	}

	public DomainParticipant getParticipant() {
		return participant;
	}

	public static final int NR_ERROR_CODES = 13;

	/* Array to hold the names for all ReturnCodes. */
	public static String[] RetCodeName = new String[NR_ERROR_CODES];

	static {
		RetCodeName[0] = new String("DDS_RETCODE_OK");
		RetCodeName[1] = new String("DDS_RETCODE_ERROR");
		RetCodeName[2] = new String("DDS_RETCODE_UNSUPPORTED");
		RetCodeName[3] = new String("DDS_RETCODE_BAD_PARAMETER");
		RetCodeName[4] = new String("DDS_RETCODE_PRECONDITION_NOT_MET");
		RetCodeName[5] = new String("DDS_RETCODE_OUT_OF_RESOURCES");
		RetCodeName[6] = new String("DDS_RETCODE_NOT_ENABLED");
		RetCodeName[7] = new String("DDS_RETCODE_IMMUTABLE_POLICY");
		RetCodeName[8] = new String("DDS_RETCODE_INCONSISTENT_POLICY");
		RetCodeName[9] = new String("DDS_RETCODE_ALREADY_DELETED");
		RetCodeName[10] = new String("DDS_RETCODE_TIMEOUT");
		RetCodeName[11] = new String("DDS_RETCODE_NO_DATA");
		RetCodeName[12] = new String("DDS_RETCODE_ILLEGAL_OPERATION");
	}

	/*
	 * Returns the name of an error code.
	 */
	public static String getErrorName(int status) {
		return RetCodeName[status];
	}

	/*
	 * Check the return status for errors. If there is an error, then terminate.
	 */
	public static void checkStatus(int status, String info) {
		if (status != RETCODE_OK.value && status != RETCODE_NO_DATA.value) {
			System.out
					.println("Error in " + info + ": " + getErrorName
(status));
			System.exit(-1);
		}
	}

	/*
	 * Check whether a valid handle has been returned. If not, then terminate.
	 */
	public static void checkHandle(Object handle, String info) {
		if (handle == null) {
			System.out.println("Error in " + info
					+ ": Creation failed: invalid handle");
			System.exit(-1);
		}
	}

}

