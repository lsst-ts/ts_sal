%module SALPY_swig_SALData

%include "typemaps.i"
%include "carrays.i"
%include <std_string.i>

%array_class(unsigned short,uShortArray);

%{



  #include <string>
  #include <cassert>
  #include <string>
  #include <iostream>
  #include <fstream>
  #include <string.h>
  #include <stdlib.h>
  #include "SAL_defines.h"
  #include "SAL_SALData.h"

%}

  using namespace std;


  class SAL_SALData
  {
      bool hasReader;
      bool hasWriter;
      bool hasCommand;
      bool hasEventReader;
      bool hasEventWriter;
      bool hasProcessor;
      int subsystemID;
      int debugLevel;
      int cmdSeqNum;
      int sndSeqNum;
      int rcvSeqNum;
      int rcvOrigin;
      double rcvdTime;
      salU64  origin;
      char   domainName[128];
      salActor sal[SAL__ACTORS_MAXCOUNT];
      int lastActor_telemetry;
      int lastActor_command;
      int lastActor_event;

    public:

#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
     SAL_SALData(int aKey);
#else
     SAL_SALData();
#endif

      salReturn salTypeSupport(char *topicName);
      salReturn salTelemetryPub(char *topicName);
      salReturn salTelemetrySub(char *topicName);

      string getErrorName(DDS::ReturnCode_t status);
      void checkStatus(DDS::ReturnCode_t status, const char *info);
      void checkHandle(void *handle, string info);

      double getCurrentTime();
      double getRcvdTime();
      void setTuneableQos(char *topicName);
      void setDefaultQos(char *topicName);
      void salShutdown();
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
      void salInitialize(int aKey);
#else
      void salInitialize();
#endif
      salReturn cancelCommand( int cmdSeqNum );
      salReturn abortCommand( int cmdSeqNum );
      salReturn setDebugLevel( int level );
      int getDebugLevel( int level );
      int getOrigin();
      int getProperty(salCHAR *property, salCHAR *value);
      salReturn getIntProperty(actorIdx,salCHAR *property, int *value);
      salReturn getDblProperty(actorIdx,salCHAR *property, double *value);
      salReturn getBoolProperty(actorIdx,salCHAR *property, boolean *value);
      salReturn setProperty(salCHAR *property, salCHAR *value);
      int getIntProperty(int actorIdx,salCHAR *property);
      double getDblProperty(int actorIdx,salCHAR *property);
      bool getBoolProperty(int actorIdx,salCHAR *property);
      void setMaxSamples(int actorIdx, int n);
      void logError(salReturn status);

      salReturn salTelemetryPub(int actorIdx);
      salReturn salTelemetrySub(int actorIdx);
      salReturn salEventSub(char *topicName);
      salReturn salEventPub(char *topicName);
      int getActorIndex(char *topic);
      salReturn salTypeSupport(int actorIdx);
      salReturn salCommand(char *cmdAlias);
      salReturn salProcessor(char *cmdAlias);
      bool actorActive(int actorIdx);
      bool actorReader(int actorIdx);
      bool actorWriter(int actorIdx);
      bool actorCommand(int actorIdx);
      bool actorEventReader(int actorIdx);
      bool actorEventWriter(int actorIdx);
      bool actorProcessor(int actorIdx);

// INSERT TYPE SUPPORT      


      ~SAL_SALData();
  };

%include "SAL_SALDataC.h"

