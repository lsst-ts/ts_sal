//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: sal_hexapod.h
//  Source: sal_hexapod.idl
//  Generated: Thu Aug 23 17:23:00 2018
//  OpenSplice V6.4.140320OSS
//  
//******************************************************************
#ifndef _SAL_HEXAPOD_H_
#define _SAL_HEXAPOD_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"


namespace hexapod
{
   struct Actuators;
   struct Application;
   struct Electrical;
   struct LimitSensors;
   struct Metrology;
   struct TC;
   struct command_clearError;
   struct command_configureAcceleration;
   struct command_configureAzimuthCoeffsLut;
   struct command_configureAzimuthRawLut;
   struct command_configureElevationCoeffsLut;
   struct command_configureElevationRawLut;
   struct command_configureLimits;
   struct command_configureTemperatureCoeffsLut;
   struct command_configureVelocity;
   struct command_move;
   struct command_offset;
   struct command_pivot;
   struct command_positionSet;
   struct command_rawPositionSet;
   struct command_test;
   struct logevent_TempError;
   struct logevent_TrackLost;
   struct logevent_Tracking;
   struct logevent_deviceError;
   struct logevent_inPosition;
   struct logevent_interlock;
   struct logevent_limit;
   struct command;
   struct ackcmd;
   struct logevent;

   struct Actuators
   {
         typedef DDS::Float _Calibrated_slice;
         typedef DDS::Float _Calibrated[18];
         typedef _Calibrated _Calibrated_out;
         static _Calibrated_slice * _Calibrated_alloc ();
         static void _Calibrated_free (_Calibrated_slice *);
         static void _Calibrated_copy (_Calibrated_slice* to, const _Calibrated_slice* from);
         static _Calibrated_slice *_Calibrated_dup (const _Calibrated_slice* from);

         struct _Calibrated_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_var;
         typedef DDS_DCPS_Array_forany< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_forany;
         typedef DDS::Long _Raw_slice;
         typedef DDS::Long _Raw[18];
         typedef _Raw _Raw_out;
         static _Raw_slice * _Raw_alloc ();
         static void _Raw_free (_Raw_slice *);
         static void _Raw_copy (_Raw_slice* to, const _Raw_slice* from);
         static _Raw_slice *_Raw_dup (const _Raw_slice* from);

         struct _Raw_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_var;
         typedef DDS_DCPS_Array_forany< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _Calibrated Calibrated;
         _Raw Raw;
   };

   typedef DDS_DCPSStruct_var < Actuators> Actuators_var;
   typedef DDS_DCPSStruct_out < Actuators> Actuators_out;

   struct Application
   {
         typedef DDS::Float _Demand_slice;
         typedef DDS::Float _Demand[6];
         typedef _Demand _Demand_out;
         static _Demand_slice * _Demand_alloc ();
         static void _Demand_free (_Demand_slice *);
         static void _Demand_copy (_Demand_slice* to, const _Demand_slice* from);
         static _Demand_slice *_Demand_dup (const _Demand_slice* from);

         struct _Demand_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Demand, _Demand_slice, struct _Demand_uniq_> _Demand_var;
         typedef DDS_DCPS_Array_forany< _Demand, _Demand_slice, struct _Demand_uniq_> _Demand_forany;
         typedef DDS::Float _Error_slice;
         typedef DDS::Float _Error[6];
         typedef _Error _Error_out;
         static _Error_slice * _Error_alloc ();
         static void _Error_free (_Error_slice *);
         static void _Error_copy (_Error_slice* to, const _Error_slice* from);
         static _Error_slice *_Error_dup (const _Error_slice* from);

         struct _Error_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Error, _Error_slice, struct _Error_uniq_> _Error_var;
         typedef DDS_DCPS_Array_forany< _Error, _Error_slice, struct _Error_uniq_> _Error_forany;
         typedef DDS::Float _Position_slice;
         typedef DDS::Float _Position[6];
         typedef _Position _Position_out;
         static _Position_slice * _Position_alloc ();
         static void _Position_free (_Position_slice *);
         static void _Position_copy (_Position_slice* to, const _Position_slice* from);
         static _Position_slice *_Position_dup (const _Position_slice* from);

         struct _Position_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Position, _Position_slice, struct _Position_uniq_> _Position_var;
         typedef DDS_DCPS_Array_forany< _Position, _Position_slice, struct _Position_uniq_> _Position_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _Demand Demand;
         _Error Error;
         _Position Position;
   };

   typedef DDS_DCPSStruct_var < Application> Application_var;
   typedef DDS_DCPSStruct_out < Application> Application_out;

   struct Electrical
   {
         typedef DDS::Long _error_slice;
         typedef DDS::Long _error[16];
         typedef _error _error_out;
         static _error_slice * _error_alloc ();
         static void _error_free (_error_slice *);
         static void _error_copy (_error_slice* to, const _error_slice* from);
         static _error_slice *_error_dup (const _error_slice* from);

         struct _error_uniq_ {};
         typedef DDS_DCPS_FArray_var< _error, _error_slice, struct _error_uniq_> _error_var;
         typedef DDS_DCPS_Array_forany< _error, _error_slice, struct _error_uniq_> _error_forany;
         typedef DDS::Short _status_slice;
         typedef DDS::Short _status[16];
         typedef _status _status_out;
         static _status_slice * _status_alloc ();
         static void _status_free (_status_slice *);
         static void _status_copy (_status_slice* to, const _status_slice* from);
         static _status_slice *_status_dup (const _status_slice* from);

         struct _status_uniq_ {};
         typedef DDS_DCPS_FArray_var< _status, _status_slice, struct _status_uniq_> _status_var;
         typedef DDS_DCPS_Array_forany< _status, _status_slice, struct _status_uniq_> _status_forany;
         typedef DDS::Long _voltage_slice;
         typedef DDS::Long _voltage[16];
         typedef _voltage _voltage_out;
         static _voltage_slice * _voltage_alloc ();
         static void _voltage_free (_voltage_slice *);
         static void _voltage_copy (_voltage_slice* to, const _voltage_slice* from);
         static _voltage_slice *_voltage_dup (const _voltage_slice* from);

         struct _voltage_uniq_ {};
         typedef DDS_DCPS_FArray_var< _voltage, _voltage_slice, struct _voltage_uniq_> _voltage_var;
         typedef DDS_DCPS_Array_forany< _voltage, _voltage_slice, struct _voltage_uniq_> _voltage_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _error error;
         _status status;
         _voltage voltage;
   };

   typedef DDS_DCPSStruct_var < Electrical> Electrical_var;
   typedef DDS_DCPSStruct_out < Electrical> Electrical_out;

   struct LimitSensors
   {
         typedef DDS::Short _liftoff_slice;
         typedef DDS::Short _liftoff[18];
         typedef _liftoff _liftoff_out;
         static _liftoff_slice * _liftoff_alloc ();
         static void _liftoff_free (_liftoff_slice *);
         static void _liftoff_copy (_liftoff_slice* to, const _liftoff_slice* from);
         static _liftoff_slice *_liftoff_dup (const _liftoff_slice* from);

         struct _liftoff_uniq_ {};
         typedef DDS_DCPS_FArray_var< _liftoff, _liftoff_slice, struct _liftoff_uniq_> _liftoff_var;
         typedef DDS_DCPS_Array_forany< _liftoff, _liftoff_slice, struct _liftoff_uniq_> _liftoff_forany;
         typedef DDS::Short _llimit_slice;
         typedef DDS::Short _llimit[18];
         typedef _llimit _llimit_out;
         static _llimit_slice * _llimit_alloc ();
         static void _llimit_free (_llimit_slice *);
         static void _llimit_copy (_llimit_slice* to, const _llimit_slice* from);
         static _llimit_slice *_llimit_dup (const _llimit_slice* from);

         struct _llimit_uniq_ {};
         typedef DDS_DCPS_FArray_var< _llimit, _llimit_slice, struct _llimit_uniq_> _llimit_var;
         typedef DDS_DCPS_Array_forany< _llimit, _llimit_slice, struct _llimit_uniq_> _llimit_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _liftoff liftoff;
         _llimit llimit;
   };

   typedef DDS_DCPSStruct_var < LimitSensors> LimitSensors_var;
   typedef DDS_DCPSStruct_out < LimitSensors> LimitSensors_out;

   struct Metrology
   {
         typedef DDS::Long _distance_slice;
         typedef DDS::Long _distance[18];
         typedef _distance _distance_out;
         static _distance_slice * _distance_alloc ();
         static void _distance_free (_distance_slice *);
         static void _distance_copy (_distance_slice* to, const _distance_slice* from);
         static _distance_slice *_distance_dup (const _distance_slice* from);

         struct _distance_uniq_ {};
         typedef DDS_DCPS_FArray_var< _distance, _distance_slice, struct _distance_uniq_> _distance_var;
         typedef DDS_DCPS_Array_forany< _distance, _distance_slice, struct _distance_uniq_> _distance_forany;
         typedef DDS::Long _error_slice;
         typedef DDS::Long _error[18];
         typedef _error _error_out;
         static _error_slice * _error_alloc ();
         static void _error_free (_error_slice *);
         static void _error_copy (_error_slice* to, const _error_slice* from);
         static _error_slice *_error_dup (const _error_slice* from);

         struct _error_uniq_ {};
         typedef DDS_DCPS_FArray_var< _error, _error_slice, struct _error_uniq_> _error_var;
         typedef DDS_DCPS_Array_forany< _error, _error_slice, struct _error_uniq_> _error_forany;
         typedef DDS::Short _status_slice;
         typedef DDS::Short _status[18];
         typedef _status _status_out;
         static _status_slice * _status_alloc ();
         static void _status_free (_status_slice *);
         static void _status_copy (_status_slice* to, const _status_slice* from);
         static _status_slice *_status_dup (const _status_slice* from);

         struct _status_uniq_ {};
         typedef DDS_DCPS_FArray_var< _status, _status_slice, struct _status_uniq_> _status_var;
         typedef DDS_DCPS_Array_forany< _status, _status_slice, struct _status_uniq_> _status_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _distance distance;
         _error error;
         _status status;
   };

   typedef DDS_DCPSStruct_var < Metrology> Metrology_var;
   typedef DDS_DCPSStruct_out < Metrology> Metrology_out;

   struct TC
   {
         typedef DDS::Float _error_slice;
         typedef DDS::Float _error[16];
         typedef _error _error_out;
         static _error_slice * _error_alloc ();
         static void _error_free (_error_slice *);
         static void _error_copy (_error_slice* to, const _error_slice* from);
         static _error_slice *_error_dup (const _error_slice* from);

         struct _error_uniq_ {};
         typedef DDS_DCPS_FArray_var< _error, _error_slice, struct _error_uniq_> _error_var;
         typedef DDS_DCPS_Array_forany< _error, _error_slice, struct _error_uniq_> _error_forany;
         typedef DDS::Short _status_slice;
         typedef DDS::Short _status[16];
         typedef _status _status_out;
         static _status_slice * _status_alloc ();
         static void _status_free (_status_slice *);
         static void _status_copy (_status_slice* to, const _status_slice* from);
         static _status_slice *_status_dup (const _status_slice* from);

         struct _status_uniq_ {};
         typedef DDS_DCPS_FArray_var< _status, _status_slice, struct _status_uniq_> _status_var;
         typedef DDS_DCPS_Array_forany< _status, _status_slice, struct _status_uniq_> _status_forany;
         typedef DDS::Float _setpoint_slice;
         typedef DDS::Float _setpoint[16];
         typedef _setpoint _setpoint_out;
         static _setpoint_slice * _setpoint_alloc ();
         static void _setpoint_free (_setpoint_slice *);
         static void _setpoint_copy (_setpoint_slice* to, const _setpoint_slice* from);
         static _setpoint_slice *_setpoint_dup (const _setpoint_slice* from);

         struct _setpoint_uniq_ {};
         typedef DDS_DCPS_FArray_var< _setpoint, _setpoint_slice, struct _setpoint_uniq_> _setpoint_var;
         typedef DDS_DCPS_Array_forany< _setpoint, _setpoint_slice, struct _setpoint_uniq_> _setpoint_forany;
         typedef DDS::Float _temperature_slice;
         typedef DDS::Float _temperature[16];
         typedef _temperature _temperature_out;
         static _temperature_slice * _temperature_alloc ();
         static void _temperature_free (_temperature_slice *);
         static void _temperature_copy (_temperature_slice* to, const _temperature_slice* from);
         static _temperature_slice *_temperature_dup (const _temperature_slice* from);

         struct _temperature_uniq_ {};
         typedef DDS_DCPS_FArray_var< _temperature, _temperature_slice, struct _temperature_uniq_> _temperature_var;
         typedef DDS_DCPS_Array_forany< _temperature, _temperature_slice, struct _temperature_uniq_> _temperature_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _error error;
         _status status;
         _setpoint setpoint;
         _temperature temperature;
   };

   typedef DDS_DCPSStruct_var < TC> TC_var;
   typedef DDS_DCPSStruct_out < TC> TC_out;

   struct command_clearError
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         DDS::Boolean state;
   };

   typedef DDS_DCPSStruct_var < command_clearError> command_clearError_var;
   typedef DDS_DCPSStruct_out < command_clearError> command_clearError_out;

   struct command_configureAcceleration
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         DDS::Float accmax;
   };

   typedef DDS_DCPSStruct_var < command_configureAcceleration> command_configureAcceleration_var;
   typedef DDS_DCPSStruct_out < command_configureAcceleration> command_configureAcceleration_out;

   struct command_configureAzimuthCoeffsLut
   {
         typedef DDS::Long _headingInfo_slice;
         typedef DDS::Long _headingInfo[6];
         typedef _headingInfo _headingInfo_out;
         static _headingInfo_slice * _headingInfo_alloc ();
         static void _headingInfo_free (_headingInfo_slice *);
         static void _headingInfo_copy (_headingInfo_slice* to, const _headingInfo_slice* from);
         static _headingInfo_slice *_headingInfo_dup (const _headingInfo_slice* from);

         struct _headingInfo_uniq_ {};
         typedef DDS_DCPS_FArray_var< _headingInfo, _headingInfo_slice, struct _headingInfo_uniq_> _headingInfo_var;
         typedef DDS_DCPS_Array_forany< _headingInfo, _headingInfo_slice, struct _headingInfo_uniq_> _headingInfo_forany;
         typedef DDS::Float _c1_slice;
         typedef DDS::Float _c1[6];
         typedef _c1 _c1_out;
         static _c1_slice * _c1_alloc ();
         static void _c1_free (_c1_slice *);
         static void _c1_copy (_c1_slice* to, const _c1_slice* from);
         static _c1_slice *_c1_dup (const _c1_slice* from);

         struct _c1_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c1, _c1_slice, struct _c1_uniq_> _c1_var;
         typedef DDS_DCPS_Array_forany< _c1, _c1_slice, struct _c1_uniq_> _c1_forany;
         typedef DDS::Float _c2_slice;
         typedef DDS::Float _c2[6];
         typedef _c2 _c2_out;
         static _c2_slice * _c2_alloc ();
         static void _c2_free (_c2_slice *);
         static void _c2_copy (_c2_slice* to, const _c2_slice* from);
         static _c2_slice *_c2_dup (const _c2_slice* from);

         struct _c2_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c2, _c2_slice, struct _c2_uniq_> _c2_var;
         typedef DDS_DCPS_Array_forany< _c2, _c2_slice, struct _c2_uniq_> _c2_forany;
         typedef DDS::Float _c3_slice;
         typedef DDS::Float _c3[6];
         typedef _c3 _c3_out;
         static _c3_slice * _c3_alloc ();
         static void _c3_free (_c3_slice *);
         static void _c3_copy (_c3_slice* to, const _c3_slice* from);
         static _c3_slice *_c3_dup (const _c3_slice* from);

         struct _c3_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c3, _c3_slice, struct _c3_uniq_> _c3_var;
         typedef DDS_DCPS_Array_forany< _c3, _c3_slice, struct _c3_uniq_> _c3_forany;
         typedef DDS::Float _c4_slice;
         typedef DDS::Float _c4[6];
         typedef _c4 _c4_out;
         static _c4_slice * _c4_alloc ();
         static void _c4_free (_c4_slice *);
         static void _c4_copy (_c4_slice* to, const _c4_slice* from);
         static _c4_slice *_c4_dup (const _c4_slice* from);

         struct _c4_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c4, _c4_slice, struct _c4_uniq_> _c4_var;
         typedef DDS_DCPS_Array_forany< _c4, _c4_slice, struct _c4_uniq_> _c4_forany;
         typedef DDS::Float _c5_slice;
         typedef DDS::Float _c5[6];
         typedef _c5 _c5_out;
         static _c5_slice * _c5_alloc ();
         static void _c5_free (_c5_slice *);
         static void _c5_copy (_c5_slice* to, const _c5_slice* from);
         static _c5_slice *_c5_dup (const _c5_slice* from);

         struct _c5_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c5, _c5_slice, struct _c5_uniq_> _c5_var;
         typedef DDS_DCPS_Array_forany< _c5, _c5_slice, struct _c5_uniq_> _c5_forany;
         typedef DDS::Float _c6_slice;
         typedef DDS::Float _c6[6];
         typedef _c6 _c6_out;
         static _c6_slice * _c6_alloc ();
         static void _c6_free (_c6_slice *);
         static void _c6_copy (_c6_slice* to, const _c6_slice* from);
         static _c6_slice *_c6_dup (const _c6_slice* from);

         struct _c6_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c6, _c6_slice, struct _c6_uniq_> _c6_var;
         typedef DDS_DCPS_Array_forany< _c6, _c6_slice, struct _c6_uniq_> _c6_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         _headingInfo headingInfo;
         _c1 c1;
         _c2 c2;
         _c3 c3;
         _c4 c4;
         _c5 c5;
         _c6 c6;
   };

   typedef DDS_DCPSStruct_var < command_configureAzimuthCoeffsLut> command_configureAzimuthCoeffsLut_var;
   typedef DDS_DCPSStruct_out < command_configureAzimuthCoeffsLut> command_configureAzimuthCoeffsLut_out;

   struct command_configureAzimuthRawLut
   {
         typedef DDS::Long _headingInfo_slice;
         typedef DDS::Long _headingInfo[35];
         typedef _headingInfo _headingInfo_out;
         static _headingInfo_slice * _headingInfo_alloc ();
         static void _headingInfo_free (_headingInfo_slice *);
         static void _headingInfo_copy (_headingInfo_slice* to, const _headingInfo_slice* from);
         static _headingInfo_slice *_headingInfo_dup (const _headingInfo_slice* from);

         struct _headingInfo_uniq_ {};
         typedef DDS_DCPS_FArray_var< _headingInfo, _headingInfo_slice, struct _headingInfo_uniq_> _headingInfo_var;
         typedef DDS_DCPS_Array_forany< _headingInfo, _headingInfo_slice, struct _headingInfo_uniq_> _headingInfo_forany;
         typedef DDS::Float _fz1_slice;
         typedef DDS::Float _fz1[35];
         typedef _fz1 _fz1_out;
         static _fz1_slice * _fz1_alloc ();
         static void _fz1_free (_fz1_slice *);
         static void _fz1_copy (_fz1_slice* to, const _fz1_slice* from);
         static _fz1_slice *_fz1_dup (const _fz1_slice* from);

         struct _fz1_uniq_ {};
         typedef DDS_DCPS_FArray_var< _fz1, _fz1_slice, struct _fz1_uniq_> _fz1_var;
         typedef DDS_DCPS_Array_forany< _fz1, _fz1_slice, struct _fz1_uniq_> _fz1_forany;
         typedef DDS::Float _fz2_slice;
         typedef DDS::Float _fz2[35];
         typedef _fz2 _fz2_out;
         static _fz2_slice * _fz2_alloc ();
         static void _fz2_free (_fz2_slice *);
         static void _fz2_copy (_fz2_slice* to, const _fz2_slice* from);
         static _fz2_slice *_fz2_dup (const _fz2_slice* from);

         struct _fz2_uniq_ {};
         typedef DDS_DCPS_FArray_var< _fz2, _fz2_slice, struct _fz2_uniq_> _fz2_var;
         typedef DDS_DCPS_Array_forany< _fz2, _fz2_slice, struct _fz2_uniq_> _fz2_forany;
         typedef DDS::Float _fz3_slice;
         typedef DDS::Float _fz3[35];
         typedef _fz3 _fz3_out;
         static _fz3_slice * _fz3_alloc ();
         static void _fz3_free (_fz3_slice *);
         static void _fz3_copy (_fz3_slice* to, const _fz3_slice* from);
         static _fz3_slice *_fz3_dup (const _fz3_slice* from);

         struct _fz3_uniq_ {};
         typedef DDS_DCPS_FArray_var< _fz3, _fz3_slice, struct _fz3_uniq_> _fz3_var;
         typedef DDS_DCPS_Array_forany< _fz3, _fz3_slice, struct _fz3_uniq_> _fz3_forany;
         typedef DDS::Float _fz4_slice;
         typedef DDS::Float _fz4[35];
         typedef _fz4 _fz4_out;
         static _fz4_slice * _fz4_alloc ();
         static void _fz4_free (_fz4_slice *);
         static void _fz4_copy (_fz4_slice* to, const _fz4_slice* from);
         static _fz4_slice *_fz4_dup (const _fz4_slice* from);

         struct _fz4_uniq_ {};
         typedef DDS_DCPS_FArray_var< _fz4, _fz4_slice, struct _fz4_uniq_> _fz4_var;
         typedef DDS_DCPS_Array_forany< _fz4, _fz4_slice, struct _fz4_uniq_> _fz4_forany;
         typedef DDS::Float _fz5_slice;
         typedef DDS::Float _fz5[35];
         typedef _fz5 _fz5_out;
         static _fz5_slice * _fz5_alloc ();
         static void _fz5_free (_fz5_slice *);
         static void _fz5_copy (_fz5_slice* to, const _fz5_slice* from);
         static _fz5_slice *_fz5_dup (const _fz5_slice* from);

         struct _fz5_uniq_ {};
         typedef DDS_DCPS_FArray_var< _fz5, _fz5_slice, struct _fz5_uniq_> _fz5_var;
         typedef DDS_DCPS_Array_forany< _fz5, _fz5_slice, struct _fz5_uniq_> _fz5_forany;
         typedef DDS::Float _fz6_slice;
         typedef DDS::Float _fz6[35];
         typedef _fz6 _fz6_out;
         static _fz6_slice * _fz6_alloc ();
         static void _fz6_free (_fz6_slice *);
         static void _fz6_copy (_fz6_slice* to, const _fz6_slice* from);
         static _fz6_slice *_fz6_dup (const _fz6_slice* from);

         struct _fz6_uniq_ {};
         typedef DDS_DCPS_FArray_var< _fz6, _fz6_slice, struct _fz6_uniq_> _fz6_var;
         typedef DDS_DCPS_Array_forany< _fz6, _fz6_slice, struct _fz6_uniq_> _fz6_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         _headingInfo headingInfo;
         _fz1 fz1;
         _fz2 fz2;
         _fz3 fz3;
         _fz4 fz4;
         _fz5 fz5;
         _fz6 fz6;
   };

   typedef DDS_DCPSStruct_var < command_configureAzimuthRawLut> command_configureAzimuthRawLut_var;
   typedef DDS_DCPSStruct_out < command_configureAzimuthRawLut> command_configureAzimuthRawLut_out;

   struct command_configureElevationCoeffsLut
   {
         typedef DDS::Long _headingInfo_slice;
         typedef DDS::Long _headingInfo[6];
         typedef _headingInfo _headingInfo_out;
         static _headingInfo_slice * _headingInfo_alloc ();
         static void _headingInfo_free (_headingInfo_slice *);
         static void _headingInfo_copy (_headingInfo_slice* to, const _headingInfo_slice* from);
         static _headingInfo_slice *_headingInfo_dup (const _headingInfo_slice* from);

         struct _headingInfo_uniq_ {};
         typedef DDS_DCPS_FArray_var< _headingInfo, _headingInfo_slice, struct _headingInfo_uniq_> _headingInfo_var;
         typedef DDS_DCPS_Array_forany< _headingInfo, _headingInfo_slice, struct _headingInfo_uniq_> _headingInfo_forany;
         typedef DDS::Float _c1_slice;
         typedef DDS::Float _c1[6];
         typedef _c1 _c1_out;
         static _c1_slice * _c1_alloc ();
         static void _c1_free (_c1_slice *);
         static void _c1_copy (_c1_slice* to, const _c1_slice* from);
         static _c1_slice *_c1_dup (const _c1_slice* from);

         struct _c1_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c1, _c1_slice, struct _c1_uniq_> _c1_var;
         typedef DDS_DCPS_Array_forany< _c1, _c1_slice, struct _c1_uniq_> _c1_forany;
         typedef DDS::Float _c2_slice;
         typedef DDS::Float _c2[6];
         typedef _c2 _c2_out;
         static _c2_slice * _c2_alloc ();
         static void _c2_free (_c2_slice *);
         static void _c2_copy (_c2_slice* to, const _c2_slice* from);
         static _c2_slice *_c2_dup (const _c2_slice* from);

         struct _c2_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c2, _c2_slice, struct _c2_uniq_> _c2_var;
         typedef DDS_DCPS_Array_forany< _c2, _c2_slice, struct _c2_uniq_> _c2_forany;
         typedef DDS::Float _c3_slice;
         typedef DDS::Float _c3[6];
         typedef _c3 _c3_out;
         static _c3_slice * _c3_alloc ();
         static void _c3_free (_c3_slice *);
         static void _c3_copy (_c3_slice* to, const _c3_slice* from);
         static _c3_slice *_c3_dup (const _c3_slice* from);

         struct _c3_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c3, _c3_slice, struct _c3_uniq_> _c3_var;
         typedef DDS_DCPS_Array_forany< _c3, _c3_slice, struct _c3_uniq_> _c3_forany;
         typedef DDS::Float _c4_slice;
         typedef DDS::Float _c4[6];
         typedef _c4 _c4_out;
         static _c4_slice * _c4_alloc ();
         static void _c4_free (_c4_slice *);
         static void _c4_copy (_c4_slice* to, const _c4_slice* from);
         static _c4_slice *_c4_dup (const _c4_slice* from);

         struct _c4_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c4, _c4_slice, struct _c4_uniq_> _c4_var;
         typedef DDS_DCPS_Array_forany< _c4, _c4_slice, struct _c4_uniq_> _c4_forany;
         typedef DDS::Float _c5_slice;
         typedef DDS::Float _c5[6];
         typedef _c5 _c5_out;
         static _c5_slice * _c5_alloc ();
         static void _c5_free (_c5_slice *);
         static void _c5_copy (_c5_slice* to, const _c5_slice* from);
         static _c5_slice *_c5_dup (const _c5_slice* from);

         struct _c5_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c5, _c5_slice, struct _c5_uniq_> _c5_var;
         typedef DDS_DCPS_Array_forany< _c5, _c5_slice, struct _c5_uniq_> _c5_forany;
         typedef DDS::Float _c6_slice;
         typedef DDS::Float _c6[6];
         typedef _c6 _c6_out;
         static _c6_slice * _c6_alloc ();
         static void _c6_free (_c6_slice *);
         static void _c6_copy (_c6_slice* to, const _c6_slice* from);
         static _c6_slice *_c6_dup (const _c6_slice* from);

         struct _c6_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c6, _c6_slice, struct _c6_uniq_> _c6_var;
         typedef DDS_DCPS_Array_forany< _c6, _c6_slice, struct _c6_uniq_> _c6_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         _headingInfo headingInfo;
         _c1 c1;
         _c2 c2;
         _c3 c3;
         _c4 c4;
         _c5 c5;
         _c6 c6;
   };

   typedef DDS_DCPSStruct_var < command_configureElevationCoeffsLut> command_configureElevationCoeffsLut_var;
   typedef DDS_DCPSStruct_out < command_configureElevationCoeffsLut> command_configureElevationCoeffsLut_out;

   struct command_configureElevationRawLut
   {
         typedef DDS::Long _headingInfo_slice;
         typedef DDS::Long _headingInfo[19];
         typedef _headingInfo _headingInfo_out;
         static _headingInfo_slice * _headingInfo_alloc ();
         static void _headingInfo_free (_headingInfo_slice *);
         static void _headingInfo_copy (_headingInfo_slice* to, const _headingInfo_slice* from);
         static _headingInfo_slice *_headingInfo_dup (const _headingInfo_slice* from);

         struct _headingInfo_uniq_ {};
         typedef DDS_DCPS_FArray_var< _headingInfo, _headingInfo_slice, struct _headingInfo_uniq_> _headingInfo_var;
         typedef DDS_DCPS_Array_forany< _headingInfo, _headingInfo_slice, struct _headingInfo_uniq_> _headingInfo_forany;
         typedef DDS::Float _fz1_slice;
         typedef DDS::Float _fz1[19];
         typedef _fz1 _fz1_out;
         static _fz1_slice * _fz1_alloc ();
         static void _fz1_free (_fz1_slice *);
         static void _fz1_copy (_fz1_slice* to, const _fz1_slice* from);
         static _fz1_slice *_fz1_dup (const _fz1_slice* from);

         struct _fz1_uniq_ {};
         typedef DDS_DCPS_FArray_var< _fz1, _fz1_slice, struct _fz1_uniq_> _fz1_var;
         typedef DDS_DCPS_Array_forany< _fz1, _fz1_slice, struct _fz1_uniq_> _fz1_forany;
         typedef DDS::Float _fz2_slice;
         typedef DDS::Float _fz2[19];
         typedef _fz2 _fz2_out;
         static _fz2_slice * _fz2_alloc ();
         static void _fz2_free (_fz2_slice *);
         static void _fz2_copy (_fz2_slice* to, const _fz2_slice* from);
         static _fz2_slice *_fz2_dup (const _fz2_slice* from);

         struct _fz2_uniq_ {};
         typedef DDS_DCPS_FArray_var< _fz2, _fz2_slice, struct _fz2_uniq_> _fz2_var;
         typedef DDS_DCPS_Array_forany< _fz2, _fz2_slice, struct _fz2_uniq_> _fz2_forany;
         typedef DDS::Float _fz3_slice;
         typedef DDS::Float _fz3[19];
         typedef _fz3 _fz3_out;
         static _fz3_slice * _fz3_alloc ();
         static void _fz3_free (_fz3_slice *);
         static void _fz3_copy (_fz3_slice* to, const _fz3_slice* from);
         static _fz3_slice *_fz3_dup (const _fz3_slice* from);

         struct _fz3_uniq_ {};
         typedef DDS_DCPS_FArray_var< _fz3, _fz3_slice, struct _fz3_uniq_> _fz3_var;
         typedef DDS_DCPS_Array_forany< _fz3, _fz3_slice, struct _fz3_uniq_> _fz3_forany;
         typedef DDS::Float _fz4_slice;
         typedef DDS::Float _fz4[19];
         typedef _fz4 _fz4_out;
         static _fz4_slice * _fz4_alloc ();
         static void _fz4_free (_fz4_slice *);
         static void _fz4_copy (_fz4_slice* to, const _fz4_slice* from);
         static _fz4_slice *_fz4_dup (const _fz4_slice* from);

         struct _fz4_uniq_ {};
         typedef DDS_DCPS_FArray_var< _fz4, _fz4_slice, struct _fz4_uniq_> _fz4_var;
         typedef DDS_DCPS_Array_forany< _fz4, _fz4_slice, struct _fz4_uniq_> _fz4_forany;
         typedef DDS::Float _fz5_slice;
         typedef DDS::Float _fz5[19];
         typedef _fz5 _fz5_out;
         static _fz5_slice * _fz5_alloc ();
         static void _fz5_free (_fz5_slice *);
         static void _fz5_copy (_fz5_slice* to, const _fz5_slice* from);
         static _fz5_slice *_fz5_dup (const _fz5_slice* from);

         struct _fz5_uniq_ {};
         typedef DDS_DCPS_FArray_var< _fz5, _fz5_slice, struct _fz5_uniq_> _fz5_var;
         typedef DDS_DCPS_Array_forany< _fz5, _fz5_slice, struct _fz5_uniq_> _fz5_forany;
         typedef DDS::Float _fz6_slice;
         typedef DDS::Float _fz6[19];
         typedef _fz6 _fz6_out;
         static _fz6_slice * _fz6_alloc ();
         static void _fz6_free (_fz6_slice *);
         static void _fz6_copy (_fz6_slice* to, const _fz6_slice* from);
         static _fz6_slice *_fz6_dup (const _fz6_slice* from);

         struct _fz6_uniq_ {};
         typedef DDS_DCPS_FArray_var< _fz6, _fz6_slice, struct _fz6_uniq_> _fz6_var;
         typedef DDS_DCPS_Array_forany< _fz6, _fz6_slice, struct _fz6_uniq_> _fz6_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         _headingInfo headingInfo;
         _fz1 fz1;
         _fz2 fz2;
         _fz3 fz3;
         _fz4 fz4;
         _fz5 fz5;
         _fz6 fz6;
   };

   typedef DDS_DCPSStruct_var < command_configureElevationRawLut> command_configureElevationRawLut_var;
   typedef DDS_DCPSStruct_out < command_configureElevationRawLut> command_configureElevationRawLut_out;

   struct command_configureLimits
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         DDS::Float xmin;
         DDS::Float xmax;
         DDS::Float ymin;
         DDS::Float ymax;
         DDS::Float zmin;
         DDS::Float zmax;
         DDS::Float umin;
         DDS::Float umax;
         DDS::Float vmin;
         DDS::Float vmax;
         DDS::Float wmin;
         DDS::Float wmax;
   };

   typedef DDS_DCPSStruct_var < command_configureLimits> command_configureLimits_var;
   typedef DDS_DCPSStruct_out < command_configureLimits> command_configureLimits_out;

   struct command_configureTemperatureCoeffsLut
   {
         typedef DDS::Long _headingInfo_slice;
         typedef DDS::Long _headingInfo[6];
         typedef _headingInfo _headingInfo_out;
         static _headingInfo_slice * _headingInfo_alloc ();
         static void _headingInfo_free (_headingInfo_slice *);
         static void _headingInfo_copy (_headingInfo_slice* to, const _headingInfo_slice* from);
         static _headingInfo_slice *_headingInfo_dup (const _headingInfo_slice* from);

         struct _headingInfo_uniq_ {};
         typedef DDS_DCPS_FArray_var< _headingInfo, _headingInfo_slice, struct _headingInfo_uniq_> _headingInfo_var;
         typedef DDS_DCPS_Array_forany< _headingInfo, _headingInfo_slice, struct _headingInfo_uniq_> _headingInfo_forany;
         typedef DDS::Float _c1_slice;
         typedef DDS::Float _c1[6];
         typedef _c1 _c1_out;
         static _c1_slice * _c1_alloc ();
         static void _c1_free (_c1_slice *);
         static void _c1_copy (_c1_slice* to, const _c1_slice* from);
         static _c1_slice *_c1_dup (const _c1_slice* from);

         struct _c1_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c1, _c1_slice, struct _c1_uniq_> _c1_var;
         typedef DDS_DCPS_Array_forany< _c1, _c1_slice, struct _c1_uniq_> _c1_forany;
         typedef DDS::Float _c2_slice;
         typedef DDS::Float _c2[6];
         typedef _c2 _c2_out;
         static _c2_slice * _c2_alloc ();
         static void _c2_free (_c2_slice *);
         static void _c2_copy (_c2_slice* to, const _c2_slice* from);
         static _c2_slice *_c2_dup (const _c2_slice* from);

         struct _c2_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c2, _c2_slice, struct _c2_uniq_> _c2_var;
         typedef DDS_DCPS_Array_forany< _c2, _c2_slice, struct _c2_uniq_> _c2_forany;
         typedef DDS::Float _c3_slice;
         typedef DDS::Float _c3[6];
         typedef _c3 _c3_out;
         static _c3_slice * _c3_alloc ();
         static void _c3_free (_c3_slice *);
         static void _c3_copy (_c3_slice* to, const _c3_slice* from);
         static _c3_slice *_c3_dup (const _c3_slice* from);

         struct _c3_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c3, _c3_slice, struct _c3_uniq_> _c3_var;
         typedef DDS_DCPS_Array_forany< _c3, _c3_slice, struct _c3_uniq_> _c3_forany;
         typedef DDS::Float _c4_slice;
         typedef DDS::Float _c4[6];
         typedef _c4 _c4_out;
         static _c4_slice * _c4_alloc ();
         static void _c4_free (_c4_slice *);
         static void _c4_copy (_c4_slice* to, const _c4_slice* from);
         static _c4_slice *_c4_dup (const _c4_slice* from);

         struct _c4_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c4, _c4_slice, struct _c4_uniq_> _c4_var;
         typedef DDS_DCPS_Array_forany< _c4, _c4_slice, struct _c4_uniq_> _c4_forany;
         typedef DDS::Float _c5_slice;
         typedef DDS::Float _c5[6];
         typedef _c5 _c5_out;
         static _c5_slice * _c5_alloc ();
         static void _c5_free (_c5_slice *);
         static void _c5_copy (_c5_slice* to, const _c5_slice* from);
         static _c5_slice *_c5_dup (const _c5_slice* from);

         struct _c5_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c5, _c5_slice, struct _c5_uniq_> _c5_var;
         typedef DDS_DCPS_Array_forany< _c5, _c5_slice, struct _c5_uniq_> _c5_forany;
         typedef DDS::Float _c6_slice;
         typedef DDS::Float _c6[6];
         typedef _c6 _c6_out;
         static _c6_slice * _c6_alloc ();
         static void _c6_free (_c6_slice *);
         static void _c6_copy (_c6_slice* to, const _c6_slice* from);
         static _c6_slice *_c6_dup (const _c6_slice* from);

         struct _c6_uniq_ {};
         typedef DDS_DCPS_FArray_var< _c6, _c6_slice, struct _c6_uniq_> _c6_var;
         typedef DDS_DCPS_Array_forany< _c6, _c6_slice, struct _c6_uniq_> _c6_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         _headingInfo headingInfo;
         _c1 c1;
         _c2 c2;
         _c3 c3;
         _c4 c4;
         _c5 c5;
         _c6 c6;
   };

   typedef DDS_DCPSStruct_var < command_configureTemperatureCoeffsLut> command_configureTemperatureCoeffsLut_var;
   typedef DDS_DCPSStruct_out < command_configureTemperatureCoeffsLut> command_configureTemperatureCoeffsLut_out;

   struct command_configureVelocity
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         DDS::Float xymax;
         DDS::Float rxrymax;
         DDS::Float zmax;
         DDS::Float rzmax;
   };

   typedef DDS_DCPSStruct_var < command_configureVelocity> command_configureVelocity_var;
   typedef DDS_DCPSStruct_out < command_configureVelocity> command_configureVelocity_out;

   struct command_move
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         DDS::Boolean state;
   };

   typedef DDS_DCPSStruct_var < command_move> command_move_var;
   typedef DDS_DCPSStruct_out < command_move> command_move_out;

   struct command_offset
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         DDS::Float x;
         DDS::Float y;
         DDS::Float z;
         DDS::Float u;
         DDS::Float v;
         DDS::Float w;
         DDS::Boolean sync;
   };

   typedef DDS_DCPSStruct_var < command_offset> command_offset_var;
   typedef DDS_DCPSStruct_out < command_offset> command_offset_out;

   struct command_pivot
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         DDS::Float x;
         DDS::Float y;
         DDS::Float z;
   };

   typedef DDS_DCPSStruct_var < command_pivot> command_pivot_var;
   typedef DDS_DCPSStruct_out < command_pivot> command_pivot_out;

   struct command_positionSet
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         DDS::Float x;
         DDS::Float y;
         DDS::Float z;
         DDS::Float u;
         DDS::Float v;
         DDS::Float w;
         DDS::Boolean sync;
   };

   typedef DDS_DCPSStruct_var < command_positionSet> command_positionSet_var;
   typedef DDS_DCPSStruct_out < command_positionSet> command_positionSet_out;

   struct command_rawPositionSet
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         DDS::Long a1;
         DDS::Long a2;
         DDS::Long a3;
         DDS::Long a4;
         DDS::Long a5;
         DDS::Long a6;
         DDS::Boolean sync;
   };

   typedef DDS_DCPSStruct_var < command_rawPositionSet> command_rawPositionSet_var;
   typedef DDS_DCPSStruct_out < command_rawPositionSet> command_rawPositionSet_out;

   struct command_test
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         DDS::Long ivalue1;
         DDS::Long ivalue2;
   };

   typedef DDS_DCPSStruct_var < command_test> command_test_var;
   typedef DDS_DCPSStruct_out < command_test> command_test_out;

   struct logevent_TempError
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long severity;
         DDS::String_mgr axis;
         DDS::Float temp;
         DDS::Double timeStamp;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_TempError> logevent_TempError_var;
   typedef DDS_DCPSStruct_out < logevent_TempError> logevent_TempError_out;

   struct logevent_TrackLost
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long severity;
         DDS::Double timeStamp;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_TrackLost> logevent_TrackLost_var;
   typedef DDS_DCPSStruct_out < logevent_TrackLost> logevent_TrackLost_out;

   struct logevent_Tracking
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long severity;
         DDS::Double timeStamp;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_Tracking> logevent_Tracking_var;
   typedef DDS_DCPSStruct_out < logevent_Tracking> logevent_Tracking_out;

   struct logevent_deviceError
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::Long severity;
         DDS::Double timeStamp;
         DDS::String_mgr code;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_deviceError> logevent_deviceError_var;
   typedef DDS_DCPSStruct_out < logevent_deviceError> logevent_deviceError_out;

   struct logevent_inPosition
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Double timeStamp;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_inPosition> logevent_inPosition_var;
   typedef DDS_DCPSStruct_out < logevent_inPosition> logevent_inPosition_out;

   struct logevent_interlock
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr detail;
         DDS::Double timeStamp;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_interlock> logevent_interlock_var;
   typedef DDS_DCPSStruct_out < logevent_interlock> logevent_interlock_out;

   struct logevent_limit
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr axis;
         DDS::String_mgr llimit;
         DDS::String_mgr type;
         DDS::Double timeStamp;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_limit> logevent_limit_var;
   typedef DDS_DCPSStruct_out < logevent_limit> logevent_limit_out;

   struct command
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long private_seqNum;
         DDS::Short hexapodID;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         DDS::String_mgr modifiers;
   };

   typedef DDS_DCPSStruct_var < command> command_var;
   typedef DDS_DCPSStruct_out < command> command_out;

   struct ackcmd
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long private_seqNum;
         DDS::Short hexapodID;
         DDS::Long ack;
         DDS::Long error;
         DDS::String_mgr result;
   };

   typedef DDS_DCPSStruct_var < ackcmd> ackcmd_var;
   typedef DDS_DCPSStruct_out < ackcmd> ackcmd_out;

   struct logevent
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long private_seqNum;
         DDS::Short hexapodID;
         DDS::String_mgr message;
   };

   typedef DDS_DCPSStruct_var < logevent> logevent_var;
   typedef DDS_DCPSStruct_out < logevent> logevent_out;
}
template <>
hexapod::Actuators::_Calibrated_slice* DDS_DCPS_ArrayHelper < hexapod::Actuators::_Calibrated, hexapod::Actuators::_Calibrated_slice, hexapod::Actuators::_Calibrated_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Actuators::_Calibrated, hexapod::Actuators::_Calibrated_slice, hexapod::Actuators::_Calibrated_uniq_>::copy (hexapod::Actuators::_Calibrated_slice *to, const hexapod::Actuators::_Calibrated_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Actuators::_Calibrated, hexapod::Actuators::_Calibrated_slice, hexapod::Actuators::_Calibrated_uniq_>::free (hexapod::Actuators::_Calibrated_slice *ptr);
template <>
hexapod::Actuators::_Raw_slice* DDS_DCPS_ArrayHelper < hexapod::Actuators::_Raw, hexapod::Actuators::_Raw_slice, hexapod::Actuators::_Raw_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Actuators::_Raw, hexapod::Actuators::_Raw_slice, hexapod::Actuators::_Raw_uniq_>::copy (hexapod::Actuators::_Raw_slice *to, const hexapod::Actuators::_Raw_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Actuators::_Raw, hexapod::Actuators::_Raw_slice, hexapod::Actuators::_Raw_uniq_>::free (hexapod::Actuators::_Raw_slice *ptr);
template <>
hexapod::Application::_Demand_slice* DDS_DCPS_ArrayHelper < hexapod::Application::_Demand, hexapod::Application::_Demand_slice, hexapod::Application::_Demand_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Application::_Demand, hexapod::Application::_Demand_slice, hexapod::Application::_Demand_uniq_>::copy (hexapod::Application::_Demand_slice *to, const hexapod::Application::_Demand_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Application::_Demand, hexapod::Application::_Demand_slice, hexapod::Application::_Demand_uniq_>::free (hexapod::Application::_Demand_slice *ptr);
template <>
hexapod::Application::_Error_slice* DDS_DCPS_ArrayHelper < hexapod::Application::_Error, hexapod::Application::_Error_slice, hexapod::Application::_Error_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Application::_Error, hexapod::Application::_Error_slice, hexapod::Application::_Error_uniq_>::copy (hexapod::Application::_Error_slice *to, const hexapod::Application::_Error_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Application::_Error, hexapod::Application::_Error_slice, hexapod::Application::_Error_uniq_>::free (hexapod::Application::_Error_slice *ptr);
template <>
hexapod::Application::_Position_slice* DDS_DCPS_ArrayHelper < hexapod::Application::_Position, hexapod::Application::_Position_slice, hexapod::Application::_Position_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Application::_Position, hexapod::Application::_Position_slice, hexapod::Application::_Position_uniq_>::copy (hexapod::Application::_Position_slice *to, const hexapod::Application::_Position_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Application::_Position, hexapod::Application::_Position_slice, hexapod::Application::_Position_uniq_>::free (hexapod::Application::_Position_slice *ptr);
template <>
hexapod::Electrical::_error_slice* DDS_DCPS_ArrayHelper < hexapod::Electrical::_error, hexapod::Electrical::_error_slice, hexapod::Electrical::_error_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Electrical::_error, hexapod::Electrical::_error_slice, hexapod::Electrical::_error_uniq_>::copy (hexapod::Electrical::_error_slice *to, const hexapod::Electrical::_error_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Electrical::_error, hexapod::Electrical::_error_slice, hexapod::Electrical::_error_uniq_>::free (hexapod::Electrical::_error_slice *ptr);
template <>
hexapod::Electrical::_status_slice* DDS_DCPS_ArrayHelper < hexapod::Electrical::_status, hexapod::Electrical::_status_slice, hexapod::Electrical::_status_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Electrical::_status, hexapod::Electrical::_status_slice, hexapod::Electrical::_status_uniq_>::copy (hexapod::Electrical::_status_slice *to, const hexapod::Electrical::_status_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Electrical::_status, hexapod::Electrical::_status_slice, hexapod::Electrical::_status_uniq_>::free (hexapod::Electrical::_status_slice *ptr);
template <>
hexapod::Electrical::_voltage_slice* DDS_DCPS_ArrayHelper < hexapod::Electrical::_voltage, hexapod::Electrical::_voltage_slice, hexapod::Electrical::_voltage_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Electrical::_voltage, hexapod::Electrical::_voltage_slice, hexapod::Electrical::_voltage_uniq_>::copy (hexapod::Electrical::_voltage_slice *to, const hexapod::Electrical::_voltage_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Electrical::_voltage, hexapod::Electrical::_voltage_slice, hexapod::Electrical::_voltage_uniq_>::free (hexapod::Electrical::_voltage_slice *ptr);
template <>
hexapod::LimitSensors::_liftoff_slice* DDS_DCPS_ArrayHelper < hexapod::LimitSensors::_liftoff, hexapod::LimitSensors::_liftoff_slice, hexapod::LimitSensors::_liftoff_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::LimitSensors::_liftoff, hexapod::LimitSensors::_liftoff_slice, hexapod::LimitSensors::_liftoff_uniq_>::copy (hexapod::LimitSensors::_liftoff_slice *to, const hexapod::LimitSensors::_liftoff_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::LimitSensors::_liftoff, hexapod::LimitSensors::_liftoff_slice, hexapod::LimitSensors::_liftoff_uniq_>::free (hexapod::LimitSensors::_liftoff_slice *ptr);
template <>
hexapod::LimitSensors::_llimit_slice* DDS_DCPS_ArrayHelper < hexapod::LimitSensors::_llimit, hexapod::LimitSensors::_llimit_slice, hexapod::LimitSensors::_llimit_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::LimitSensors::_llimit, hexapod::LimitSensors::_llimit_slice, hexapod::LimitSensors::_llimit_uniq_>::copy (hexapod::LimitSensors::_llimit_slice *to, const hexapod::LimitSensors::_llimit_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::LimitSensors::_llimit, hexapod::LimitSensors::_llimit_slice, hexapod::LimitSensors::_llimit_uniq_>::free (hexapod::LimitSensors::_llimit_slice *ptr);
template <>
hexapod::Metrology::_distance_slice* DDS_DCPS_ArrayHelper < hexapod::Metrology::_distance, hexapod::Metrology::_distance_slice, hexapod::Metrology::_distance_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Metrology::_distance, hexapod::Metrology::_distance_slice, hexapod::Metrology::_distance_uniq_>::copy (hexapod::Metrology::_distance_slice *to, const hexapod::Metrology::_distance_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Metrology::_distance, hexapod::Metrology::_distance_slice, hexapod::Metrology::_distance_uniq_>::free (hexapod::Metrology::_distance_slice *ptr);
template <>
hexapod::Metrology::_error_slice* DDS_DCPS_ArrayHelper < hexapod::Metrology::_error, hexapod::Metrology::_error_slice, hexapod::Metrology::_error_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Metrology::_error, hexapod::Metrology::_error_slice, hexapod::Metrology::_error_uniq_>::copy (hexapod::Metrology::_error_slice *to, const hexapod::Metrology::_error_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Metrology::_error, hexapod::Metrology::_error_slice, hexapod::Metrology::_error_uniq_>::free (hexapod::Metrology::_error_slice *ptr);
template <>
hexapod::Metrology::_status_slice* DDS_DCPS_ArrayHelper < hexapod::Metrology::_status, hexapod::Metrology::_status_slice, hexapod::Metrology::_status_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Metrology::_status, hexapod::Metrology::_status_slice, hexapod::Metrology::_status_uniq_>::copy (hexapod::Metrology::_status_slice *to, const hexapod::Metrology::_status_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Metrology::_status, hexapod::Metrology::_status_slice, hexapod::Metrology::_status_uniq_>::free (hexapod::Metrology::_status_slice *ptr);
template <>
hexapod::TC::_error_slice* DDS_DCPS_ArrayHelper < hexapod::TC::_error, hexapod::TC::_error_slice, hexapod::TC::_error_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::TC::_error, hexapod::TC::_error_slice, hexapod::TC::_error_uniq_>::copy (hexapod::TC::_error_slice *to, const hexapod::TC::_error_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::TC::_error, hexapod::TC::_error_slice, hexapod::TC::_error_uniq_>::free (hexapod::TC::_error_slice *ptr);
template <>
hexapod::TC::_status_slice* DDS_DCPS_ArrayHelper < hexapod::TC::_status, hexapod::TC::_status_slice, hexapod::TC::_status_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::TC::_status, hexapod::TC::_status_slice, hexapod::TC::_status_uniq_>::copy (hexapod::TC::_status_slice *to, const hexapod::TC::_status_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::TC::_status, hexapod::TC::_status_slice, hexapod::TC::_status_uniq_>::free (hexapod::TC::_status_slice *ptr);
template <>
hexapod::TC::_setpoint_slice* DDS_DCPS_ArrayHelper < hexapod::TC::_setpoint, hexapod::TC::_setpoint_slice, hexapod::TC::_setpoint_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::TC::_setpoint, hexapod::TC::_setpoint_slice, hexapod::TC::_setpoint_uniq_>::copy (hexapod::TC::_setpoint_slice *to, const hexapod::TC::_setpoint_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::TC::_setpoint, hexapod::TC::_setpoint_slice, hexapod::TC::_setpoint_uniq_>::free (hexapod::TC::_setpoint_slice *ptr);
template <>
hexapod::TC::_temperature_slice* DDS_DCPS_ArrayHelper < hexapod::TC::_temperature, hexapod::TC::_temperature_slice, hexapod::TC::_temperature_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::TC::_temperature, hexapod::TC::_temperature_slice, hexapod::TC::_temperature_uniq_>::copy (hexapod::TC::_temperature_slice *to, const hexapod::TC::_temperature_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::TC::_temperature, hexapod::TC::_temperature_slice, hexapod::TC::_temperature_uniq_>::free (hexapod::TC::_temperature_slice *ptr);
template <>
hexapod::command_configureAzimuthCoeffsLut::_headingInfo_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_headingInfo, hexapod::command_configureAzimuthCoeffsLut::_headingInfo_slice, hexapod::command_configureAzimuthCoeffsLut::_headingInfo_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_headingInfo, hexapod::command_configureAzimuthCoeffsLut::_headingInfo_slice, hexapod::command_configureAzimuthCoeffsLut::_headingInfo_uniq_>::copy (hexapod::command_configureAzimuthCoeffsLut::_headingInfo_slice *to, const hexapod::command_configureAzimuthCoeffsLut::_headingInfo_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_headingInfo, hexapod::command_configureAzimuthCoeffsLut::_headingInfo_slice, hexapod::command_configureAzimuthCoeffsLut::_headingInfo_uniq_>::free (hexapod::command_configureAzimuthCoeffsLut::_headingInfo_slice *ptr);
template <>
hexapod::command_configureAzimuthCoeffsLut::_c1_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c1, hexapod::command_configureAzimuthCoeffsLut::_c1_slice, hexapod::command_configureAzimuthCoeffsLut::_c1_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c1, hexapod::command_configureAzimuthCoeffsLut::_c1_slice, hexapod::command_configureAzimuthCoeffsLut::_c1_uniq_>::copy (hexapod::command_configureAzimuthCoeffsLut::_c1_slice *to, const hexapod::command_configureAzimuthCoeffsLut::_c1_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c1, hexapod::command_configureAzimuthCoeffsLut::_c1_slice, hexapod::command_configureAzimuthCoeffsLut::_c1_uniq_>::free (hexapod::command_configureAzimuthCoeffsLut::_c1_slice *ptr);
template <>
hexapod::command_configureAzimuthCoeffsLut::_c2_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c2, hexapod::command_configureAzimuthCoeffsLut::_c2_slice, hexapod::command_configureAzimuthCoeffsLut::_c2_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c2, hexapod::command_configureAzimuthCoeffsLut::_c2_slice, hexapod::command_configureAzimuthCoeffsLut::_c2_uniq_>::copy (hexapod::command_configureAzimuthCoeffsLut::_c2_slice *to, const hexapod::command_configureAzimuthCoeffsLut::_c2_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c2, hexapod::command_configureAzimuthCoeffsLut::_c2_slice, hexapod::command_configureAzimuthCoeffsLut::_c2_uniq_>::free (hexapod::command_configureAzimuthCoeffsLut::_c2_slice *ptr);
template <>
hexapod::command_configureAzimuthCoeffsLut::_c3_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c3, hexapod::command_configureAzimuthCoeffsLut::_c3_slice, hexapod::command_configureAzimuthCoeffsLut::_c3_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c3, hexapod::command_configureAzimuthCoeffsLut::_c3_slice, hexapod::command_configureAzimuthCoeffsLut::_c3_uniq_>::copy (hexapod::command_configureAzimuthCoeffsLut::_c3_slice *to, const hexapod::command_configureAzimuthCoeffsLut::_c3_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c3, hexapod::command_configureAzimuthCoeffsLut::_c3_slice, hexapod::command_configureAzimuthCoeffsLut::_c3_uniq_>::free (hexapod::command_configureAzimuthCoeffsLut::_c3_slice *ptr);
template <>
hexapod::command_configureAzimuthCoeffsLut::_c4_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c4, hexapod::command_configureAzimuthCoeffsLut::_c4_slice, hexapod::command_configureAzimuthCoeffsLut::_c4_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c4, hexapod::command_configureAzimuthCoeffsLut::_c4_slice, hexapod::command_configureAzimuthCoeffsLut::_c4_uniq_>::copy (hexapod::command_configureAzimuthCoeffsLut::_c4_slice *to, const hexapod::command_configureAzimuthCoeffsLut::_c4_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c4, hexapod::command_configureAzimuthCoeffsLut::_c4_slice, hexapod::command_configureAzimuthCoeffsLut::_c4_uniq_>::free (hexapod::command_configureAzimuthCoeffsLut::_c4_slice *ptr);
template <>
hexapod::command_configureAzimuthCoeffsLut::_c5_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c5, hexapod::command_configureAzimuthCoeffsLut::_c5_slice, hexapod::command_configureAzimuthCoeffsLut::_c5_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c5, hexapod::command_configureAzimuthCoeffsLut::_c5_slice, hexapod::command_configureAzimuthCoeffsLut::_c5_uniq_>::copy (hexapod::command_configureAzimuthCoeffsLut::_c5_slice *to, const hexapod::command_configureAzimuthCoeffsLut::_c5_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c5, hexapod::command_configureAzimuthCoeffsLut::_c5_slice, hexapod::command_configureAzimuthCoeffsLut::_c5_uniq_>::free (hexapod::command_configureAzimuthCoeffsLut::_c5_slice *ptr);
template <>
hexapod::command_configureAzimuthCoeffsLut::_c6_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c6, hexapod::command_configureAzimuthCoeffsLut::_c6_slice, hexapod::command_configureAzimuthCoeffsLut::_c6_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c6, hexapod::command_configureAzimuthCoeffsLut::_c6_slice, hexapod::command_configureAzimuthCoeffsLut::_c6_uniq_>::copy (hexapod::command_configureAzimuthCoeffsLut::_c6_slice *to, const hexapod::command_configureAzimuthCoeffsLut::_c6_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthCoeffsLut::_c6, hexapod::command_configureAzimuthCoeffsLut::_c6_slice, hexapod::command_configureAzimuthCoeffsLut::_c6_uniq_>::free (hexapod::command_configureAzimuthCoeffsLut::_c6_slice *ptr);
template <>
hexapod::command_configureAzimuthRawLut::_headingInfo_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_headingInfo, hexapod::command_configureAzimuthRawLut::_headingInfo_slice, hexapod::command_configureAzimuthRawLut::_headingInfo_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_headingInfo, hexapod::command_configureAzimuthRawLut::_headingInfo_slice, hexapod::command_configureAzimuthRawLut::_headingInfo_uniq_>::copy (hexapod::command_configureAzimuthRawLut::_headingInfo_slice *to, const hexapod::command_configureAzimuthRawLut::_headingInfo_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_headingInfo, hexapod::command_configureAzimuthRawLut::_headingInfo_slice, hexapod::command_configureAzimuthRawLut::_headingInfo_uniq_>::free (hexapod::command_configureAzimuthRawLut::_headingInfo_slice *ptr);
template <>
hexapod::command_configureAzimuthRawLut::_fz1_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz1, hexapod::command_configureAzimuthRawLut::_fz1_slice, hexapod::command_configureAzimuthRawLut::_fz1_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz1, hexapod::command_configureAzimuthRawLut::_fz1_slice, hexapod::command_configureAzimuthRawLut::_fz1_uniq_>::copy (hexapod::command_configureAzimuthRawLut::_fz1_slice *to, const hexapod::command_configureAzimuthRawLut::_fz1_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz1, hexapod::command_configureAzimuthRawLut::_fz1_slice, hexapod::command_configureAzimuthRawLut::_fz1_uniq_>::free (hexapod::command_configureAzimuthRawLut::_fz1_slice *ptr);
template <>
hexapod::command_configureAzimuthRawLut::_fz2_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz2, hexapod::command_configureAzimuthRawLut::_fz2_slice, hexapod::command_configureAzimuthRawLut::_fz2_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz2, hexapod::command_configureAzimuthRawLut::_fz2_slice, hexapod::command_configureAzimuthRawLut::_fz2_uniq_>::copy (hexapod::command_configureAzimuthRawLut::_fz2_slice *to, const hexapod::command_configureAzimuthRawLut::_fz2_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz2, hexapod::command_configureAzimuthRawLut::_fz2_slice, hexapod::command_configureAzimuthRawLut::_fz2_uniq_>::free (hexapod::command_configureAzimuthRawLut::_fz2_slice *ptr);
template <>
hexapod::command_configureAzimuthRawLut::_fz3_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz3, hexapod::command_configureAzimuthRawLut::_fz3_slice, hexapod::command_configureAzimuthRawLut::_fz3_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz3, hexapod::command_configureAzimuthRawLut::_fz3_slice, hexapod::command_configureAzimuthRawLut::_fz3_uniq_>::copy (hexapod::command_configureAzimuthRawLut::_fz3_slice *to, const hexapod::command_configureAzimuthRawLut::_fz3_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz3, hexapod::command_configureAzimuthRawLut::_fz3_slice, hexapod::command_configureAzimuthRawLut::_fz3_uniq_>::free (hexapod::command_configureAzimuthRawLut::_fz3_slice *ptr);
template <>
hexapod::command_configureAzimuthRawLut::_fz4_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz4, hexapod::command_configureAzimuthRawLut::_fz4_slice, hexapod::command_configureAzimuthRawLut::_fz4_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz4, hexapod::command_configureAzimuthRawLut::_fz4_slice, hexapod::command_configureAzimuthRawLut::_fz4_uniq_>::copy (hexapod::command_configureAzimuthRawLut::_fz4_slice *to, const hexapod::command_configureAzimuthRawLut::_fz4_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz4, hexapod::command_configureAzimuthRawLut::_fz4_slice, hexapod::command_configureAzimuthRawLut::_fz4_uniq_>::free (hexapod::command_configureAzimuthRawLut::_fz4_slice *ptr);
template <>
hexapod::command_configureAzimuthRawLut::_fz5_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz5, hexapod::command_configureAzimuthRawLut::_fz5_slice, hexapod::command_configureAzimuthRawLut::_fz5_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz5, hexapod::command_configureAzimuthRawLut::_fz5_slice, hexapod::command_configureAzimuthRawLut::_fz5_uniq_>::copy (hexapod::command_configureAzimuthRawLut::_fz5_slice *to, const hexapod::command_configureAzimuthRawLut::_fz5_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz5, hexapod::command_configureAzimuthRawLut::_fz5_slice, hexapod::command_configureAzimuthRawLut::_fz5_uniq_>::free (hexapod::command_configureAzimuthRawLut::_fz5_slice *ptr);
template <>
hexapod::command_configureAzimuthRawLut::_fz6_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz6, hexapod::command_configureAzimuthRawLut::_fz6_slice, hexapod::command_configureAzimuthRawLut::_fz6_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz6, hexapod::command_configureAzimuthRawLut::_fz6_slice, hexapod::command_configureAzimuthRawLut::_fz6_uniq_>::copy (hexapod::command_configureAzimuthRawLut::_fz6_slice *to, const hexapod::command_configureAzimuthRawLut::_fz6_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureAzimuthRawLut::_fz6, hexapod::command_configureAzimuthRawLut::_fz6_slice, hexapod::command_configureAzimuthRawLut::_fz6_uniq_>::free (hexapod::command_configureAzimuthRawLut::_fz6_slice *ptr);
template <>
hexapod::command_configureElevationCoeffsLut::_headingInfo_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_headingInfo, hexapod::command_configureElevationCoeffsLut::_headingInfo_slice, hexapod::command_configureElevationCoeffsLut::_headingInfo_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_headingInfo, hexapod::command_configureElevationCoeffsLut::_headingInfo_slice, hexapod::command_configureElevationCoeffsLut::_headingInfo_uniq_>::copy (hexapod::command_configureElevationCoeffsLut::_headingInfo_slice *to, const hexapod::command_configureElevationCoeffsLut::_headingInfo_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_headingInfo, hexapod::command_configureElevationCoeffsLut::_headingInfo_slice, hexapod::command_configureElevationCoeffsLut::_headingInfo_uniq_>::free (hexapod::command_configureElevationCoeffsLut::_headingInfo_slice *ptr);
template <>
hexapod::command_configureElevationCoeffsLut::_c1_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c1, hexapod::command_configureElevationCoeffsLut::_c1_slice, hexapod::command_configureElevationCoeffsLut::_c1_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c1, hexapod::command_configureElevationCoeffsLut::_c1_slice, hexapod::command_configureElevationCoeffsLut::_c1_uniq_>::copy (hexapod::command_configureElevationCoeffsLut::_c1_slice *to, const hexapod::command_configureElevationCoeffsLut::_c1_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c1, hexapod::command_configureElevationCoeffsLut::_c1_slice, hexapod::command_configureElevationCoeffsLut::_c1_uniq_>::free (hexapod::command_configureElevationCoeffsLut::_c1_slice *ptr);
template <>
hexapod::command_configureElevationCoeffsLut::_c2_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c2, hexapod::command_configureElevationCoeffsLut::_c2_slice, hexapod::command_configureElevationCoeffsLut::_c2_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c2, hexapod::command_configureElevationCoeffsLut::_c2_slice, hexapod::command_configureElevationCoeffsLut::_c2_uniq_>::copy (hexapod::command_configureElevationCoeffsLut::_c2_slice *to, const hexapod::command_configureElevationCoeffsLut::_c2_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c2, hexapod::command_configureElevationCoeffsLut::_c2_slice, hexapod::command_configureElevationCoeffsLut::_c2_uniq_>::free (hexapod::command_configureElevationCoeffsLut::_c2_slice *ptr);
template <>
hexapod::command_configureElevationCoeffsLut::_c3_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c3, hexapod::command_configureElevationCoeffsLut::_c3_slice, hexapod::command_configureElevationCoeffsLut::_c3_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c3, hexapod::command_configureElevationCoeffsLut::_c3_slice, hexapod::command_configureElevationCoeffsLut::_c3_uniq_>::copy (hexapod::command_configureElevationCoeffsLut::_c3_slice *to, const hexapod::command_configureElevationCoeffsLut::_c3_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c3, hexapod::command_configureElevationCoeffsLut::_c3_slice, hexapod::command_configureElevationCoeffsLut::_c3_uniq_>::free (hexapod::command_configureElevationCoeffsLut::_c3_slice *ptr);
template <>
hexapod::command_configureElevationCoeffsLut::_c4_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c4, hexapod::command_configureElevationCoeffsLut::_c4_slice, hexapod::command_configureElevationCoeffsLut::_c4_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c4, hexapod::command_configureElevationCoeffsLut::_c4_slice, hexapod::command_configureElevationCoeffsLut::_c4_uniq_>::copy (hexapod::command_configureElevationCoeffsLut::_c4_slice *to, const hexapod::command_configureElevationCoeffsLut::_c4_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c4, hexapod::command_configureElevationCoeffsLut::_c4_slice, hexapod::command_configureElevationCoeffsLut::_c4_uniq_>::free (hexapod::command_configureElevationCoeffsLut::_c4_slice *ptr);
template <>
hexapod::command_configureElevationCoeffsLut::_c5_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c5, hexapod::command_configureElevationCoeffsLut::_c5_slice, hexapod::command_configureElevationCoeffsLut::_c5_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c5, hexapod::command_configureElevationCoeffsLut::_c5_slice, hexapod::command_configureElevationCoeffsLut::_c5_uniq_>::copy (hexapod::command_configureElevationCoeffsLut::_c5_slice *to, const hexapod::command_configureElevationCoeffsLut::_c5_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c5, hexapod::command_configureElevationCoeffsLut::_c5_slice, hexapod::command_configureElevationCoeffsLut::_c5_uniq_>::free (hexapod::command_configureElevationCoeffsLut::_c5_slice *ptr);
template <>
hexapod::command_configureElevationCoeffsLut::_c6_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c6, hexapod::command_configureElevationCoeffsLut::_c6_slice, hexapod::command_configureElevationCoeffsLut::_c6_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c6, hexapod::command_configureElevationCoeffsLut::_c6_slice, hexapod::command_configureElevationCoeffsLut::_c6_uniq_>::copy (hexapod::command_configureElevationCoeffsLut::_c6_slice *to, const hexapod::command_configureElevationCoeffsLut::_c6_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationCoeffsLut::_c6, hexapod::command_configureElevationCoeffsLut::_c6_slice, hexapod::command_configureElevationCoeffsLut::_c6_uniq_>::free (hexapod::command_configureElevationCoeffsLut::_c6_slice *ptr);
template <>
hexapod::command_configureElevationRawLut::_headingInfo_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_headingInfo, hexapod::command_configureElevationRawLut::_headingInfo_slice, hexapod::command_configureElevationRawLut::_headingInfo_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_headingInfo, hexapod::command_configureElevationRawLut::_headingInfo_slice, hexapod::command_configureElevationRawLut::_headingInfo_uniq_>::copy (hexapod::command_configureElevationRawLut::_headingInfo_slice *to, const hexapod::command_configureElevationRawLut::_headingInfo_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_headingInfo, hexapod::command_configureElevationRawLut::_headingInfo_slice, hexapod::command_configureElevationRawLut::_headingInfo_uniq_>::free (hexapod::command_configureElevationRawLut::_headingInfo_slice *ptr);
template <>
hexapod::command_configureElevationRawLut::_fz1_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz1, hexapod::command_configureElevationRawLut::_fz1_slice, hexapod::command_configureElevationRawLut::_fz1_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz1, hexapod::command_configureElevationRawLut::_fz1_slice, hexapod::command_configureElevationRawLut::_fz1_uniq_>::copy (hexapod::command_configureElevationRawLut::_fz1_slice *to, const hexapod::command_configureElevationRawLut::_fz1_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz1, hexapod::command_configureElevationRawLut::_fz1_slice, hexapod::command_configureElevationRawLut::_fz1_uniq_>::free (hexapod::command_configureElevationRawLut::_fz1_slice *ptr);
template <>
hexapod::command_configureElevationRawLut::_fz2_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz2, hexapod::command_configureElevationRawLut::_fz2_slice, hexapod::command_configureElevationRawLut::_fz2_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz2, hexapod::command_configureElevationRawLut::_fz2_slice, hexapod::command_configureElevationRawLut::_fz2_uniq_>::copy (hexapod::command_configureElevationRawLut::_fz2_slice *to, const hexapod::command_configureElevationRawLut::_fz2_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz2, hexapod::command_configureElevationRawLut::_fz2_slice, hexapod::command_configureElevationRawLut::_fz2_uniq_>::free (hexapod::command_configureElevationRawLut::_fz2_slice *ptr);
template <>
hexapod::command_configureElevationRawLut::_fz3_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz3, hexapod::command_configureElevationRawLut::_fz3_slice, hexapod::command_configureElevationRawLut::_fz3_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz3, hexapod::command_configureElevationRawLut::_fz3_slice, hexapod::command_configureElevationRawLut::_fz3_uniq_>::copy (hexapod::command_configureElevationRawLut::_fz3_slice *to, const hexapod::command_configureElevationRawLut::_fz3_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz3, hexapod::command_configureElevationRawLut::_fz3_slice, hexapod::command_configureElevationRawLut::_fz3_uniq_>::free (hexapod::command_configureElevationRawLut::_fz3_slice *ptr);
template <>
hexapod::command_configureElevationRawLut::_fz4_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz4, hexapod::command_configureElevationRawLut::_fz4_slice, hexapod::command_configureElevationRawLut::_fz4_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz4, hexapod::command_configureElevationRawLut::_fz4_slice, hexapod::command_configureElevationRawLut::_fz4_uniq_>::copy (hexapod::command_configureElevationRawLut::_fz4_slice *to, const hexapod::command_configureElevationRawLut::_fz4_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz4, hexapod::command_configureElevationRawLut::_fz4_slice, hexapod::command_configureElevationRawLut::_fz4_uniq_>::free (hexapod::command_configureElevationRawLut::_fz4_slice *ptr);
template <>
hexapod::command_configureElevationRawLut::_fz5_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz5, hexapod::command_configureElevationRawLut::_fz5_slice, hexapod::command_configureElevationRawLut::_fz5_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz5, hexapod::command_configureElevationRawLut::_fz5_slice, hexapod::command_configureElevationRawLut::_fz5_uniq_>::copy (hexapod::command_configureElevationRawLut::_fz5_slice *to, const hexapod::command_configureElevationRawLut::_fz5_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz5, hexapod::command_configureElevationRawLut::_fz5_slice, hexapod::command_configureElevationRawLut::_fz5_uniq_>::free (hexapod::command_configureElevationRawLut::_fz5_slice *ptr);
template <>
hexapod::command_configureElevationRawLut::_fz6_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz6, hexapod::command_configureElevationRawLut::_fz6_slice, hexapod::command_configureElevationRawLut::_fz6_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz6, hexapod::command_configureElevationRawLut::_fz6_slice, hexapod::command_configureElevationRawLut::_fz6_uniq_>::copy (hexapod::command_configureElevationRawLut::_fz6_slice *to, const hexapod::command_configureElevationRawLut::_fz6_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureElevationRawLut::_fz6, hexapod::command_configureElevationRawLut::_fz6_slice, hexapod::command_configureElevationRawLut::_fz6_uniq_>::free (hexapod::command_configureElevationRawLut::_fz6_slice *ptr);
template <>
hexapod::command_configureTemperatureCoeffsLut::_headingInfo_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_headingInfo, hexapod::command_configureTemperatureCoeffsLut::_headingInfo_slice, hexapod::command_configureTemperatureCoeffsLut::_headingInfo_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_headingInfo, hexapod::command_configureTemperatureCoeffsLut::_headingInfo_slice, hexapod::command_configureTemperatureCoeffsLut::_headingInfo_uniq_>::copy (hexapod::command_configureTemperatureCoeffsLut::_headingInfo_slice *to, const hexapod::command_configureTemperatureCoeffsLut::_headingInfo_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_headingInfo, hexapod::command_configureTemperatureCoeffsLut::_headingInfo_slice, hexapod::command_configureTemperatureCoeffsLut::_headingInfo_uniq_>::free (hexapod::command_configureTemperatureCoeffsLut::_headingInfo_slice *ptr);
template <>
hexapod::command_configureTemperatureCoeffsLut::_c1_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c1, hexapod::command_configureTemperatureCoeffsLut::_c1_slice, hexapod::command_configureTemperatureCoeffsLut::_c1_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c1, hexapod::command_configureTemperatureCoeffsLut::_c1_slice, hexapod::command_configureTemperatureCoeffsLut::_c1_uniq_>::copy (hexapod::command_configureTemperatureCoeffsLut::_c1_slice *to, const hexapod::command_configureTemperatureCoeffsLut::_c1_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c1, hexapod::command_configureTemperatureCoeffsLut::_c1_slice, hexapod::command_configureTemperatureCoeffsLut::_c1_uniq_>::free (hexapod::command_configureTemperatureCoeffsLut::_c1_slice *ptr);
template <>
hexapod::command_configureTemperatureCoeffsLut::_c2_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c2, hexapod::command_configureTemperatureCoeffsLut::_c2_slice, hexapod::command_configureTemperatureCoeffsLut::_c2_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c2, hexapod::command_configureTemperatureCoeffsLut::_c2_slice, hexapod::command_configureTemperatureCoeffsLut::_c2_uniq_>::copy (hexapod::command_configureTemperatureCoeffsLut::_c2_slice *to, const hexapod::command_configureTemperatureCoeffsLut::_c2_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c2, hexapod::command_configureTemperatureCoeffsLut::_c2_slice, hexapod::command_configureTemperatureCoeffsLut::_c2_uniq_>::free (hexapod::command_configureTemperatureCoeffsLut::_c2_slice *ptr);
template <>
hexapod::command_configureTemperatureCoeffsLut::_c3_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c3, hexapod::command_configureTemperatureCoeffsLut::_c3_slice, hexapod::command_configureTemperatureCoeffsLut::_c3_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c3, hexapod::command_configureTemperatureCoeffsLut::_c3_slice, hexapod::command_configureTemperatureCoeffsLut::_c3_uniq_>::copy (hexapod::command_configureTemperatureCoeffsLut::_c3_slice *to, const hexapod::command_configureTemperatureCoeffsLut::_c3_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c3, hexapod::command_configureTemperatureCoeffsLut::_c3_slice, hexapod::command_configureTemperatureCoeffsLut::_c3_uniq_>::free (hexapod::command_configureTemperatureCoeffsLut::_c3_slice *ptr);
template <>
hexapod::command_configureTemperatureCoeffsLut::_c4_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c4, hexapod::command_configureTemperatureCoeffsLut::_c4_slice, hexapod::command_configureTemperatureCoeffsLut::_c4_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c4, hexapod::command_configureTemperatureCoeffsLut::_c4_slice, hexapod::command_configureTemperatureCoeffsLut::_c4_uniq_>::copy (hexapod::command_configureTemperatureCoeffsLut::_c4_slice *to, const hexapod::command_configureTemperatureCoeffsLut::_c4_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c4, hexapod::command_configureTemperatureCoeffsLut::_c4_slice, hexapod::command_configureTemperatureCoeffsLut::_c4_uniq_>::free (hexapod::command_configureTemperatureCoeffsLut::_c4_slice *ptr);
template <>
hexapod::command_configureTemperatureCoeffsLut::_c5_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c5, hexapod::command_configureTemperatureCoeffsLut::_c5_slice, hexapod::command_configureTemperatureCoeffsLut::_c5_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c5, hexapod::command_configureTemperatureCoeffsLut::_c5_slice, hexapod::command_configureTemperatureCoeffsLut::_c5_uniq_>::copy (hexapod::command_configureTemperatureCoeffsLut::_c5_slice *to, const hexapod::command_configureTemperatureCoeffsLut::_c5_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c5, hexapod::command_configureTemperatureCoeffsLut::_c5_slice, hexapod::command_configureTemperatureCoeffsLut::_c5_uniq_>::free (hexapod::command_configureTemperatureCoeffsLut::_c5_slice *ptr);
template <>
hexapod::command_configureTemperatureCoeffsLut::_c6_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c6, hexapod::command_configureTemperatureCoeffsLut::_c6_slice, hexapod::command_configureTemperatureCoeffsLut::_c6_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c6, hexapod::command_configureTemperatureCoeffsLut::_c6_slice, hexapod::command_configureTemperatureCoeffsLut::_c6_uniq_>::copy (hexapod::command_configureTemperatureCoeffsLut::_c6_slice *to, const hexapod::command_configureTemperatureCoeffsLut::_c6_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureTemperatureCoeffsLut::_c6, hexapod::command_configureTemperatureCoeffsLut::_c6_slice, hexapod::command_configureTemperatureCoeffsLut::_c6_uniq_>::free (hexapod::command_configureTemperatureCoeffsLut::_c6_slice *ptr);




#endif 
