//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: sal_domeDcps.h
//  Source: sal_domeDcps.idl
//  Generated: Thu Aug 23 17:17:00 2018
//  OpenSplice V6.4.140320OSS
//  
//******************************************************************
#ifndef _SAL_DOMEDCPS_H_
#define _SAL_DOMEDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps.h"
#include "sal_dome.h"


namespace dome
{

   class SummaryTypeSupportInterface;

   typedef SummaryTypeSupportInterface * SummaryTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < SummaryTypeSupportInterface> SummaryTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < SummaryTypeSupportInterface> SummaryTypeSupportInterface_out;


   class SummaryDataWriter;

   typedef SummaryDataWriter * SummaryDataWriter_ptr;
   typedef DDS_DCPSInterface_var < SummaryDataWriter> SummaryDataWriter_var;
   typedef DDS_DCPSInterface_out < SummaryDataWriter> SummaryDataWriter_out;


   class SummaryDataReader;

   typedef SummaryDataReader * SummaryDataReader_ptr;
   typedef DDS_DCPSInterface_var < SummaryDataReader> SummaryDataReader_var;
   typedef DDS_DCPSInterface_out < SummaryDataReader> SummaryDataReader_out;


   class SummaryDataReaderView;

   typedef SummaryDataReaderView * SummaryDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < SummaryDataReaderView> SummaryDataReaderView_var;
   typedef DDS_DCPSInterface_out < SummaryDataReaderView> SummaryDataReaderView_out;


   class command_CloseShutterTypeSupportInterface;

   typedef command_CloseShutterTypeSupportInterface * command_CloseShutterTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_CloseShutterTypeSupportInterface> command_CloseShutterTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_CloseShutterTypeSupportInterface> command_CloseShutterTypeSupportInterface_out;


   class command_CloseShutterDataWriter;

   typedef command_CloseShutterDataWriter * command_CloseShutterDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_CloseShutterDataWriter> command_CloseShutterDataWriter_var;
   typedef DDS_DCPSInterface_out < command_CloseShutterDataWriter> command_CloseShutterDataWriter_out;


   class command_CloseShutterDataReader;

   typedef command_CloseShutterDataReader * command_CloseShutterDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_CloseShutterDataReader> command_CloseShutterDataReader_var;
   typedef DDS_DCPSInterface_out < command_CloseShutterDataReader> command_CloseShutterDataReader_out;


   class command_CloseShutterDataReaderView;

   typedef command_CloseShutterDataReaderView * command_CloseShutterDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_CloseShutterDataReaderView> command_CloseShutterDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_CloseShutterDataReaderView> command_CloseShutterDataReaderView_out;


   class command_CrawlTypeSupportInterface;

   typedef command_CrawlTypeSupportInterface * command_CrawlTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_CrawlTypeSupportInterface> command_CrawlTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_CrawlTypeSupportInterface> command_CrawlTypeSupportInterface_out;


   class command_CrawlDataWriter;

   typedef command_CrawlDataWriter * command_CrawlDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_CrawlDataWriter> command_CrawlDataWriter_var;
   typedef DDS_DCPSInterface_out < command_CrawlDataWriter> command_CrawlDataWriter_out;


   class command_CrawlDataReader;

   typedef command_CrawlDataReader * command_CrawlDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_CrawlDataReader> command_CrawlDataReader_var;
   typedef DDS_DCPSInterface_out < command_CrawlDataReader> command_CrawlDataReader_out;


   class command_CrawlDataReaderView;

   typedef command_CrawlDataReaderView * command_CrawlDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_CrawlDataReaderView> command_CrawlDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_CrawlDataReaderView> command_CrawlDataReaderView_out;


   class command_MoveTypeSupportInterface;

   typedef command_MoveTypeSupportInterface * command_MoveTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_MoveTypeSupportInterface> command_MoveTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_MoveTypeSupportInterface> command_MoveTypeSupportInterface_out;


   class command_MoveDataWriter;

   typedef command_MoveDataWriter * command_MoveDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_MoveDataWriter> command_MoveDataWriter_var;
   typedef DDS_DCPSInterface_out < command_MoveDataWriter> command_MoveDataWriter_out;


   class command_MoveDataReader;

   typedef command_MoveDataReader * command_MoveDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_MoveDataReader> command_MoveDataReader_var;
   typedef DDS_DCPSInterface_out < command_MoveDataReader> command_MoveDataReader_out;


   class command_MoveDataReaderView;

   typedef command_MoveDataReaderView * command_MoveDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_MoveDataReaderView> command_MoveDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_MoveDataReaderView> command_MoveDataReaderView_out;


   class command_OpenShutterTypeSupportInterface;

   typedef command_OpenShutterTypeSupportInterface * command_OpenShutterTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_OpenShutterTypeSupportInterface> command_OpenShutterTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_OpenShutterTypeSupportInterface> command_OpenShutterTypeSupportInterface_out;


   class command_OpenShutterDataWriter;

   typedef command_OpenShutterDataWriter * command_OpenShutterDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_OpenShutterDataWriter> command_OpenShutterDataWriter_var;
   typedef DDS_DCPSInterface_out < command_OpenShutterDataWriter> command_OpenShutterDataWriter_out;


   class command_OpenShutterDataReader;

   typedef command_OpenShutterDataReader * command_OpenShutterDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_OpenShutterDataReader> command_OpenShutterDataReader_var;
   typedef DDS_DCPSInterface_out < command_OpenShutterDataReader> command_OpenShutterDataReader_out;


   class command_OpenShutterDataReaderView;

   typedef command_OpenShutterDataReaderView * command_OpenShutterDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_OpenShutterDataReaderView> command_OpenShutterDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_OpenShutterDataReaderView> command_OpenShutterDataReaderView_out;


   class command_ParkTypeSupportInterface;

   typedef command_ParkTypeSupportInterface * command_ParkTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_ParkTypeSupportInterface> command_ParkTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_ParkTypeSupportInterface> command_ParkTypeSupportInterface_out;


   class command_ParkDataWriter;

   typedef command_ParkDataWriter * command_ParkDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_ParkDataWriter> command_ParkDataWriter_var;
   typedef DDS_DCPSInterface_out < command_ParkDataWriter> command_ParkDataWriter_out;


   class command_ParkDataReader;

   typedef command_ParkDataReader * command_ParkDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_ParkDataReader> command_ParkDataReader_var;
   typedef DDS_DCPSInterface_out < command_ParkDataReader> command_ParkDataReader_out;


   class command_ParkDataReaderView;

   typedef command_ParkDataReaderView * command_ParkDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_ParkDataReaderView> command_ParkDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_ParkDataReaderView> command_ParkDataReaderView_out;


   class command_SetLouversTypeSupportInterface;

   typedef command_SetLouversTypeSupportInterface * command_SetLouversTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_SetLouversTypeSupportInterface> command_SetLouversTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_SetLouversTypeSupportInterface> command_SetLouversTypeSupportInterface_out;


   class command_SetLouversDataWriter;

   typedef command_SetLouversDataWriter * command_SetLouversDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_SetLouversDataWriter> command_SetLouversDataWriter_var;
   typedef DDS_DCPSInterface_out < command_SetLouversDataWriter> command_SetLouversDataWriter_out;


   class command_SetLouversDataReader;

   typedef command_SetLouversDataReader * command_SetLouversDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_SetLouversDataReader> command_SetLouversDataReader_var;
   typedef DDS_DCPSInterface_out < command_SetLouversDataReader> command_SetLouversDataReader_out;


   class command_SetLouversDataReaderView;

   typedef command_SetLouversDataReaderView * command_SetLouversDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_SetLouversDataReaderView> command_SetLouversDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_SetLouversDataReaderView> command_SetLouversDataReaderView_out;


   class command_StopShutterTypeSupportInterface;

   typedef command_StopShutterTypeSupportInterface * command_StopShutterTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_StopShutterTypeSupportInterface> command_StopShutterTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_StopShutterTypeSupportInterface> command_StopShutterTypeSupportInterface_out;


   class command_StopShutterDataWriter;

   typedef command_StopShutterDataWriter * command_StopShutterDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_StopShutterDataWriter> command_StopShutterDataWriter_var;
   typedef DDS_DCPSInterface_out < command_StopShutterDataWriter> command_StopShutterDataWriter_out;


   class command_StopShutterDataReader;

   typedef command_StopShutterDataReader * command_StopShutterDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_StopShutterDataReader> command_StopShutterDataReader_var;
   typedef DDS_DCPSInterface_out < command_StopShutterDataReader> command_StopShutterDataReader_out;


   class command_StopShutterDataReaderView;

   typedef command_StopShutterDataReaderView * command_StopShutterDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_StopShutterDataReaderView> command_StopShutterDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_StopShutterDataReaderView> command_StopShutterDataReaderView_out;


   class logevent_StateChangedTypeSupportInterface;

   typedef logevent_StateChangedTypeSupportInterface * logevent_StateChangedTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_StateChangedTypeSupportInterface> logevent_StateChangedTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_StateChangedTypeSupportInterface> logevent_StateChangedTypeSupportInterface_out;


   class logevent_StateChangedDataWriter;

   typedef logevent_StateChangedDataWriter * logevent_StateChangedDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_StateChangedDataWriter> logevent_StateChangedDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_StateChangedDataWriter> logevent_StateChangedDataWriter_out;


   class logevent_StateChangedDataReader;

   typedef logevent_StateChangedDataReader * logevent_StateChangedDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_StateChangedDataReader> logevent_StateChangedDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_StateChangedDataReader> logevent_StateChangedDataReader_out;


   class logevent_StateChangedDataReaderView;

   typedef logevent_StateChangedDataReaderView * logevent_StateChangedDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_StateChangedDataReaderView> logevent_StateChangedDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_StateChangedDataReaderView> logevent_StateChangedDataReaderView_out;


   class commandTypeSupportInterface;

   typedef commandTypeSupportInterface * commandTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < commandTypeSupportInterface> commandTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < commandTypeSupportInterface> commandTypeSupportInterface_out;


   class commandDataWriter;

   typedef commandDataWriter * commandDataWriter_ptr;
   typedef DDS_DCPSInterface_var < commandDataWriter> commandDataWriter_var;
   typedef DDS_DCPSInterface_out < commandDataWriter> commandDataWriter_out;


   class commandDataReader;

   typedef commandDataReader * commandDataReader_ptr;
   typedef DDS_DCPSInterface_var < commandDataReader> commandDataReader_var;
   typedef DDS_DCPSInterface_out < commandDataReader> commandDataReader_out;


   class commandDataReaderView;

   typedef commandDataReaderView * commandDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < commandDataReaderView> commandDataReaderView_var;
   typedef DDS_DCPSInterface_out < commandDataReaderView> commandDataReaderView_out;


   class ackcmdTypeSupportInterface;

   typedef ackcmdTypeSupportInterface * ackcmdTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ackcmdTypeSupportInterface> ackcmdTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ackcmdTypeSupportInterface> ackcmdTypeSupportInterface_out;


   class ackcmdDataWriter;

   typedef ackcmdDataWriter * ackcmdDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ackcmdDataWriter> ackcmdDataWriter_var;
   typedef DDS_DCPSInterface_out < ackcmdDataWriter> ackcmdDataWriter_out;


   class ackcmdDataReader;

   typedef ackcmdDataReader * ackcmdDataReader_ptr;
   typedef DDS_DCPSInterface_var < ackcmdDataReader> ackcmdDataReader_var;
   typedef DDS_DCPSInterface_out < ackcmdDataReader> ackcmdDataReader_out;


   class ackcmdDataReaderView;

   typedef ackcmdDataReaderView * ackcmdDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ackcmdDataReaderView> ackcmdDataReaderView_var;
   typedef DDS_DCPSInterface_out < ackcmdDataReaderView> ackcmdDataReaderView_out;


   class logeventTypeSupportInterface;

   typedef logeventTypeSupportInterface * logeventTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logeventTypeSupportInterface> logeventTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logeventTypeSupportInterface> logeventTypeSupportInterface_out;


   class logeventDataWriter;

   typedef logeventDataWriter * logeventDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logeventDataWriter> logeventDataWriter_var;
   typedef DDS_DCPSInterface_out < logeventDataWriter> logeventDataWriter_out;


   class logeventDataReader;

   typedef logeventDataReader * logeventDataReader_ptr;
   typedef DDS_DCPSInterface_var < logeventDataReader> logeventDataReader_var;
   typedef DDS_DCPSInterface_out < logeventDataReader> logeventDataReader_out;


   class logeventDataReaderView;

   typedef logeventDataReaderView * logeventDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logeventDataReaderView> logeventDataReaderView_var;
   typedef DDS_DCPSInterface_out < logeventDataReaderView> logeventDataReaderView_out;

   struct SummarySeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Summary, struct SummarySeq_uniq_> SummarySeq;
   typedef DDS_DCPSSequence_var < SummarySeq> SummarySeq_var;
   typedef DDS_DCPSSequence_out < SummarySeq> SummarySeq_out;
   class SummaryTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef SummaryTypeSupportInterface_ptr _ptr_type;
      typedef SummaryTypeSupportInterface_var _var_type;

      static SummaryTypeSupportInterface_ptr _duplicate (SummaryTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static SummaryTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static SummaryTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static SummaryTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      SummaryTypeSupportInterface_ptr _this () { return this; }


   protected:
      SummaryTypeSupportInterface () {};
      ~SummaryTypeSupportInterface () {};
   private:
      SummaryTypeSupportInterface (const SummaryTypeSupportInterface &);
      SummaryTypeSupportInterface & operator = (const SummaryTypeSupportInterface &);
   };

   class SummaryDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef SummaryDataWriter_ptr _ptr_type;
      typedef SummaryDataWriter_var _var_type;

      static SummaryDataWriter_ptr _duplicate (SummaryDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static SummaryDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static SummaryDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static SummaryDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      SummaryDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Summary& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Summary& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Summary& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Summary& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Summary& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Summary& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Summary& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Summary& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Summary& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Summary& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Summary& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Summary& instance_data) = 0;

   protected:
      SummaryDataWriter () {};
      ~SummaryDataWriter () {};
   private:
      SummaryDataWriter (const SummaryDataWriter &);
      SummaryDataWriter & operator = (const SummaryDataWriter &);
   };

   class SummaryDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef SummaryDataReader_ptr _ptr_type;
      typedef SummaryDataReader_var _var_type;

      static SummaryDataReader_ptr _duplicate (SummaryDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static SummaryDataReader_ptr _narrow (DDS::Object_ptr obj);
      static SummaryDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static SummaryDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      SummaryDataReader_ptr _this () { return this; }

      virtual DDS::Long read (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Summary& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Summary& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Summary& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Summary& instance) = 0;

   protected:
      SummaryDataReader () {};
      ~SummaryDataReader () {};
   private:
      SummaryDataReader (const SummaryDataReader &);
      SummaryDataReader & operator = (const SummaryDataReader &);
   };

   class SummaryDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef SummaryDataReaderView_ptr _ptr_type;
      typedef SummaryDataReaderView_var _var_type;

      static SummaryDataReaderView_ptr _duplicate (SummaryDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static SummaryDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static SummaryDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static SummaryDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      SummaryDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Summary& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Summary& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (SummarySeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Summary& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Summary& instance) = 0;

   protected:
      SummaryDataReaderView () {};
      ~SummaryDataReaderView () {};
   private:
      SummaryDataReaderView (const SummaryDataReaderView &);
      SummaryDataReaderView & operator = (const SummaryDataReaderView &);
   };

   struct command_CloseShutterSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_CloseShutter, struct command_CloseShutterSeq_uniq_> command_CloseShutterSeq;
   typedef DDS_DCPSSequence_var < command_CloseShutterSeq> command_CloseShutterSeq_var;
   typedef DDS_DCPSSequence_out < command_CloseShutterSeq> command_CloseShutterSeq_out;
   class command_CloseShutterTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_CloseShutterTypeSupportInterface_ptr _ptr_type;
      typedef command_CloseShutterTypeSupportInterface_var _var_type;

      static command_CloseShutterTypeSupportInterface_ptr _duplicate (command_CloseShutterTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_CloseShutterTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_CloseShutterTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_CloseShutterTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_CloseShutterTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_CloseShutterTypeSupportInterface () {};
      ~command_CloseShutterTypeSupportInterface () {};
   private:
      command_CloseShutterTypeSupportInterface (const command_CloseShutterTypeSupportInterface &);
      command_CloseShutterTypeSupportInterface & operator = (const command_CloseShutterTypeSupportInterface &);
   };

   class command_CloseShutterDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_CloseShutterDataWriter_ptr _ptr_type;
      typedef command_CloseShutterDataWriter_var _var_type;

      static command_CloseShutterDataWriter_ptr _duplicate (command_CloseShutterDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_CloseShutterDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_CloseShutterDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_CloseShutterDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_CloseShutterDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_CloseShutter& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_CloseShutter& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_CloseShutter& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_CloseShutter& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_CloseShutter& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_CloseShutter& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_CloseShutter& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_CloseShutter& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_CloseShutter& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_CloseShutter& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_CloseShutter& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_CloseShutter& instance_data) = 0;

   protected:
      command_CloseShutterDataWriter () {};
      ~command_CloseShutterDataWriter () {};
   private:
      command_CloseShutterDataWriter (const command_CloseShutterDataWriter &);
      command_CloseShutterDataWriter & operator = (const command_CloseShutterDataWriter &);
   };

   class command_CloseShutterDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_CloseShutterDataReader_ptr _ptr_type;
      typedef command_CloseShutterDataReader_var _var_type;

      static command_CloseShutterDataReader_ptr _duplicate (command_CloseShutterDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_CloseShutterDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_CloseShutterDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_CloseShutterDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_CloseShutterDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_CloseShutter& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_CloseShutter& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_CloseShutter& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_CloseShutter& instance) = 0;

   protected:
      command_CloseShutterDataReader () {};
      ~command_CloseShutterDataReader () {};
   private:
      command_CloseShutterDataReader (const command_CloseShutterDataReader &);
      command_CloseShutterDataReader & operator = (const command_CloseShutterDataReader &);
   };

   class command_CloseShutterDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_CloseShutterDataReaderView_ptr _ptr_type;
      typedef command_CloseShutterDataReaderView_var _var_type;

      static command_CloseShutterDataReaderView_ptr _duplicate (command_CloseShutterDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_CloseShutterDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_CloseShutterDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_CloseShutterDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_CloseShutterDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_CloseShutter& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_CloseShutter& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_CloseShutterSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_CloseShutter& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_CloseShutter& instance) = 0;

   protected:
      command_CloseShutterDataReaderView () {};
      ~command_CloseShutterDataReaderView () {};
   private:
      command_CloseShutterDataReaderView (const command_CloseShutterDataReaderView &);
      command_CloseShutterDataReaderView & operator = (const command_CloseShutterDataReaderView &);
   };

   struct command_CrawlSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_Crawl, struct command_CrawlSeq_uniq_> command_CrawlSeq;
   typedef DDS_DCPSSequence_var < command_CrawlSeq> command_CrawlSeq_var;
   typedef DDS_DCPSSequence_out < command_CrawlSeq> command_CrawlSeq_out;
   class command_CrawlTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_CrawlTypeSupportInterface_ptr _ptr_type;
      typedef command_CrawlTypeSupportInterface_var _var_type;

      static command_CrawlTypeSupportInterface_ptr _duplicate (command_CrawlTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_CrawlTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_CrawlTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_CrawlTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_CrawlTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_CrawlTypeSupportInterface () {};
      ~command_CrawlTypeSupportInterface () {};
   private:
      command_CrawlTypeSupportInterface (const command_CrawlTypeSupportInterface &);
      command_CrawlTypeSupportInterface & operator = (const command_CrawlTypeSupportInterface &);
   };

   class command_CrawlDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_CrawlDataWriter_ptr _ptr_type;
      typedef command_CrawlDataWriter_var _var_type;

      static command_CrawlDataWriter_ptr _duplicate (command_CrawlDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_CrawlDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_CrawlDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_CrawlDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_CrawlDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_Crawl& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_Crawl& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_Crawl& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_Crawl& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_Crawl& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_Crawl& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_Crawl& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_Crawl& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_Crawl& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_Crawl& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_Crawl& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_Crawl& instance_data) = 0;

   protected:
      command_CrawlDataWriter () {};
      ~command_CrawlDataWriter () {};
   private:
      command_CrawlDataWriter (const command_CrawlDataWriter &);
      command_CrawlDataWriter & operator = (const command_CrawlDataWriter &);
   };

   class command_CrawlDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_CrawlDataReader_ptr _ptr_type;
      typedef command_CrawlDataReader_var _var_type;

      static command_CrawlDataReader_ptr _duplicate (command_CrawlDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_CrawlDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_CrawlDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_CrawlDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_CrawlDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_Crawl& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_Crawl& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_Crawl& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_Crawl& instance) = 0;

   protected:
      command_CrawlDataReader () {};
      ~command_CrawlDataReader () {};
   private:
      command_CrawlDataReader (const command_CrawlDataReader &);
      command_CrawlDataReader & operator = (const command_CrawlDataReader &);
   };

   class command_CrawlDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_CrawlDataReaderView_ptr _ptr_type;
      typedef command_CrawlDataReaderView_var _var_type;

      static command_CrawlDataReaderView_ptr _duplicate (command_CrawlDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_CrawlDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_CrawlDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_CrawlDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_CrawlDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_Crawl& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_Crawl& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_CrawlSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_Crawl& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_Crawl& instance) = 0;

   protected:
      command_CrawlDataReaderView () {};
      ~command_CrawlDataReaderView () {};
   private:
      command_CrawlDataReaderView (const command_CrawlDataReaderView &);
      command_CrawlDataReaderView & operator = (const command_CrawlDataReaderView &);
   };

   struct command_MoveSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_Move, struct command_MoveSeq_uniq_> command_MoveSeq;
   typedef DDS_DCPSSequence_var < command_MoveSeq> command_MoveSeq_var;
   typedef DDS_DCPSSequence_out < command_MoveSeq> command_MoveSeq_out;
   class command_MoveTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_MoveTypeSupportInterface_ptr _ptr_type;
      typedef command_MoveTypeSupportInterface_var _var_type;

      static command_MoveTypeSupportInterface_ptr _duplicate (command_MoveTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_MoveTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_MoveTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_MoveTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_MoveTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_MoveTypeSupportInterface () {};
      ~command_MoveTypeSupportInterface () {};
   private:
      command_MoveTypeSupportInterface (const command_MoveTypeSupportInterface &);
      command_MoveTypeSupportInterface & operator = (const command_MoveTypeSupportInterface &);
   };

   class command_MoveDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_MoveDataWriter_ptr _ptr_type;
      typedef command_MoveDataWriter_var _var_type;

      static command_MoveDataWriter_ptr _duplicate (command_MoveDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_MoveDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_MoveDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_MoveDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_MoveDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_Move& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_Move& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_Move& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_Move& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_Move& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_Move& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_Move& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_Move& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_Move& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_Move& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_Move& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_Move& instance_data) = 0;

   protected:
      command_MoveDataWriter () {};
      ~command_MoveDataWriter () {};
   private:
      command_MoveDataWriter (const command_MoveDataWriter &);
      command_MoveDataWriter & operator = (const command_MoveDataWriter &);
   };

   class command_MoveDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_MoveDataReader_ptr _ptr_type;
      typedef command_MoveDataReader_var _var_type;

      static command_MoveDataReader_ptr _duplicate (command_MoveDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_MoveDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_MoveDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_MoveDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_MoveDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_Move& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_Move& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_Move& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_Move& instance) = 0;

   protected:
      command_MoveDataReader () {};
      ~command_MoveDataReader () {};
   private:
      command_MoveDataReader (const command_MoveDataReader &);
      command_MoveDataReader & operator = (const command_MoveDataReader &);
   };

   class command_MoveDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_MoveDataReaderView_ptr _ptr_type;
      typedef command_MoveDataReaderView_var _var_type;

      static command_MoveDataReaderView_ptr _duplicate (command_MoveDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_MoveDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_MoveDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_MoveDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_MoveDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_Move& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_Move& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_MoveSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_Move& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_Move& instance) = 0;

   protected:
      command_MoveDataReaderView () {};
      ~command_MoveDataReaderView () {};
   private:
      command_MoveDataReaderView (const command_MoveDataReaderView &);
      command_MoveDataReaderView & operator = (const command_MoveDataReaderView &);
   };

   struct command_OpenShutterSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_OpenShutter, struct command_OpenShutterSeq_uniq_> command_OpenShutterSeq;
   typedef DDS_DCPSSequence_var < command_OpenShutterSeq> command_OpenShutterSeq_var;
   typedef DDS_DCPSSequence_out < command_OpenShutterSeq> command_OpenShutterSeq_out;
   class command_OpenShutterTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_OpenShutterTypeSupportInterface_ptr _ptr_type;
      typedef command_OpenShutterTypeSupportInterface_var _var_type;

      static command_OpenShutterTypeSupportInterface_ptr _duplicate (command_OpenShutterTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_OpenShutterTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_OpenShutterTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_OpenShutterTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_OpenShutterTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_OpenShutterTypeSupportInterface () {};
      ~command_OpenShutterTypeSupportInterface () {};
   private:
      command_OpenShutterTypeSupportInterface (const command_OpenShutterTypeSupportInterface &);
      command_OpenShutterTypeSupportInterface & operator = (const command_OpenShutterTypeSupportInterface &);
   };

   class command_OpenShutterDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_OpenShutterDataWriter_ptr _ptr_type;
      typedef command_OpenShutterDataWriter_var _var_type;

      static command_OpenShutterDataWriter_ptr _duplicate (command_OpenShutterDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_OpenShutterDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_OpenShutterDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_OpenShutterDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_OpenShutterDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_OpenShutter& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_OpenShutter& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_OpenShutter& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_OpenShutter& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_OpenShutter& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_OpenShutter& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_OpenShutter& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_OpenShutter& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_OpenShutter& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_OpenShutter& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_OpenShutter& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_OpenShutter& instance_data) = 0;

   protected:
      command_OpenShutterDataWriter () {};
      ~command_OpenShutterDataWriter () {};
   private:
      command_OpenShutterDataWriter (const command_OpenShutterDataWriter &);
      command_OpenShutterDataWriter & operator = (const command_OpenShutterDataWriter &);
   };

   class command_OpenShutterDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_OpenShutterDataReader_ptr _ptr_type;
      typedef command_OpenShutterDataReader_var _var_type;

      static command_OpenShutterDataReader_ptr _duplicate (command_OpenShutterDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_OpenShutterDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_OpenShutterDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_OpenShutterDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_OpenShutterDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_OpenShutter& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_OpenShutter& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_OpenShutter& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_OpenShutter& instance) = 0;

   protected:
      command_OpenShutterDataReader () {};
      ~command_OpenShutterDataReader () {};
   private:
      command_OpenShutterDataReader (const command_OpenShutterDataReader &);
      command_OpenShutterDataReader & operator = (const command_OpenShutterDataReader &);
   };

   class command_OpenShutterDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_OpenShutterDataReaderView_ptr _ptr_type;
      typedef command_OpenShutterDataReaderView_var _var_type;

      static command_OpenShutterDataReaderView_ptr _duplicate (command_OpenShutterDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_OpenShutterDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_OpenShutterDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_OpenShutterDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_OpenShutterDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_OpenShutter& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_OpenShutter& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_OpenShutterSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_OpenShutter& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_OpenShutter& instance) = 0;

   protected:
      command_OpenShutterDataReaderView () {};
      ~command_OpenShutterDataReaderView () {};
   private:
      command_OpenShutterDataReaderView (const command_OpenShutterDataReaderView &);
      command_OpenShutterDataReaderView & operator = (const command_OpenShutterDataReaderView &);
   };

   struct command_ParkSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_Park, struct command_ParkSeq_uniq_> command_ParkSeq;
   typedef DDS_DCPSSequence_var < command_ParkSeq> command_ParkSeq_var;
   typedef DDS_DCPSSequence_out < command_ParkSeq> command_ParkSeq_out;
   class command_ParkTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_ParkTypeSupportInterface_ptr _ptr_type;
      typedef command_ParkTypeSupportInterface_var _var_type;

      static command_ParkTypeSupportInterface_ptr _duplicate (command_ParkTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_ParkTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_ParkTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_ParkTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_ParkTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_ParkTypeSupportInterface () {};
      ~command_ParkTypeSupportInterface () {};
   private:
      command_ParkTypeSupportInterface (const command_ParkTypeSupportInterface &);
      command_ParkTypeSupportInterface & operator = (const command_ParkTypeSupportInterface &);
   };

   class command_ParkDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_ParkDataWriter_ptr _ptr_type;
      typedef command_ParkDataWriter_var _var_type;

      static command_ParkDataWriter_ptr _duplicate (command_ParkDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_ParkDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_ParkDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_ParkDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_ParkDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_Park& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_Park& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_Park& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_Park& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_Park& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_Park& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_Park& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_Park& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_Park& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_Park& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_Park& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_Park& instance_data) = 0;

   protected:
      command_ParkDataWriter () {};
      ~command_ParkDataWriter () {};
   private:
      command_ParkDataWriter (const command_ParkDataWriter &);
      command_ParkDataWriter & operator = (const command_ParkDataWriter &);
   };

   class command_ParkDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_ParkDataReader_ptr _ptr_type;
      typedef command_ParkDataReader_var _var_type;

      static command_ParkDataReader_ptr _duplicate (command_ParkDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_ParkDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_ParkDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_ParkDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_ParkDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_Park& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_Park& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_Park& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_Park& instance) = 0;

   protected:
      command_ParkDataReader () {};
      ~command_ParkDataReader () {};
   private:
      command_ParkDataReader (const command_ParkDataReader &);
      command_ParkDataReader & operator = (const command_ParkDataReader &);
   };

   class command_ParkDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_ParkDataReaderView_ptr _ptr_type;
      typedef command_ParkDataReaderView_var _var_type;

      static command_ParkDataReaderView_ptr _duplicate (command_ParkDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_ParkDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_ParkDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_ParkDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_ParkDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_Park& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_Park& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_ParkSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_Park& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_Park& instance) = 0;

   protected:
      command_ParkDataReaderView () {};
      ~command_ParkDataReaderView () {};
   private:
      command_ParkDataReaderView (const command_ParkDataReaderView &);
      command_ParkDataReaderView & operator = (const command_ParkDataReaderView &);
   };

   struct command_SetLouversSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_SetLouvers, struct command_SetLouversSeq_uniq_> command_SetLouversSeq;
   typedef DDS_DCPSSequence_var < command_SetLouversSeq> command_SetLouversSeq_var;
   typedef DDS_DCPSSequence_out < command_SetLouversSeq> command_SetLouversSeq_out;
   class command_SetLouversTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_SetLouversTypeSupportInterface_ptr _ptr_type;
      typedef command_SetLouversTypeSupportInterface_var _var_type;

      static command_SetLouversTypeSupportInterface_ptr _duplicate (command_SetLouversTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_SetLouversTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_SetLouversTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_SetLouversTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_SetLouversTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_SetLouversTypeSupportInterface () {};
      ~command_SetLouversTypeSupportInterface () {};
   private:
      command_SetLouversTypeSupportInterface (const command_SetLouversTypeSupportInterface &);
      command_SetLouversTypeSupportInterface & operator = (const command_SetLouversTypeSupportInterface &);
   };

   class command_SetLouversDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_SetLouversDataWriter_ptr _ptr_type;
      typedef command_SetLouversDataWriter_var _var_type;

      static command_SetLouversDataWriter_ptr _duplicate (command_SetLouversDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_SetLouversDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_SetLouversDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_SetLouversDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_SetLouversDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_SetLouvers& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_SetLouvers& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_SetLouvers& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_SetLouvers& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_SetLouvers& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_SetLouvers& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_SetLouvers& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_SetLouvers& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_SetLouvers& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_SetLouvers& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_SetLouvers& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_SetLouvers& instance_data) = 0;

   protected:
      command_SetLouversDataWriter () {};
      ~command_SetLouversDataWriter () {};
   private:
      command_SetLouversDataWriter (const command_SetLouversDataWriter &);
      command_SetLouversDataWriter & operator = (const command_SetLouversDataWriter &);
   };

   class command_SetLouversDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_SetLouversDataReader_ptr _ptr_type;
      typedef command_SetLouversDataReader_var _var_type;

      static command_SetLouversDataReader_ptr _duplicate (command_SetLouversDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_SetLouversDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_SetLouversDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_SetLouversDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_SetLouversDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_SetLouvers& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_SetLouvers& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_SetLouvers& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_SetLouvers& instance) = 0;

   protected:
      command_SetLouversDataReader () {};
      ~command_SetLouversDataReader () {};
   private:
      command_SetLouversDataReader (const command_SetLouversDataReader &);
      command_SetLouversDataReader & operator = (const command_SetLouversDataReader &);
   };

   class command_SetLouversDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_SetLouversDataReaderView_ptr _ptr_type;
      typedef command_SetLouversDataReaderView_var _var_type;

      static command_SetLouversDataReaderView_ptr _duplicate (command_SetLouversDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_SetLouversDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_SetLouversDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_SetLouversDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_SetLouversDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_SetLouvers& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_SetLouvers& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_SetLouversSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_SetLouvers& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_SetLouvers& instance) = 0;

   protected:
      command_SetLouversDataReaderView () {};
      ~command_SetLouversDataReaderView () {};
   private:
      command_SetLouversDataReaderView (const command_SetLouversDataReaderView &);
      command_SetLouversDataReaderView & operator = (const command_SetLouversDataReaderView &);
   };

   struct command_StopShutterSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_StopShutter, struct command_StopShutterSeq_uniq_> command_StopShutterSeq;
   typedef DDS_DCPSSequence_var < command_StopShutterSeq> command_StopShutterSeq_var;
   typedef DDS_DCPSSequence_out < command_StopShutterSeq> command_StopShutterSeq_out;
   class command_StopShutterTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_StopShutterTypeSupportInterface_ptr _ptr_type;
      typedef command_StopShutterTypeSupportInterface_var _var_type;

      static command_StopShutterTypeSupportInterface_ptr _duplicate (command_StopShutterTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_StopShutterTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_StopShutterTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_StopShutterTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_StopShutterTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_StopShutterTypeSupportInterface () {};
      ~command_StopShutterTypeSupportInterface () {};
   private:
      command_StopShutterTypeSupportInterface (const command_StopShutterTypeSupportInterface &);
      command_StopShutterTypeSupportInterface & operator = (const command_StopShutterTypeSupportInterface &);
   };

   class command_StopShutterDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_StopShutterDataWriter_ptr _ptr_type;
      typedef command_StopShutterDataWriter_var _var_type;

      static command_StopShutterDataWriter_ptr _duplicate (command_StopShutterDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_StopShutterDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_StopShutterDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_StopShutterDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_StopShutterDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_StopShutter& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_StopShutter& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_StopShutter& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_StopShutter& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_StopShutter& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_StopShutter& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_StopShutter& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_StopShutter& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_StopShutter& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_StopShutter& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_StopShutter& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_StopShutter& instance_data) = 0;

   protected:
      command_StopShutterDataWriter () {};
      ~command_StopShutterDataWriter () {};
   private:
      command_StopShutterDataWriter (const command_StopShutterDataWriter &);
      command_StopShutterDataWriter & operator = (const command_StopShutterDataWriter &);
   };

   class command_StopShutterDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_StopShutterDataReader_ptr _ptr_type;
      typedef command_StopShutterDataReader_var _var_type;

      static command_StopShutterDataReader_ptr _duplicate (command_StopShutterDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_StopShutterDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_StopShutterDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_StopShutterDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_StopShutterDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_StopShutter& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_StopShutter& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_StopShutter& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_StopShutter& instance) = 0;

   protected:
      command_StopShutterDataReader () {};
      ~command_StopShutterDataReader () {};
   private:
      command_StopShutterDataReader (const command_StopShutterDataReader &);
      command_StopShutterDataReader & operator = (const command_StopShutterDataReader &);
   };

   class command_StopShutterDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_StopShutterDataReaderView_ptr _ptr_type;
      typedef command_StopShutterDataReaderView_var _var_type;

      static command_StopShutterDataReaderView_ptr _duplicate (command_StopShutterDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_StopShutterDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_StopShutterDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_StopShutterDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_StopShutterDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_StopShutter& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_StopShutter& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_StopShutterSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_StopShutter& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_StopShutter& instance) = 0;

   protected:
      command_StopShutterDataReaderView () {};
      ~command_StopShutterDataReaderView () {};
   private:
      command_StopShutterDataReaderView (const command_StopShutterDataReaderView &);
      command_StopShutterDataReaderView & operator = (const command_StopShutterDataReaderView &);
   };

   struct logevent_StateChangedSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_StateChanged, struct logevent_StateChangedSeq_uniq_> logevent_StateChangedSeq;
   typedef DDS_DCPSSequence_var < logevent_StateChangedSeq> logevent_StateChangedSeq_var;
   typedef DDS_DCPSSequence_out < logevent_StateChangedSeq> logevent_StateChangedSeq_out;
   class logevent_StateChangedTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_StateChangedTypeSupportInterface_ptr _ptr_type;
      typedef logevent_StateChangedTypeSupportInterface_var _var_type;

      static logevent_StateChangedTypeSupportInterface_ptr _duplicate (logevent_StateChangedTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_StateChangedTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_StateChangedTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_StateChangedTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_StateChangedTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_StateChangedTypeSupportInterface () {};
      ~logevent_StateChangedTypeSupportInterface () {};
   private:
      logevent_StateChangedTypeSupportInterface (const logevent_StateChangedTypeSupportInterface &);
      logevent_StateChangedTypeSupportInterface & operator = (const logevent_StateChangedTypeSupportInterface &);
   };

   class logevent_StateChangedDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_StateChangedDataWriter_ptr _ptr_type;
      typedef logevent_StateChangedDataWriter_var _var_type;

      static logevent_StateChangedDataWriter_ptr _duplicate (logevent_StateChangedDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_StateChangedDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_StateChangedDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_StateChangedDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_StateChangedDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_StateChanged& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_StateChanged& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_StateChanged& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_StateChanged& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_StateChanged& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_StateChanged& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_StateChanged& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_StateChanged& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_StateChanged& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_StateChanged& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_StateChanged& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_StateChanged& instance_data) = 0;

   protected:
      logevent_StateChangedDataWriter () {};
      ~logevent_StateChangedDataWriter () {};
   private:
      logevent_StateChangedDataWriter (const logevent_StateChangedDataWriter &);
      logevent_StateChangedDataWriter & operator = (const logevent_StateChangedDataWriter &);
   };

   class logevent_StateChangedDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_StateChangedDataReader_ptr _ptr_type;
      typedef logevent_StateChangedDataReader_var _var_type;

      static logevent_StateChangedDataReader_ptr _duplicate (logevent_StateChangedDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_StateChangedDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_StateChangedDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_StateChangedDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_StateChangedDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_StateChanged& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_StateChanged& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_StateChanged& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_StateChanged& instance) = 0;

   protected:
      logevent_StateChangedDataReader () {};
      ~logevent_StateChangedDataReader () {};
   private:
      logevent_StateChangedDataReader (const logevent_StateChangedDataReader &);
      logevent_StateChangedDataReader & operator = (const logevent_StateChangedDataReader &);
   };

   class logevent_StateChangedDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_StateChangedDataReaderView_ptr _ptr_type;
      typedef logevent_StateChangedDataReaderView_var _var_type;

      static logevent_StateChangedDataReaderView_ptr _duplicate (logevent_StateChangedDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_StateChangedDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_StateChangedDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_StateChangedDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_StateChangedDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_StateChanged& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_StateChanged& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_StateChangedSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_StateChanged& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_StateChanged& instance) = 0;

   protected:
      logevent_StateChangedDataReaderView () {};
      ~logevent_StateChangedDataReaderView () {};
   private:
      logevent_StateChangedDataReaderView (const logevent_StateChangedDataReaderView &);
      logevent_StateChangedDataReaderView & operator = (const logevent_StateChangedDataReaderView &);
   };

   struct commandSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command, struct commandSeq_uniq_> commandSeq;
   typedef DDS_DCPSSequence_var < commandSeq> commandSeq_var;
   typedef DDS_DCPSSequence_out < commandSeq> commandSeq_out;
   class commandTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef commandTypeSupportInterface_ptr _ptr_type;
      typedef commandTypeSupportInterface_var _var_type;

      static commandTypeSupportInterface_ptr _duplicate (commandTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static commandTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      commandTypeSupportInterface_ptr _this () { return this; }


   protected:
      commandTypeSupportInterface () {};
      ~commandTypeSupportInterface () {};
   private:
      commandTypeSupportInterface (const commandTypeSupportInterface &);
      commandTypeSupportInterface & operator = (const commandTypeSupportInterface &);
   };

   class commandDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef commandDataWriter_ptr _ptr_type;
      typedef commandDataWriter_var _var_type;

      static commandDataWriter_ptr _duplicate (commandDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static commandDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      commandDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command& instance_data) = 0;

   protected:
      commandDataWriter () {};
      ~commandDataWriter () {};
   private:
      commandDataWriter (const commandDataWriter &);
      commandDataWriter & operator = (const commandDataWriter &);
   };

   class commandDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef commandDataReader_ptr _ptr_type;
      typedef commandDataReader_var _var_type;

      static commandDataReader_ptr _duplicate (commandDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandDataReader_ptr _narrow (DDS::Object_ptr obj);
      static commandDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      commandDataReader_ptr _this () { return this; }

      virtual DDS::Long read (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (commandSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command& instance) = 0;

   protected:
      commandDataReader () {};
      ~commandDataReader () {};
   private:
      commandDataReader (const commandDataReader &);
      commandDataReader & operator = (const commandDataReader &);
   };

   class commandDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef commandDataReaderView_ptr _ptr_type;
      typedef commandDataReaderView_var _var_type;

      static commandDataReaderView_ptr _duplicate (commandDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static commandDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      commandDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (commandSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command& instance) = 0;

   protected:
      commandDataReaderView () {};
      ~commandDataReaderView () {};
   private:
      commandDataReaderView (const commandDataReaderView &);
      commandDataReaderView & operator = (const commandDataReaderView &);
   };

   struct ackcmdSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < ackcmd, struct ackcmdSeq_uniq_> ackcmdSeq;
   typedef DDS_DCPSSequence_var < ackcmdSeq> ackcmdSeq_var;
   typedef DDS_DCPSSequence_out < ackcmdSeq> ackcmdSeq_out;
   class ackcmdTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ackcmdTypeSupportInterface_ptr _ptr_type;
      typedef ackcmdTypeSupportInterface_var _var_type;

      static ackcmdTypeSupportInterface_ptr _duplicate (ackcmdTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdTypeSupportInterface_ptr _this () { return this; }


   protected:
      ackcmdTypeSupportInterface () {};
      ~ackcmdTypeSupportInterface () {};
   private:
      ackcmdTypeSupportInterface (const ackcmdTypeSupportInterface &);
      ackcmdTypeSupportInterface & operator = (const ackcmdTypeSupportInterface &);
   };

   class ackcmdDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ackcmdDataWriter_ptr _ptr_type;
      typedef ackcmdDataWriter_var _var_type;

      static ackcmdDataWriter_ptr _duplicate (ackcmdDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const ackcmd& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const ackcmd& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (ackcmd& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ackcmd& instance_data) = 0;

   protected:
      ackcmdDataWriter () {};
      ~ackcmdDataWriter () {};
   private:
      ackcmdDataWriter (const ackcmdDataWriter &);
      ackcmdDataWriter & operator = (const ackcmdDataWriter &);
   };

   class ackcmdDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ackcmdDataReader_ptr _ptr_type;
      typedef ackcmdDataReader_var _var_type;

      static ackcmdDataReader_ptr _duplicate (ackcmdDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (ackcmd& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ackcmd& instance) = 0;

   protected:
      ackcmdDataReader () {};
      ~ackcmdDataReader () {};
   private:
      ackcmdDataReader (const ackcmdDataReader &);
      ackcmdDataReader & operator = (const ackcmdDataReader &);
   };

   class ackcmdDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ackcmdDataReaderView_ptr _ptr_type;
      typedef ackcmdDataReaderView_var _var_type;

      static ackcmdDataReaderView_ptr _duplicate (ackcmdDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (ackcmd& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ackcmd& instance) = 0;

   protected:
      ackcmdDataReaderView () {};
      ~ackcmdDataReaderView () {};
   private:
      ackcmdDataReaderView (const ackcmdDataReaderView &);
      ackcmdDataReaderView & operator = (const ackcmdDataReaderView &);
   };

   struct logeventSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent, struct logeventSeq_uniq_> logeventSeq;
   typedef DDS_DCPSSequence_var < logeventSeq> logeventSeq_var;
   typedef DDS_DCPSSequence_out < logeventSeq> logeventSeq_out;
   class logeventTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logeventTypeSupportInterface_ptr _ptr_type;
      typedef logeventTypeSupportInterface_var _var_type;

      static logeventTypeSupportInterface_ptr _duplicate (logeventTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logeventTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventTypeSupportInterface_ptr _this () { return this; }


   protected:
      logeventTypeSupportInterface () {};
      ~logeventTypeSupportInterface () {};
   private:
      logeventTypeSupportInterface (const logeventTypeSupportInterface &);
      logeventTypeSupportInterface & operator = (const logeventTypeSupportInterface &);
   };

   class logeventDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logeventDataWriter_ptr _ptr_type;
      typedef logeventDataWriter_var _var_type;

      static logeventDataWriter_ptr _duplicate (logeventDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logeventDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent& instance_data) = 0;

   protected:
      logeventDataWriter () {};
      ~logeventDataWriter () {};
   private:
      logeventDataWriter (const logeventDataWriter &);
      logeventDataWriter & operator = (const logeventDataWriter &);
   };

   class logeventDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logeventDataReader_ptr _ptr_type;
      typedef logeventDataReader_var _var_type;

      static logeventDataReader_ptr _duplicate (logeventDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logeventDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent& instance) = 0;

   protected:
      logeventDataReader () {};
      ~logeventDataReader () {};
   private:
      logeventDataReader (const logeventDataReader &);
      logeventDataReader & operator = (const logeventDataReader &);
   };

   class logeventDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logeventDataReaderView_ptr _ptr_type;
      typedef logeventDataReaderView_var _var_type;

      static logeventDataReaderView_ptr _duplicate (logeventDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logeventDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent& instance) = 0;

   protected:
      logeventDataReaderView () {};
      ~logeventDataReaderView () {};
   private:
      logeventDataReaderView (const logeventDataReaderView &);
      logeventDataReaderView & operator = (const logeventDataReaderView &);
   };

}




#endif 
