//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: sal_hexapodDcps.h
//  Source: sal_hexapodDcps.idl
//  Generated: Thu Aug 23 17:23:00 2018
//  OpenSplice V6.4.140320OSS
//  
//******************************************************************
#ifndef _SAL_HEXAPODDCPS_H_
#define _SAL_HEXAPODDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "sal_hexapod.h"
#include "dds_dcps.h"


namespace hexapod
{

   class ActuatorsTypeSupportInterface;

   typedef ActuatorsTypeSupportInterface * ActuatorsTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ActuatorsTypeSupportInterface> ActuatorsTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ActuatorsTypeSupportInterface> ActuatorsTypeSupportInterface_out;


   class ActuatorsDataWriter;

   typedef ActuatorsDataWriter * ActuatorsDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ActuatorsDataWriter> ActuatorsDataWriter_var;
   typedef DDS_DCPSInterface_out < ActuatorsDataWriter> ActuatorsDataWriter_out;


   class ActuatorsDataReader;

   typedef ActuatorsDataReader * ActuatorsDataReader_ptr;
   typedef DDS_DCPSInterface_var < ActuatorsDataReader> ActuatorsDataReader_var;
   typedef DDS_DCPSInterface_out < ActuatorsDataReader> ActuatorsDataReader_out;


   class ActuatorsDataReaderView;

   typedef ActuatorsDataReaderView * ActuatorsDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ActuatorsDataReaderView> ActuatorsDataReaderView_var;
   typedef DDS_DCPSInterface_out < ActuatorsDataReaderView> ActuatorsDataReaderView_out;


   class ApplicationTypeSupportInterface;

   typedef ApplicationTypeSupportInterface * ApplicationTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ApplicationTypeSupportInterface> ApplicationTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ApplicationTypeSupportInterface> ApplicationTypeSupportInterface_out;


   class ApplicationDataWriter;

   typedef ApplicationDataWriter * ApplicationDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ApplicationDataWriter> ApplicationDataWriter_var;
   typedef DDS_DCPSInterface_out < ApplicationDataWriter> ApplicationDataWriter_out;


   class ApplicationDataReader;

   typedef ApplicationDataReader * ApplicationDataReader_ptr;
   typedef DDS_DCPSInterface_var < ApplicationDataReader> ApplicationDataReader_var;
   typedef DDS_DCPSInterface_out < ApplicationDataReader> ApplicationDataReader_out;


   class ApplicationDataReaderView;

   typedef ApplicationDataReaderView * ApplicationDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ApplicationDataReaderView> ApplicationDataReaderView_var;
   typedef DDS_DCPSInterface_out < ApplicationDataReaderView> ApplicationDataReaderView_out;


   class ElectricalTypeSupportInterface;

   typedef ElectricalTypeSupportInterface * ElectricalTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ElectricalTypeSupportInterface> ElectricalTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ElectricalTypeSupportInterface> ElectricalTypeSupportInterface_out;


   class ElectricalDataWriter;

   typedef ElectricalDataWriter * ElectricalDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ElectricalDataWriter> ElectricalDataWriter_var;
   typedef DDS_DCPSInterface_out < ElectricalDataWriter> ElectricalDataWriter_out;


   class ElectricalDataReader;

   typedef ElectricalDataReader * ElectricalDataReader_ptr;
   typedef DDS_DCPSInterface_var < ElectricalDataReader> ElectricalDataReader_var;
   typedef DDS_DCPSInterface_out < ElectricalDataReader> ElectricalDataReader_out;


   class ElectricalDataReaderView;

   typedef ElectricalDataReaderView * ElectricalDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ElectricalDataReaderView> ElectricalDataReaderView_var;
   typedef DDS_DCPSInterface_out < ElectricalDataReaderView> ElectricalDataReaderView_out;


   class LimitSensorsTypeSupportInterface;

   typedef LimitSensorsTypeSupportInterface * LimitSensorsTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < LimitSensorsTypeSupportInterface> LimitSensorsTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < LimitSensorsTypeSupportInterface> LimitSensorsTypeSupportInterface_out;


   class LimitSensorsDataWriter;

   typedef LimitSensorsDataWriter * LimitSensorsDataWriter_ptr;
   typedef DDS_DCPSInterface_var < LimitSensorsDataWriter> LimitSensorsDataWriter_var;
   typedef DDS_DCPSInterface_out < LimitSensorsDataWriter> LimitSensorsDataWriter_out;


   class LimitSensorsDataReader;

   typedef LimitSensorsDataReader * LimitSensorsDataReader_ptr;
   typedef DDS_DCPSInterface_var < LimitSensorsDataReader> LimitSensorsDataReader_var;
   typedef DDS_DCPSInterface_out < LimitSensorsDataReader> LimitSensorsDataReader_out;


   class LimitSensorsDataReaderView;

   typedef LimitSensorsDataReaderView * LimitSensorsDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < LimitSensorsDataReaderView> LimitSensorsDataReaderView_var;
   typedef DDS_DCPSInterface_out < LimitSensorsDataReaderView> LimitSensorsDataReaderView_out;


   class MetrologyTypeSupportInterface;

   typedef MetrologyTypeSupportInterface * MetrologyTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < MetrologyTypeSupportInterface> MetrologyTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < MetrologyTypeSupportInterface> MetrologyTypeSupportInterface_out;


   class MetrologyDataWriter;

   typedef MetrologyDataWriter * MetrologyDataWriter_ptr;
   typedef DDS_DCPSInterface_var < MetrologyDataWriter> MetrologyDataWriter_var;
   typedef DDS_DCPSInterface_out < MetrologyDataWriter> MetrologyDataWriter_out;


   class MetrologyDataReader;

   typedef MetrologyDataReader * MetrologyDataReader_ptr;
   typedef DDS_DCPSInterface_var < MetrologyDataReader> MetrologyDataReader_var;
   typedef DDS_DCPSInterface_out < MetrologyDataReader> MetrologyDataReader_out;


   class MetrologyDataReaderView;

   typedef MetrologyDataReaderView * MetrologyDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < MetrologyDataReaderView> MetrologyDataReaderView_var;
   typedef DDS_DCPSInterface_out < MetrologyDataReaderView> MetrologyDataReaderView_out;


   class TCTypeSupportInterface;

   typedef TCTypeSupportInterface * TCTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < TCTypeSupportInterface> TCTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < TCTypeSupportInterface> TCTypeSupportInterface_out;


   class TCDataWriter;

   typedef TCDataWriter * TCDataWriter_ptr;
   typedef DDS_DCPSInterface_var < TCDataWriter> TCDataWriter_var;
   typedef DDS_DCPSInterface_out < TCDataWriter> TCDataWriter_out;


   class TCDataReader;

   typedef TCDataReader * TCDataReader_ptr;
   typedef DDS_DCPSInterface_var < TCDataReader> TCDataReader_var;
   typedef DDS_DCPSInterface_out < TCDataReader> TCDataReader_out;


   class TCDataReaderView;

   typedef TCDataReaderView * TCDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < TCDataReaderView> TCDataReaderView_var;
   typedef DDS_DCPSInterface_out < TCDataReaderView> TCDataReaderView_out;


   class command_clearErrorTypeSupportInterface;

   typedef command_clearErrorTypeSupportInterface * command_clearErrorTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_clearErrorTypeSupportInterface> command_clearErrorTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_clearErrorTypeSupportInterface> command_clearErrorTypeSupportInterface_out;


   class command_clearErrorDataWriter;

   typedef command_clearErrorDataWriter * command_clearErrorDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_clearErrorDataWriter> command_clearErrorDataWriter_var;
   typedef DDS_DCPSInterface_out < command_clearErrorDataWriter> command_clearErrorDataWriter_out;


   class command_clearErrorDataReader;

   typedef command_clearErrorDataReader * command_clearErrorDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_clearErrorDataReader> command_clearErrorDataReader_var;
   typedef DDS_DCPSInterface_out < command_clearErrorDataReader> command_clearErrorDataReader_out;


   class command_clearErrorDataReaderView;

   typedef command_clearErrorDataReaderView * command_clearErrorDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_clearErrorDataReaderView> command_clearErrorDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_clearErrorDataReaderView> command_clearErrorDataReaderView_out;


   class command_configureAccelerationTypeSupportInterface;

   typedef command_configureAccelerationTypeSupportInterface * command_configureAccelerationTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_configureAccelerationTypeSupportInterface> command_configureAccelerationTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_configureAccelerationTypeSupportInterface> command_configureAccelerationTypeSupportInterface_out;


   class command_configureAccelerationDataWriter;

   typedef command_configureAccelerationDataWriter * command_configureAccelerationDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_configureAccelerationDataWriter> command_configureAccelerationDataWriter_var;
   typedef DDS_DCPSInterface_out < command_configureAccelerationDataWriter> command_configureAccelerationDataWriter_out;


   class command_configureAccelerationDataReader;

   typedef command_configureAccelerationDataReader * command_configureAccelerationDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_configureAccelerationDataReader> command_configureAccelerationDataReader_var;
   typedef DDS_DCPSInterface_out < command_configureAccelerationDataReader> command_configureAccelerationDataReader_out;


   class command_configureAccelerationDataReaderView;

   typedef command_configureAccelerationDataReaderView * command_configureAccelerationDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_configureAccelerationDataReaderView> command_configureAccelerationDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_configureAccelerationDataReaderView> command_configureAccelerationDataReaderView_out;


   class command_configureAzimuthCoeffsLutTypeSupportInterface;

   typedef command_configureAzimuthCoeffsLutTypeSupportInterface * command_configureAzimuthCoeffsLutTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_configureAzimuthCoeffsLutTypeSupportInterface> command_configureAzimuthCoeffsLutTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_configureAzimuthCoeffsLutTypeSupportInterface> command_configureAzimuthCoeffsLutTypeSupportInterface_out;


   class command_configureAzimuthCoeffsLutDataWriter;

   typedef command_configureAzimuthCoeffsLutDataWriter * command_configureAzimuthCoeffsLutDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_configureAzimuthCoeffsLutDataWriter> command_configureAzimuthCoeffsLutDataWriter_var;
   typedef DDS_DCPSInterface_out < command_configureAzimuthCoeffsLutDataWriter> command_configureAzimuthCoeffsLutDataWriter_out;


   class command_configureAzimuthCoeffsLutDataReader;

   typedef command_configureAzimuthCoeffsLutDataReader * command_configureAzimuthCoeffsLutDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_configureAzimuthCoeffsLutDataReader> command_configureAzimuthCoeffsLutDataReader_var;
   typedef DDS_DCPSInterface_out < command_configureAzimuthCoeffsLutDataReader> command_configureAzimuthCoeffsLutDataReader_out;


   class command_configureAzimuthCoeffsLutDataReaderView;

   typedef command_configureAzimuthCoeffsLutDataReaderView * command_configureAzimuthCoeffsLutDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_configureAzimuthCoeffsLutDataReaderView> command_configureAzimuthCoeffsLutDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_configureAzimuthCoeffsLutDataReaderView> command_configureAzimuthCoeffsLutDataReaderView_out;


   class command_configureAzimuthRawLutTypeSupportInterface;

   typedef command_configureAzimuthRawLutTypeSupportInterface * command_configureAzimuthRawLutTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_configureAzimuthRawLutTypeSupportInterface> command_configureAzimuthRawLutTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_configureAzimuthRawLutTypeSupportInterface> command_configureAzimuthRawLutTypeSupportInterface_out;


   class command_configureAzimuthRawLutDataWriter;

   typedef command_configureAzimuthRawLutDataWriter * command_configureAzimuthRawLutDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_configureAzimuthRawLutDataWriter> command_configureAzimuthRawLutDataWriter_var;
   typedef DDS_DCPSInterface_out < command_configureAzimuthRawLutDataWriter> command_configureAzimuthRawLutDataWriter_out;


   class command_configureAzimuthRawLutDataReader;

   typedef command_configureAzimuthRawLutDataReader * command_configureAzimuthRawLutDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_configureAzimuthRawLutDataReader> command_configureAzimuthRawLutDataReader_var;
   typedef DDS_DCPSInterface_out < command_configureAzimuthRawLutDataReader> command_configureAzimuthRawLutDataReader_out;


   class command_configureAzimuthRawLutDataReaderView;

   typedef command_configureAzimuthRawLutDataReaderView * command_configureAzimuthRawLutDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_configureAzimuthRawLutDataReaderView> command_configureAzimuthRawLutDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_configureAzimuthRawLutDataReaderView> command_configureAzimuthRawLutDataReaderView_out;


   class command_configureElevationCoeffsLutTypeSupportInterface;

   typedef command_configureElevationCoeffsLutTypeSupportInterface * command_configureElevationCoeffsLutTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_configureElevationCoeffsLutTypeSupportInterface> command_configureElevationCoeffsLutTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_configureElevationCoeffsLutTypeSupportInterface> command_configureElevationCoeffsLutTypeSupportInterface_out;


   class command_configureElevationCoeffsLutDataWriter;

   typedef command_configureElevationCoeffsLutDataWriter * command_configureElevationCoeffsLutDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_configureElevationCoeffsLutDataWriter> command_configureElevationCoeffsLutDataWriter_var;
   typedef DDS_DCPSInterface_out < command_configureElevationCoeffsLutDataWriter> command_configureElevationCoeffsLutDataWriter_out;


   class command_configureElevationCoeffsLutDataReader;

   typedef command_configureElevationCoeffsLutDataReader * command_configureElevationCoeffsLutDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_configureElevationCoeffsLutDataReader> command_configureElevationCoeffsLutDataReader_var;
   typedef DDS_DCPSInterface_out < command_configureElevationCoeffsLutDataReader> command_configureElevationCoeffsLutDataReader_out;


   class command_configureElevationCoeffsLutDataReaderView;

   typedef command_configureElevationCoeffsLutDataReaderView * command_configureElevationCoeffsLutDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_configureElevationCoeffsLutDataReaderView> command_configureElevationCoeffsLutDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_configureElevationCoeffsLutDataReaderView> command_configureElevationCoeffsLutDataReaderView_out;


   class command_configureElevationRawLutTypeSupportInterface;

   typedef command_configureElevationRawLutTypeSupportInterface * command_configureElevationRawLutTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_configureElevationRawLutTypeSupportInterface> command_configureElevationRawLutTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_configureElevationRawLutTypeSupportInterface> command_configureElevationRawLutTypeSupportInterface_out;


   class command_configureElevationRawLutDataWriter;

   typedef command_configureElevationRawLutDataWriter * command_configureElevationRawLutDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_configureElevationRawLutDataWriter> command_configureElevationRawLutDataWriter_var;
   typedef DDS_DCPSInterface_out < command_configureElevationRawLutDataWriter> command_configureElevationRawLutDataWriter_out;


   class command_configureElevationRawLutDataReader;

   typedef command_configureElevationRawLutDataReader * command_configureElevationRawLutDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_configureElevationRawLutDataReader> command_configureElevationRawLutDataReader_var;
   typedef DDS_DCPSInterface_out < command_configureElevationRawLutDataReader> command_configureElevationRawLutDataReader_out;


   class command_configureElevationRawLutDataReaderView;

   typedef command_configureElevationRawLutDataReaderView * command_configureElevationRawLutDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_configureElevationRawLutDataReaderView> command_configureElevationRawLutDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_configureElevationRawLutDataReaderView> command_configureElevationRawLutDataReaderView_out;


   class command_configureLimitsTypeSupportInterface;

   typedef command_configureLimitsTypeSupportInterface * command_configureLimitsTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_configureLimitsTypeSupportInterface> command_configureLimitsTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_configureLimitsTypeSupportInterface> command_configureLimitsTypeSupportInterface_out;


   class command_configureLimitsDataWriter;

   typedef command_configureLimitsDataWriter * command_configureLimitsDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_configureLimitsDataWriter> command_configureLimitsDataWriter_var;
   typedef DDS_DCPSInterface_out < command_configureLimitsDataWriter> command_configureLimitsDataWriter_out;


   class command_configureLimitsDataReader;

   typedef command_configureLimitsDataReader * command_configureLimitsDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_configureLimitsDataReader> command_configureLimitsDataReader_var;
   typedef DDS_DCPSInterface_out < command_configureLimitsDataReader> command_configureLimitsDataReader_out;


   class command_configureLimitsDataReaderView;

   typedef command_configureLimitsDataReaderView * command_configureLimitsDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_configureLimitsDataReaderView> command_configureLimitsDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_configureLimitsDataReaderView> command_configureLimitsDataReaderView_out;


   class command_configureTemperatureCoeffsLutTypeSupportInterface;

   typedef command_configureTemperatureCoeffsLutTypeSupportInterface * command_configureTemperatureCoeffsLutTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_configureTemperatureCoeffsLutTypeSupportInterface> command_configureTemperatureCoeffsLutTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_configureTemperatureCoeffsLutTypeSupportInterface> command_configureTemperatureCoeffsLutTypeSupportInterface_out;


   class command_configureTemperatureCoeffsLutDataWriter;

   typedef command_configureTemperatureCoeffsLutDataWriter * command_configureTemperatureCoeffsLutDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_configureTemperatureCoeffsLutDataWriter> command_configureTemperatureCoeffsLutDataWriter_var;
   typedef DDS_DCPSInterface_out < command_configureTemperatureCoeffsLutDataWriter> command_configureTemperatureCoeffsLutDataWriter_out;


   class command_configureTemperatureCoeffsLutDataReader;

   typedef command_configureTemperatureCoeffsLutDataReader * command_configureTemperatureCoeffsLutDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_configureTemperatureCoeffsLutDataReader> command_configureTemperatureCoeffsLutDataReader_var;
   typedef DDS_DCPSInterface_out < command_configureTemperatureCoeffsLutDataReader> command_configureTemperatureCoeffsLutDataReader_out;


   class command_configureTemperatureCoeffsLutDataReaderView;

   typedef command_configureTemperatureCoeffsLutDataReaderView * command_configureTemperatureCoeffsLutDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_configureTemperatureCoeffsLutDataReaderView> command_configureTemperatureCoeffsLutDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_configureTemperatureCoeffsLutDataReaderView> command_configureTemperatureCoeffsLutDataReaderView_out;


   class command_configureVelocityTypeSupportInterface;

   typedef command_configureVelocityTypeSupportInterface * command_configureVelocityTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_configureVelocityTypeSupportInterface> command_configureVelocityTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_configureVelocityTypeSupportInterface> command_configureVelocityTypeSupportInterface_out;


   class command_configureVelocityDataWriter;

   typedef command_configureVelocityDataWriter * command_configureVelocityDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_configureVelocityDataWriter> command_configureVelocityDataWriter_var;
   typedef DDS_DCPSInterface_out < command_configureVelocityDataWriter> command_configureVelocityDataWriter_out;


   class command_configureVelocityDataReader;

   typedef command_configureVelocityDataReader * command_configureVelocityDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_configureVelocityDataReader> command_configureVelocityDataReader_var;
   typedef DDS_DCPSInterface_out < command_configureVelocityDataReader> command_configureVelocityDataReader_out;


   class command_configureVelocityDataReaderView;

   typedef command_configureVelocityDataReaderView * command_configureVelocityDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_configureVelocityDataReaderView> command_configureVelocityDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_configureVelocityDataReaderView> command_configureVelocityDataReaderView_out;


   class command_moveTypeSupportInterface;

   typedef command_moveTypeSupportInterface * command_moveTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_moveTypeSupportInterface> command_moveTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_moveTypeSupportInterface> command_moveTypeSupportInterface_out;


   class command_moveDataWriter;

   typedef command_moveDataWriter * command_moveDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_moveDataWriter> command_moveDataWriter_var;
   typedef DDS_DCPSInterface_out < command_moveDataWriter> command_moveDataWriter_out;


   class command_moveDataReader;

   typedef command_moveDataReader * command_moveDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_moveDataReader> command_moveDataReader_var;
   typedef DDS_DCPSInterface_out < command_moveDataReader> command_moveDataReader_out;


   class command_moveDataReaderView;

   typedef command_moveDataReaderView * command_moveDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_moveDataReaderView> command_moveDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_moveDataReaderView> command_moveDataReaderView_out;


   class command_offsetTypeSupportInterface;

   typedef command_offsetTypeSupportInterface * command_offsetTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_offsetTypeSupportInterface> command_offsetTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_offsetTypeSupportInterface> command_offsetTypeSupportInterface_out;


   class command_offsetDataWriter;

   typedef command_offsetDataWriter * command_offsetDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_offsetDataWriter> command_offsetDataWriter_var;
   typedef DDS_DCPSInterface_out < command_offsetDataWriter> command_offsetDataWriter_out;


   class command_offsetDataReader;

   typedef command_offsetDataReader * command_offsetDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_offsetDataReader> command_offsetDataReader_var;
   typedef DDS_DCPSInterface_out < command_offsetDataReader> command_offsetDataReader_out;


   class command_offsetDataReaderView;

   typedef command_offsetDataReaderView * command_offsetDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_offsetDataReaderView> command_offsetDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_offsetDataReaderView> command_offsetDataReaderView_out;


   class command_pivotTypeSupportInterface;

   typedef command_pivotTypeSupportInterface * command_pivotTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_pivotTypeSupportInterface> command_pivotTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_pivotTypeSupportInterface> command_pivotTypeSupportInterface_out;


   class command_pivotDataWriter;

   typedef command_pivotDataWriter * command_pivotDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_pivotDataWriter> command_pivotDataWriter_var;
   typedef DDS_DCPSInterface_out < command_pivotDataWriter> command_pivotDataWriter_out;


   class command_pivotDataReader;

   typedef command_pivotDataReader * command_pivotDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_pivotDataReader> command_pivotDataReader_var;
   typedef DDS_DCPSInterface_out < command_pivotDataReader> command_pivotDataReader_out;


   class command_pivotDataReaderView;

   typedef command_pivotDataReaderView * command_pivotDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_pivotDataReaderView> command_pivotDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_pivotDataReaderView> command_pivotDataReaderView_out;


   class command_positionSetTypeSupportInterface;

   typedef command_positionSetTypeSupportInterface * command_positionSetTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_positionSetTypeSupportInterface> command_positionSetTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_positionSetTypeSupportInterface> command_positionSetTypeSupportInterface_out;


   class command_positionSetDataWriter;

   typedef command_positionSetDataWriter * command_positionSetDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_positionSetDataWriter> command_positionSetDataWriter_var;
   typedef DDS_DCPSInterface_out < command_positionSetDataWriter> command_positionSetDataWriter_out;


   class command_positionSetDataReader;

   typedef command_positionSetDataReader * command_positionSetDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_positionSetDataReader> command_positionSetDataReader_var;
   typedef DDS_DCPSInterface_out < command_positionSetDataReader> command_positionSetDataReader_out;


   class command_positionSetDataReaderView;

   typedef command_positionSetDataReaderView * command_positionSetDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_positionSetDataReaderView> command_positionSetDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_positionSetDataReaderView> command_positionSetDataReaderView_out;


   class command_rawPositionSetTypeSupportInterface;

   typedef command_rawPositionSetTypeSupportInterface * command_rawPositionSetTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_rawPositionSetTypeSupportInterface> command_rawPositionSetTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_rawPositionSetTypeSupportInterface> command_rawPositionSetTypeSupportInterface_out;


   class command_rawPositionSetDataWriter;

   typedef command_rawPositionSetDataWriter * command_rawPositionSetDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_rawPositionSetDataWriter> command_rawPositionSetDataWriter_var;
   typedef DDS_DCPSInterface_out < command_rawPositionSetDataWriter> command_rawPositionSetDataWriter_out;


   class command_rawPositionSetDataReader;

   typedef command_rawPositionSetDataReader * command_rawPositionSetDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_rawPositionSetDataReader> command_rawPositionSetDataReader_var;
   typedef DDS_DCPSInterface_out < command_rawPositionSetDataReader> command_rawPositionSetDataReader_out;


   class command_rawPositionSetDataReaderView;

   typedef command_rawPositionSetDataReaderView * command_rawPositionSetDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_rawPositionSetDataReaderView> command_rawPositionSetDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_rawPositionSetDataReaderView> command_rawPositionSetDataReaderView_out;


   class command_testTypeSupportInterface;

   typedef command_testTypeSupportInterface * command_testTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_testTypeSupportInterface> command_testTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_testTypeSupportInterface> command_testTypeSupportInterface_out;


   class command_testDataWriter;

   typedef command_testDataWriter * command_testDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_testDataWriter> command_testDataWriter_var;
   typedef DDS_DCPSInterface_out < command_testDataWriter> command_testDataWriter_out;


   class command_testDataReader;

   typedef command_testDataReader * command_testDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_testDataReader> command_testDataReader_var;
   typedef DDS_DCPSInterface_out < command_testDataReader> command_testDataReader_out;


   class command_testDataReaderView;

   typedef command_testDataReaderView * command_testDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_testDataReaderView> command_testDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_testDataReaderView> command_testDataReaderView_out;


   class logevent_TempErrorTypeSupportInterface;

   typedef logevent_TempErrorTypeSupportInterface * logevent_TempErrorTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_TempErrorTypeSupportInterface> logevent_TempErrorTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_TempErrorTypeSupportInterface> logevent_TempErrorTypeSupportInterface_out;


   class logevent_TempErrorDataWriter;

   typedef logevent_TempErrorDataWriter * logevent_TempErrorDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_TempErrorDataWriter> logevent_TempErrorDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_TempErrorDataWriter> logevent_TempErrorDataWriter_out;


   class logevent_TempErrorDataReader;

   typedef logevent_TempErrorDataReader * logevent_TempErrorDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_TempErrorDataReader> logevent_TempErrorDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_TempErrorDataReader> logevent_TempErrorDataReader_out;


   class logevent_TempErrorDataReaderView;

   typedef logevent_TempErrorDataReaderView * logevent_TempErrorDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_TempErrorDataReaderView> logevent_TempErrorDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_TempErrorDataReaderView> logevent_TempErrorDataReaderView_out;


   class logevent_TrackLostTypeSupportInterface;

   typedef logevent_TrackLostTypeSupportInterface * logevent_TrackLostTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_TrackLostTypeSupportInterface> logevent_TrackLostTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_TrackLostTypeSupportInterface> logevent_TrackLostTypeSupportInterface_out;


   class logevent_TrackLostDataWriter;

   typedef logevent_TrackLostDataWriter * logevent_TrackLostDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_TrackLostDataWriter> logevent_TrackLostDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_TrackLostDataWriter> logevent_TrackLostDataWriter_out;


   class logevent_TrackLostDataReader;

   typedef logevent_TrackLostDataReader * logevent_TrackLostDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_TrackLostDataReader> logevent_TrackLostDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_TrackLostDataReader> logevent_TrackLostDataReader_out;


   class logevent_TrackLostDataReaderView;

   typedef logevent_TrackLostDataReaderView * logevent_TrackLostDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_TrackLostDataReaderView> logevent_TrackLostDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_TrackLostDataReaderView> logevent_TrackLostDataReaderView_out;


   class logevent_TrackingTypeSupportInterface;

   typedef logevent_TrackingTypeSupportInterface * logevent_TrackingTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_TrackingTypeSupportInterface> logevent_TrackingTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_TrackingTypeSupportInterface> logevent_TrackingTypeSupportInterface_out;


   class logevent_TrackingDataWriter;

   typedef logevent_TrackingDataWriter * logevent_TrackingDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_TrackingDataWriter> logevent_TrackingDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_TrackingDataWriter> logevent_TrackingDataWriter_out;


   class logevent_TrackingDataReader;

   typedef logevent_TrackingDataReader * logevent_TrackingDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_TrackingDataReader> logevent_TrackingDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_TrackingDataReader> logevent_TrackingDataReader_out;


   class logevent_TrackingDataReaderView;

   typedef logevent_TrackingDataReaderView * logevent_TrackingDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_TrackingDataReaderView> logevent_TrackingDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_TrackingDataReaderView> logevent_TrackingDataReaderView_out;


   class logevent_deviceErrorTypeSupportInterface;

   typedef logevent_deviceErrorTypeSupportInterface * logevent_deviceErrorTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_deviceErrorTypeSupportInterface> logevent_deviceErrorTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_deviceErrorTypeSupportInterface> logevent_deviceErrorTypeSupportInterface_out;


   class logevent_deviceErrorDataWriter;

   typedef logevent_deviceErrorDataWriter * logevent_deviceErrorDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_deviceErrorDataWriter> logevent_deviceErrorDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_deviceErrorDataWriter> logevent_deviceErrorDataWriter_out;


   class logevent_deviceErrorDataReader;

   typedef logevent_deviceErrorDataReader * logevent_deviceErrorDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_deviceErrorDataReader> logevent_deviceErrorDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_deviceErrorDataReader> logevent_deviceErrorDataReader_out;


   class logevent_deviceErrorDataReaderView;

   typedef logevent_deviceErrorDataReaderView * logevent_deviceErrorDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_deviceErrorDataReaderView> logevent_deviceErrorDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_deviceErrorDataReaderView> logevent_deviceErrorDataReaderView_out;


   class logevent_inPositionTypeSupportInterface;

   typedef logevent_inPositionTypeSupportInterface * logevent_inPositionTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_inPositionTypeSupportInterface> logevent_inPositionTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_inPositionTypeSupportInterface> logevent_inPositionTypeSupportInterface_out;


   class logevent_inPositionDataWriter;

   typedef logevent_inPositionDataWriter * logevent_inPositionDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_inPositionDataWriter> logevent_inPositionDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_inPositionDataWriter> logevent_inPositionDataWriter_out;


   class logevent_inPositionDataReader;

   typedef logevent_inPositionDataReader * logevent_inPositionDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_inPositionDataReader> logevent_inPositionDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_inPositionDataReader> logevent_inPositionDataReader_out;


   class logevent_inPositionDataReaderView;

   typedef logevent_inPositionDataReaderView * logevent_inPositionDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_inPositionDataReaderView> logevent_inPositionDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_inPositionDataReaderView> logevent_inPositionDataReaderView_out;


   class logevent_interlockTypeSupportInterface;

   typedef logevent_interlockTypeSupportInterface * logevent_interlockTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_interlockTypeSupportInterface> logevent_interlockTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_interlockTypeSupportInterface> logevent_interlockTypeSupportInterface_out;


   class logevent_interlockDataWriter;

   typedef logevent_interlockDataWriter * logevent_interlockDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_interlockDataWriter> logevent_interlockDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_interlockDataWriter> logevent_interlockDataWriter_out;


   class logevent_interlockDataReader;

   typedef logevent_interlockDataReader * logevent_interlockDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_interlockDataReader> logevent_interlockDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_interlockDataReader> logevent_interlockDataReader_out;


   class logevent_interlockDataReaderView;

   typedef logevent_interlockDataReaderView * logevent_interlockDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_interlockDataReaderView> logevent_interlockDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_interlockDataReaderView> logevent_interlockDataReaderView_out;


   class logevent_limitTypeSupportInterface;

   typedef logevent_limitTypeSupportInterface * logevent_limitTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_limitTypeSupportInterface> logevent_limitTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_limitTypeSupportInterface> logevent_limitTypeSupportInterface_out;


   class logevent_limitDataWriter;

   typedef logevent_limitDataWriter * logevent_limitDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_limitDataWriter> logevent_limitDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_limitDataWriter> logevent_limitDataWriter_out;


   class logevent_limitDataReader;

   typedef logevent_limitDataReader * logevent_limitDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_limitDataReader> logevent_limitDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_limitDataReader> logevent_limitDataReader_out;


   class logevent_limitDataReaderView;

   typedef logevent_limitDataReaderView * logevent_limitDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_limitDataReaderView> logevent_limitDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_limitDataReaderView> logevent_limitDataReaderView_out;


   class commandTypeSupportInterface;

   typedef commandTypeSupportInterface * commandTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < commandTypeSupportInterface> commandTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < commandTypeSupportInterface> commandTypeSupportInterface_out;


   class commandDataWriter;

   typedef commandDataWriter * commandDataWriter_ptr;
   typedef DDS_DCPSInterface_var < commandDataWriter> commandDataWriter_var;
   typedef DDS_DCPSInterface_out < commandDataWriter> commandDataWriter_out;


   class commandDataReader;

   typedef commandDataReader * commandDataReader_ptr;
   typedef DDS_DCPSInterface_var < commandDataReader> commandDataReader_var;
   typedef DDS_DCPSInterface_out < commandDataReader> commandDataReader_out;


   class commandDataReaderView;

   typedef commandDataReaderView * commandDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < commandDataReaderView> commandDataReaderView_var;
   typedef DDS_DCPSInterface_out < commandDataReaderView> commandDataReaderView_out;


   class ackcmdTypeSupportInterface;

   typedef ackcmdTypeSupportInterface * ackcmdTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ackcmdTypeSupportInterface> ackcmdTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ackcmdTypeSupportInterface> ackcmdTypeSupportInterface_out;


   class ackcmdDataWriter;

   typedef ackcmdDataWriter * ackcmdDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ackcmdDataWriter> ackcmdDataWriter_var;
   typedef DDS_DCPSInterface_out < ackcmdDataWriter> ackcmdDataWriter_out;


   class ackcmdDataReader;

   typedef ackcmdDataReader * ackcmdDataReader_ptr;
   typedef DDS_DCPSInterface_var < ackcmdDataReader> ackcmdDataReader_var;
   typedef DDS_DCPSInterface_out < ackcmdDataReader> ackcmdDataReader_out;


   class ackcmdDataReaderView;

   typedef ackcmdDataReaderView * ackcmdDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ackcmdDataReaderView> ackcmdDataReaderView_var;
   typedef DDS_DCPSInterface_out < ackcmdDataReaderView> ackcmdDataReaderView_out;


   class logeventTypeSupportInterface;

   typedef logeventTypeSupportInterface * logeventTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logeventTypeSupportInterface> logeventTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logeventTypeSupportInterface> logeventTypeSupportInterface_out;


   class logeventDataWriter;

   typedef logeventDataWriter * logeventDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logeventDataWriter> logeventDataWriter_var;
   typedef DDS_DCPSInterface_out < logeventDataWriter> logeventDataWriter_out;


   class logeventDataReader;

   typedef logeventDataReader * logeventDataReader_ptr;
   typedef DDS_DCPSInterface_var < logeventDataReader> logeventDataReader_var;
   typedef DDS_DCPSInterface_out < logeventDataReader> logeventDataReader_out;


   class logeventDataReaderView;

   typedef logeventDataReaderView * logeventDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logeventDataReaderView> logeventDataReaderView_var;
   typedef DDS_DCPSInterface_out < logeventDataReaderView> logeventDataReaderView_out;

   struct ActuatorsSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Actuators, struct ActuatorsSeq_uniq_> ActuatorsSeq;
   typedef DDS_DCPSSequence_var < ActuatorsSeq> ActuatorsSeq_var;
   typedef DDS_DCPSSequence_out < ActuatorsSeq> ActuatorsSeq_out;
   class ActuatorsTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ActuatorsTypeSupportInterface_ptr _ptr_type;
      typedef ActuatorsTypeSupportInterface_var _var_type;

      static ActuatorsTypeSupportInterface_ptr _duplicate (ActuatorsTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ActuatorsTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ActuatorsTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ActuatorsTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ActuatorsTypeSupportInterface_ptr _this () { return this; }


   protected:
      ActuatorsTypeSupportInterface () {};
      ~ActuatorsTypeSupportInterface () {};
   private:
      ActuatorsTypeSupportInterface (const ActuatorsTypeSupportInterface &);
      ActuatorsTypeSupportInterface & operator = (const ActuatorsTypeSupportInterface &);
   };

   class ActuatorsDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ActuatorsDataWriter_ptr _ptr_type;
      typedef ActuatorsDataWriter_var _var_type;

      static ActuatorsDataWriter_ptr _duplicate (ActuatorsDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ActuatorsDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ActuatorsDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ActuatorsDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ActuatorsDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Actuators& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Actuators& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Actuators& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Actuators& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Actuators& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Actuators& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Actuators& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Actuators& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Actuators& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Actuators& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Actuators& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Actuators& instance_data) = 0;

   protected:
      ActuatorsDataWriter () {};
      ~ActuatorsDataWriter () {};
   private:
      ActuatorsDataWriter (const ActuatorsDataWriter &);
      ActuatorsDataWriter & operator = (const ActuatorsDataWriter &);
   };

   class ActuatorsDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ActuatorsDataReader_ptr _ptr_type;
      typedef ActuatorsDataReader_var _var_type;

      static ActuatorsDataReader_ptr _duplicate (ActuatorsDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ActuatorsDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ActuatorsDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ActuatorsDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ActuatorsDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Actuators& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Actuators& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Actuators& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Actuators& instance) = 0;

   protected:
      ActuatorsDataReader () {};
      ~ActuatorsDataReader () {};
   private:
      ActuatorsDataReader (const ActuatorsDataReader &);
      ActuatorsDataReader & operator = (const ActuatorsDataReader &);
   };

   class ActuatorsDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ActuatorsDataReaderView_ptr _ptr_type;
      typedef ActuatorsDataReaderView_var _var_type;

      static ActuatorsDataReaderView_ptr _duplicate (ActuatorsDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ActuatorsDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ActuatorsDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ActuatorsDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ActuatorsDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Actuators& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Actuators& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Actuators& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Actuators& instance) = 0;

   protected:
      ActuatorsDataReaderView () {};
      ~ActuatorsDataReaderView () {};
   private:
      ActuatorsDataReaderView (const ActuatorsDataReaderView &);
      ActuatorsDataReaderView & operator = (const ActuatorsDataReaderView &);
   };

   struct ApplicationSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Application, struct ApplicationSeq_uniq_> ApplicationSeq;
   typedef DDS_DCPSSequence_var < ApplicationSeq> ApplicationSeq_var;
   typedef DDS_DCPSSequence_out < ApplicationSeq> ApplicationSeq_out;
   class ApplicationTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ApplicationTypeSupportInterface_ptr _ptr_type;
      typedef ApplicationTypeSupportInterface_var _var_type;

      static ApplicationTypeSupportInterface_ptr _duplicate (ApplicationTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ApplicationTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ApplicationTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ApplicationTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ApplicationTypeSupportInterface_ptr _this () { return this; }


   protected:
      ApplicationTypeSupportInterface () {};
      ~ApplicationTypeSupportInterface () {};
   private:
      ApplicationTypeSupportInterface (const ApplicationTypeSupportInterface &);
      ApplicationTypeSupportInterface & operator = (const ApplicationTypeSupportInterface &);
   };

   class ApplicationDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ApplicationDataWriter_ptr _ptr_type;
      typedef ApplicationDataWriter_var _var_type;

      static ApplicationDataWriter_ptr _duplicate (ApplicationDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ApplicationDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ApplicationDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ApplicationDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ApplicationDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Application& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Application& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Application& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Application& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Application& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Application& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Application& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Application& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Application& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Application& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Application& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Application& instance_data) = 0;

   protected:
      ApplicationDataWriter () {};
      ~ApplicationDataWriter () {};
   private:
      ApplicationDataWriter (const ApplicationDataWriter &);
      ApplicationDataWriter & operator = (const ApplicationDataWriter &);
   };

   class ApplicationDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ApplicationDataReader_ptr _ptr_type;
      typedef ApplicationDataReader_var _var_type;

      static ApplicationDataReader_ptr _duplicate (ApplicationDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ApplicationDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ApplicationDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ApplicationDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ApplicationDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Application& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Application& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Application& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Application& instance) = 0;

   protected:
      ApplicationDataReader () {};
      ~ApplicationDataReader () {};
   private:
      ApplicationDataReader (const ApplicationDataReader &);
      ApplicationDataReader & operator = (const ApplicationDataReader &);
   };

   class ApplicationDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ApplicationDataReaderView_ptr _ptr_type;
      typedef ApplicationDataReaderView_var _var_type;

      static ApplicationDataReaderView_ptr _duplicate (ApplicationDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ApplicationDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ApplicationDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ApplicationDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ApplicationDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Application& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Application& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Application& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Application& instance) = 0;

   protected:
      ApplicationDataReaderView () {};
      ~ApplicationDataReaderView () {};
   private:
      ApplicationDataReaderView (const ApplicationDataReaderView &);
      ApplicationDataReaderView & operator = (const ApplicationDataReaderView &);
   };

   struct ElectricalSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Electrical, struct ElectricalSeq_uniq_> ElectricalSeq;
   typedef DDS_DCPSSequence_var < ElectricalSeq> ElectricalSeq_var;
   typedef DDS_DCPSSequence_out < ElectricalSeq> ElectricalSeq_out;
   class ElectricalTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ElectricalTypeSupportInterface_ptr _ptr_type;
      typedef ElectricalTypeSupportInterface_var _var_type;

      static ElectricalTypeSupportInterface_ptr _duplicate (ElectricalTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ElectricalTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ElectricalTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ElectricalTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ElectricalTypeSupportInterface_ptr _this () { return this; }


   protected:
      ElectricalTypeSupportInterface () {};
      ~ElectricalTypeSupportInterface () {};
   private:
      ElectricalTypeSupportInterface (const ElectricalTypeSupportInterface &);
      ElectricalTypeSupportInterface & operator = (const ElectricalTypeSupportInterface &);
   };

   class ElectricalDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ElectricalDataWriter_ptr _ptr_type;
      typedef ElectricalDataWriter_var _var_type;

      static ElectricalDataWriter_ptr _duplicate (ElectricalDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ElectricalDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ElectricalDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ElectricalDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ElectricalDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Electrical& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Electrical& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Electrical& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Electrical& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Electrical& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Electrical& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Electrical& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Electrical& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Electrical& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Electrical& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Electrical& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Electrical& instance_data) = 0;

   protected:
      ElectricalDataWriter () {};
      ~ElectricalDataWriter () {};
   private:
      ElectricalDataWriter (const ElectricalDataWriter &);
      ElectricalDataWriter & operator = (const ElectricalDataWriter &);
   };

   class ElectricalDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ElectricalDataReader_ptr _ptr_type;
      typedef ElectricalDataReader_var _var_type;

      static ElectricalDataReader_ptr _duplicate (ElectricalDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ElectricalDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ElectricalDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ElectricalDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ElectricalDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Electrical& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Electrical& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Electrical& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Electrical& instance) = 0;

   protected:
      ElectricalDataReader () {};
      ~ElectricalDataReader () {};
   private:
      ElectricalDataReader (const ElectricalDataReader &);
      ElectricalDataReader & operator = (const ElectricalDataReader &);
   };

   class ElectricalDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ElectricalDataReaderView_ptr _ptr_type;
      typedef ElectricalDataReaderView_var _var_type;

      static ElectricalDataReaderView_ptr _duplicate (ElectricalDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ElectricalDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ElectricalDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ElectricalDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ElectricalDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Electrical& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Electrical& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Electrical& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Electrical& instance) = 0;

   protected:
      ElectricalDataReaderView () {};
      ~ElectricalDataReaderView () {};
   private:
      ElectricalDataReaderView (const ElectricalDataReaderView &);
      ElectricalDataReaderView & operator = (const ElectricalDataReaderView &);
   };

   struct LimitSensorsSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < LimitSensors, struct LimitSensorsSeq_uniq_> LimitSensorsSeq;
   typedef DDS_DCPSSequence_var < LimitSensorsSeq> LimitSensorsSeq_var;
   typedef DDS_DCPSSequence_out < LimitSensorsSeq> LimitSensorsSeq_out;
   class LimitSensorsTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef LimitSensorsTypeSupportInterface_ptr _ptr_type;
      typedef LimitSensorsTypeSupportInterface_var _var_type;

      static LimitSensorsTypeSupportInterface_ptr _duplicate (LimitSensorsTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static LimitSensorsTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static LimitSensorsTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static LimitSensorsTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      LimitSensorsTypeSupportInterface_ptr _this () { return this; }


   protected:
      LimitSensorsTypeSupportInterface () {};
      ~LimitSensorsTypeSupportInterface () {};
   private:
      LimitSensorsTypeSupportInterface (const LimitSensorsTypeSupportInterface &);
      LimitSensorsTypeSupportInterface & operator = (const LimitSensorsTypeSupportInterface &);
   };

   class LimitSensorsDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef LimitSensorsDataWriter_ptr _ptr_type;
      typedef LimitSensorsDataWriter_var _var_type;

      static LimitSensorsDataWriter_ptr _duplicate (LimitSensorsDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static LimitSensorsDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static LimitSensorsDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static LimitSensorsDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      LimitSensorsDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const LimitSensors& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const LimitSensors& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const LimitSensors& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const LimitSensors& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const LimitSensors& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const LimitSensors& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const LimitSensors& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const LimitSensors& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const LimitSensors& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const LimitSensors& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (LimitSensors& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const LimitSensors& instance_data) = 0;

   protected:
      LimitSensorsDataWriter () {};
      ~LimitSensorsDataWriter () {};
   private:
      LimitSensorsDataWriter (const LimitSensorsDataWriter &);
      LimitSensorsDataWriter & operator = (const LimitSensorsDataWriter &);
   };

   class LimitSensorsDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef LimitSensorsDataReader_ptr _ptr_type;
      typedef LimitSensorsDataReader_var _var_type;

      static LimitSensorsDataReader_ptr _duplicate (LimitSensorsDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static LimitSensorsDataReader_ptr _narrow (DDS::Object_ptr obj);
      static LimitSensorsDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static LimitSensorsDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      LimitSensorsDataReader_ptr _this () { return this; }

      virtual DDS::Long read (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (LimitSensors& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (LimitSensors& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (LimitSensors& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const LimitSensors& instance) = 0;

   protected:
      LimitSensorsDataReader () {};
      ~LimitSensorsDataReader () {};
   private:
      LimitSensorsDataReader (const LimitSensorsDataReader &);
      LimitSensorsDataReader & operator = (const LimitSensorsDataReader &);
   };

   class LimitSensorsDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef LimitSensorsDataReaderView_ptr _ptr_type;
      typedef LimitSensorsDataReaderView_var _var_type;

      static LimitSensorsDataReaderView_ptr _duplicate (LimitSensorsDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static LimitSensorsDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static LimitSensorsDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static LimitSensorsDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      LimitSensorsDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (LimitSensors& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (LimitSensors& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (LimitSensors& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const LimitSensors& instance) = 0;

   protected:
      LimitSensorsDataReaderView () {};
      ~LimitSensorsDataReaderView () {};
   private:
      LimitSensorsDataReaderView (const LimitSensorsDataReaderView &);
      LimitSensorsDataReaderView & operator = (const LimitSensorsDataReaderView &);
   };

   struct MetrologySeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Metrology, struct MetrologySeq_uniq_> MetrologySeq;
   typedef DDS_DCPSSequence_var < MetrologySeq> MetrologySeq_var;
   typedef DDS_DCPSSequence_out < MetrologySeq> MetrologySeq_out;
   class MetrologyTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef MetrologyTypeSupportInterface_ptr _ptr_type;
      typedef MetrologyTypeSupportInterface_var _var_type;

      static MetrologyTypeSupportInterface_ptr _duplicate (MetrologyTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MetrologyTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static MetrologyTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MetrologyTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      MetrologyTypeSupportInterface_ptr _this () { return this; }


   protected:
      MetrologyTypeSupportInterface () {};
      ~MetrologyTypeSupportInterface () {};
   private:
      MetrologyTypeSupportInterface (const MetrologyTypeSupportInterface &);
      MetrologyTypeSupportInterface & operator = (const MetrologyTypeSupportInterface &);
   };

   class MetrologyDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef MetrologyDataWriter_ptr _ptr_type;
      typedef MetrologyDataWriter_var _var_type;

      static MetrologyDataWriter_ptr _duplicate (MetrologyDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MetrologyDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static MetrologyDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MetrologyDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      MetrologyDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Metrology& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Metrology& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Metrology& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Metrology& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Metrology& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Metrology& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Metrology& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Metrology& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Metrology& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Metrology& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Metrology& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Metrology& instance_data) = 0;

   protected:
      MetrologyDataWriter () {};
      ~MetrologyDataWriter () {};
   private:
      MetrologyDataWriter (const MetrologyDataWriter &);
      MetrologyDataWriter & operator = (const MetrologyDataWriter &);
   };

   class MetrologyDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef MetrologyDataReader_ptr _ptr_type;
      typedef MetrologyDataReader_var _var_type;

      static MetrologyDataReader_ptr _duplicate (MetrologyDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MetrologyDataReader_ptr _narrow (DDS::Object_ptr obj);
      static MetrologyDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MetrologyDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      MetrologyDataReader_ptr _this () { return this; }

      virtual DDS::Long read (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Metrology& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Metrology& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Metrology& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Metrology& instance) = 0;

   protected:
      MetrologyDataReader () {};
      ~MetrologyDataReader () {};
   private:
      MetrologyDataReader (const MetrologyDataReader &);
      MetrologyDataReader & operator = (const MetrologyDataReader &);
   };

   class MetrologyDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef MetrologyDataReaderView_ptr _ptr_type;
      typedef MetrologyDataReaderView_var _var_type;

      static MetrologyDataReaderView_ptr _duplicate (MetrologyDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MetrologyDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static MetrologyDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MetrologyDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      MetrologyDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Metrology& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Metrology& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Metrology& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Metrology& instance) = 0;

   protected:
      MetrologyDataReaderView () {};
      ~MetrologyDataReaderView () {};
   private:
      MetrologyDataReaderView (const MetrologyDataReaderView &);
      MetrologyDataReaderView & operator = (const MetrologyDataReaderView &);
   };

   struct TCSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < TC, struct TCSeq_uniq_> TCSeq;
   typedef DDS_DCPSSequence_var < TCSeq> TCSeq_var;
   typedef DDS_DCPSSequence_out < TCSeq> TCSeq_out;
   class TCTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef TCTypeSupportInterface_ptr _ptr_type;
      typedef TCTypeSupportInterface_var _var_type;

      static TCTypeSupportInterface_ptr _duplicate (TCTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TCTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static TCTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TCTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      TCTypeSupportInterface_ptr _this () { return this; }


   protected:
      TCTypeSupportInterface () {};
      ~TCTypeSupportInterface () {};
   private:
      TCTypeSupportInterface (const TCTypeSupportInterface &);
      TCTypeSupportInterface & operator = (const TCTypeSupportInterface &);
   };

   class TCDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef TCDataWriter_ptr _ptr_type;
      typedef TCDataWriter_var _var_type;

      static TCDataWriter_ptr _duplicate (TCDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TCDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static TCDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TCDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      TCDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const TC& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const TC& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const TC& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const TC& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const TC& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const TC& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const TC& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const TC& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const TC& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const TC& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (TC& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TC& instance_data) = 0;

   protected:
      TCDataWriter () {};
      ~TCDataWriter () {};
   private:
      TCDataWriter (const TCDataWriter &);
      TCDataWriter & operator = (const TCDataWriter &);
   };

   class TCDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef TCDataReader_ptr _ptr_type;
      typedef TCDataReader_var _var_type;

      static TCDataReader_ptr _duplicate (TCDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TCDataReader_ptr _narrow (DDS::Object_ptr obj);
      static TCDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TCDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      TCDataReader_ptr _this () { return this; }

      virtual DDS::Long read (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TC& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TC& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TCSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TC& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TC& instance) = 0;

   protected:
      TCDataReader () {};
      ~TCDataReader () {};
   private:
      TCDataReader (const TCDataReader &);
      TCDataReader & operator = (const TCDataReader &);
   };

   class TCDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef TCDataReaderView_ptr _ptr_type;
      typedef TCDataReaderView_var _var_type;

      static TCDataReaderView_ptr _duplicate (TCDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TCDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static TCDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TCDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      TCDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TC& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TC& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TCSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TC& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TC& instance) = 0;

   protected:
      TCDataReaderView () {};
      ~TCDataReaderView () {};
   private:
      TCDataReaderView (const TCDataReaderView &);
      TCDataReaderView & operator = (const TCDataReaderView &);
   };

   struct command_clearErrorSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_clearError, struct command_clearErrorSeq_uniq_> command_clearErrorSeq;
   typedef DDS_DCPSSequence_var < command_clearErrorSeq> command_clearErrorSeq_var;
   typedef DDS_DCPSSequence_out < command_clearErrorSeq> command_clearErrorSeq_out;
   class command_clearErrorTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_clearErrorTypeSupportInterface_ptr _ptr_type;
      typedef command_clearErrorTypeSupportInterface_var _var_type;

      static command_clearErrorTypeSupportInterface_ptr _duplicate (command_clearErrorTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_clearErrorTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_clearErrorTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_clearErrorTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_clearErrorTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_clearErrorTypeSupportInterface () {};
      ~command_clearErrorTypeSupportInterface () {};
   private:
      command_clearErrorTypeSupportInterface (const command_clearErrorTypeSupportInterface &);
      command_clearErrorTypeSupportInterface & operator = (const command_clearErrorTypeSupportInterface &);
   };

   class command_clearErrorDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_clearErrorDataWriter_ptr _ptr_type;
      typedef command_clearErrorDataWriter_var _var_type;

      static command_clearErrorDataWriter_ptr _duplicate (command_clearErrorDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_clearErrorDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_clearErrorDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_clearErrorDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_clearErrorDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_clearError& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_clearError& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_clearError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_clearError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_clearError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_clearError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_clearError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_clearError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_clearError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_clearError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_clearError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_clearError& instance_data) = 0;

   protected:
      command_clearErrorDataWriter () {};
      ~command_clearErrorDataWriter () {};
   private:
      command_clearErrorDataWriter (const command_clearErrorDataWriter &);
      command_clearErrorDataWriter & operator = (const command_clearErrorDataWriter &);
   };

   class command_clearErrorDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_clearErrorDataReader_ptr _ptr_type;
      typedef command_clearErrorDataReader_var _var_type;

      static command_clearErrorDataReader_ptr _duplicate (command_clearErrorDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_clearErrorDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_clearErrorDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_clearErrorDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_clearErrorDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_clearError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_clearError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_clearError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_clearError& instance) = 0;

   protected:
      command_clearErrorDataReader () {};
      ~command_clearErrorDataReader () {};
   private:
      command_clearErrorDataReader (const command_clearErrorDataReader &);
      command_clearErrorDataReader & operator = (const command_clearErrorDataReader &);
   };

   class command_clearErrorDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_clearErrorDataReaderView_ptr _ptr_type;
      typedef command_clearErrorDataReaderView_var _var_type;

      static command_clearErrorDataReaderView_ptr _duplicate (command_clearErrorDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_clearErrorDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_clearErrorDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_clearErrorDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_clearErrorDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_clearError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_clearError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_clearErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_clearError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_clearError& instance) = 0;

   protected:
      command_clearErrorDataReaderView () {};
      ~command_clearErrorDataReaderView () {};
   private:
      command_clearErrorDataReaderView (const command_clearErrorDataReaderView &);
      command_clearErrorDataReaderView & operator = (const command_clearErrorDataReaderView &);
   };

   struct command_configureAccelerationSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_configureAcceleration, struct command_configureAccelerationSeq_uniq_> command_configureAccelerationSeq;
   typedef DDS_DCPSSequence_var < command_configureAccelerationSeq> command_configureAccelerationSeq_var;
   typedef DDS_DCPSSequence_out < command_configureAccelerationSeq> command_configureAccelerationSeq_out;
   class command_configureAccelerationTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_configureAccelerationTypeSupportInterface_ptr _ptr_type;
      typedef command_configureAccelerationTypeSupportInterface_var _var_type;

      static command_configureAccelerationTypeSupportInterface_ptr _duplicate (command_configureAccelerationTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureAccelerationTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_configureAccelerationTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureAccelerationTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureAccelerationTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_configureAccelerationTypeSupportInterface () {};
      ~command_configureAccelerationTypeSupportInterface () {};
   private:
      command_configureAccelerationTypeSupportInterface (const command_configureAccelerationTypeSupportInterface &);
      command_configureAccelerationTypeSupportInterface & operator = (const command_configureAccelerationTypeSupportInterface &);
   };

   class command_configureAccelerationDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_configureAccelerationDataWriter_ptr _ptr_type;
      typedef command_configureAccelerationDataWriter_var _var_type;

      static command_configureAccelerationDataWriter_ptr _duplicate (command_configureAccelerationDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureAccelerationDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_configureAccelerationDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureAccelerationDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureAccelerationDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_configureAcceleration& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_configureAcceleration& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_configureAcceleration& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_configureAcceleration& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_configureAcceleration& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_configureAcceleration& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_configureAcceleration& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_configureAcceleration& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_configureAcceleration& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_configureAcceleration& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_configureAcceleration& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureAcceleration& instance_data) = 0;

   protected:
      command_configureAccelerationDataWriter () {};
      ~command_configureAccelerationDataWriter () {};
   private:
      command_configureAccelerationDataWriter (const command_configureAccelerationDataWriter &);
      command_configureAccelerationDataWriter & operator = (const command_configureAccelerationDataWriter &);
   };

   class command_configureAccelerationDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_configureAccelerationDataReader_ptr _ptr_type;
      typedef command_configureAccelerationDataReader_var _var_type;

      static command_configureAccelerationDataReader_ptr _duplicate (command_configureAccelerationDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureAccelerationDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_configureAccelerationDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureAccelerationDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureAccelerationDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configureAcceleration& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configureAcceleration& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configureAcceleration& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureAcceleration& instance) = 0;

   protected:
      command_configureAccelerationDataReader () {};
      ~command_configureAccelerationDataReader () {};
   private:
      command_configureAccelerationDataReader (const command_configureAccelerationDataReader &);
      command_configureAccelerationDataReader & operator = (const command_configureAccelerationDataReader &);
   };

   class command_configureAccelerationDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_configureAccelerationDataReaderView_ptr _ptr_type;
      typedef command_configureAccelerationDataReaderView_var _var_type;

      static command_configureAccelerationDataReaderView_ptr _duplicate (command_configureAccelerationDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureAccelerationDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_configureAccelerationDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureAccelerationDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureAccelerationDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configureAcceleration& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configureAcceleration& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureAccelerationSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configureAcceleration& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureAcceleration& instance) = 0;

   protected:
      command_configureAccelerationDataReaderView () {};
      ~command_configureAccelerationDataReaderView () {};
   private:
      command_configureAccelerationDataReaderView (const command_configureAccelerationDataReaderView &);
      command_configureAccelerationDataReaderView & operator = (const command_configureAccelerationDataReaderView &);
   };

   struct command_configureAzimuthCoeffsLutSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_configureAzimuthCoeffsLut, struct command_configureAzimuthCoeffsLutSeq_uniq_> command_configureAzimuthCoeffsLutSeq;
   typedef DDS_DCPSSequence_var < command_configureAzimuthCoeffsLutSeq> command_configureAzimuthCoeffsLutSeq_var;
   typedef DDS_DCPSSequence_out < command_configureAzimuthCoeffsLutSeq> command_configureAzimuthCoeffsLutSeq_out;
   class command_configureAzimuthCoeffsLutTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_configureAzimuthCoeffsLutTypeSupportInterface_ptr _ptr_type;
      typedef command_configureAzimuthCoeffsLutTypeSupportInterface_var _var_type;

      static command_configureAzimuthCoeffsLutTypeSupportInterface_ptr _duplicate (command_configureAzimuthCoeffsLutTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureAzimuthCoeffsLutTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_configureAzimuthCoeffsLutTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureAzimuthCoeffsLutTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureAzimuthCoeffsLutTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_configureAzimuthCoeffsLutTypeSupportInterface () {};
      ~command_configureAzimuthCoeffsLutTypeSupportInterface () {};
   private:
      command_configureAzimuthCoeffsLutTypeSupportInterface (const command_configureAzimuthCoeffsLutTypeSupportInterface &);
      command_configureAzimuthCoeffsLutTypeSupportInterface & operator = (const command_configureAzimuthCoeffsLutTypeSupportInterface &);
   };

   class command_configureAzimuthCoeffsLutDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_configureAzimuthCoeffsLutDataWriter_ptr _ptr_type;
      typedef command_configureAzimuthCoeffsLutDataWriter_var _var_type;

      static command_configureAzimuthCoeffsLutDataWriter_ptr _duplicate (command_configureAzimuthCoeffsLutDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureAzimuthCoeffsLutDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_configureAzimuthCoeffsLutDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureAzimuthCoeffsLutDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureAzimuthCoeffsLutDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_configureAzimuthCoeffsLut& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_configureAzimuthCoeffsLut& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_configureAzimuthCoeffsLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_configureAzimuthCoeffsLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_configureAzimuthCoeffsLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_configureAzimuthCoeffsLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_configureAzimuthCoeffsLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_configureAzimuthCoeffsLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_configureAzimuthCoeffsLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_configureAzimuthCoeffsLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_configureAzimuthCoeffsLut& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureAzimuthCoeffsLut& instance_data) = 0;

   protected:
      command_configureAzimuthCoeffsLutDataWriter () {};
      ~command_configureAzimuthCoeffsLutDataWriter () {};
   private:
      command_configureAzimuthCoeffsLutDataWriter (const command_configureAzimuthCoeffsLutDataWriter &);
      command_configureAzimuthCoeffsLutDataWriter & operator = (const command_configureAzimuthCoeffsLutDataWriter &);
   };

   class command_configureAzimuthCoeffsLutDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_configureAzimuthCoeffsLutDataReader_ptr _ptr_type;
      typedef command_configureAzimuthCoeffsLutDataReader_var _var_type;

      static command_configureAzimuthCoeffsLutDataReader_ptr _duplicate (command_configureAzimuthCoeffsLutDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureAzimuthCoeffsLutDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_configureAzimuthCoeffsLutDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureAzimuthCoeffsLutDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureAzimuthCoeffsLutDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configureAzimuthCoeffsLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configureAzimuthCoeffsLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configureAzimuthCoeffsLut& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureAzimuthCoeffsLut& instance) = 0;

   protected:
      command_configureAzimuthCoeffsLutDataReader () {};
      ~command_configureAzimuthCoeffsLutDataReader () {};
   private:
      command_configureAzimuthCoeffsLutDataReader (const command_configureAzimuthCoeffsLutDataReader &);
      command_configureAzimuthCoeffsLutDataReader & operator = (const command_configureAzimuthCoeffsLutDataReader &);
   };

   class command_configureAzimuthCoeffsLutDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_configureAzimuthCoeffsLutDataReaderView_ptr _ptr_type;
      typedef command_configureAzimuthCoeffsLutDataReaderView_var _var_type;

      static command_configureAzimuthCoeffsLutDataReaderView_ptr _duplicate (command_configureAzimuthCoeffsLutDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureAzimuthCoeffsLutDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_configureAzimuthCoeffsLutDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureAzimuthCoeffsLutDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureAzimuthCoeffsLutDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configureAzimuthCoeffsLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configureAzimuthCoeffsLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureAzimuthCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configureAzimuthCoeffsLut& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureAzimuthCoeffsLut& instance) = 0;

   protected:
      command_configureAzimuthCoeffsLutDataReaderView () {};
      ~command_configureAzimuthCoeffsLutDataReaderView () {};
   private:
      command_configureAzimuthCoeffsLutDataReaderView (const command_configureAzimuthCoeffsLutDataReaderView &);
      command_configureAzimuthCoeffsLutDataReaderView & operator = (const command_configureAzimuthCoeffsLutDataReaderView &);
   };

   struct command_configureAzimuthRawLutSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_configureAzimuthRawLut, struct command_configureAzimuthRawLutSeq_uniq_> command_configureAzimuthRawLutSeq;
   typedef DDS_DCPSSequence_var < command_configureAzimuthRawLutSeq> command_configureAzimuthRawLutSeq_var;
   typedef DDS_DCPSSequence_out < command_configureAzimuthRawLutSeq> command_configureAzimuthRawLutSeq_out;
   class command_configureAzimuthRawLutTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_configureAzimuthRawLutTypeSupportInterface_ptr _ptr_type;
      typedef command_configureAzimuthRawLutTypeSupportInterface_var _var_type;

      static command_configureAzimuthRawLutTypeSupportInterface_ptr _duplicate (command_configureAzimuthRawLutTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureAzimuthRawLutTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_configureAzimuthRawLutTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureAzimuthRawLutTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureAzimuthRawLutTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_configureAzimuthRawLutTypeSupportInterface () {};
      ~command_configureAzimuthRawLutTypeSupportInterface () {};
   private:
      command_configureAzimuthRawLutTypeSupportInterface (const command_configureAzimuthRawLutTypeSupportInterface &);
      command_configureAzimuthRawLutTypeSupportInterface & operator = (const command_configureAzimuthRawLutTypeSupportInterface &);
   };

   class command_configureAzimuthRawLutDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_configureAzimuthRawLutDataWriter_ptr _ptr_type;
      typedef command_configureAzimuthRawLutDataWriter_var _var_type;

      static command_configureAzimuthRawLutDataWriter_ptr _duplicate (command_configureAzimuthRawLutDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureAzimuthRawLutDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_configureAzimuthRawLutDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureAzimuthRawLutDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureAzimuthRawLutDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_configureAzimuthRawLut& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_configureAzimuthRawLut& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_configureAzimuthRawLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_configureAzimuthRawLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_configureAzimuthRawLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_configureAzimuthRawLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_configureAzimuthRawLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_configureAzimuthRawLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_configureAzimuthRawLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_configureAzimuthRawLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_configureAzimuthRawLut& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureAzimuthRawLut& instance_data) = 0;

   protected:
      command_configureAzimuthRawLutDataWriter () {};
      ~command_configureAzimuthRawLutDataWriter () {};
   private:
      command_configureAzimuthRawLutDataWriter (const command_configureAzimuthRawLutDataWriter &);
      command_configureAzimuthRawLutDataWriter & operator = (const command_configureAzimuthRawLutDataWriter &);
   };

   class command_configureAzimuthRawLutDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_configureAzimuthRawLutDataReader_ptr _ptr_type;
      typedef command_configureAzimuthRawLutDataReader_var _var_type;

      static command_configureAzimuthRawLutDataReader_ptr _duplicate (command_configureAzimuthRawLutDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureAzimuthRawLutDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_configureAzimuthRawLutDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureAzimuthRawLutDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureAzimuthRawLutDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configureAzimuthRawLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configureAzimuthRawLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configureAzimuthRawLut& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureAzimuthRawLut& instance) = 0;

   protected:
      command_configureAzimuthRawLutDataReader () {};
      ~command_configureAzimuthRawLutDataReader () {};
   private:
      command_configureAzimuthRawLutDataReader (const command_configureAzimuthRawLutDataReader &);
      command_configureAzimuthRawLutDataReader & operator = (const command_configureAzimuthRawLutDataReader &);
   };

   class command_configureAzimuthRawLutDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_configureAzimuthRawLutDataReaderView_ptr _ptr_type;
      typedef command_configureAzimuthRawLutDataReaderView_var _var_type;

      static command_configureAzimuthRawLutDataReaderView_ptr _duplicate (command_configureAzimuthRawLutDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureAzimuthRawLutDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_configureAzimuthRawLutDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureAzimuthRawLutDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureAzimuthRawLutDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configureAzimuthRawLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configureAzimuthRawLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureAzimuthRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configureAzimuthRawLut& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureAzimuthRawLut& instance) = 0;

   protected:
      command_configureAzimuthRawLutDataReaderView () {};
      ~command_configureAzimuthRawLutDataReaderView () {};
   private:
      command_configureAzimuthRawLutDataReaderView (const command_configureAzimuthRawLutDataReaderView &);
      command_configureAzimuthRawLutDataReaderView & operator = (const command_configureAzimuthRawLutDataReaderView &);
   };

   struct command_configureElevationCoeffsLutSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_configureElevationCoeffsLut, struct command_configureElevationCoeffsLutSeq_uniq_> command_configureElevationCoeffsLutSeq;
   typedef DDS_DCPSSequence_var < command_configureElevationCoeffsLutSeq> command_configureElevationCoeffsLutSeq_var;
   typedef DDS_DCPSSequence_out < command_configureElevationCoeffsLutSeq> command_configureElevationCoeffsLutSeq_out;
   class command_configureElevationCoeffsLutTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_configureElevationCoeffsLutTypeSupportInterface_ptr _ptr_type;
      typedef command_configureElevationCoeffsLutTypeSupportInterface_var _var_type;

      static command_configureElevationCoeffsLutTypeSupportInterface_ptr _duplicate (command_configureElevationCoeffsLutTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureElevationCoeffsLutTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_configureElevationCoeffsLutTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureElevationCoeffsLutTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureElevationCoeffsLutTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_configureElevationCoeffsLutTypeSupportInterface () {};
      ~command_configureElevationCoeffsLutTypeSupportInterface () {};
   private:
      command_configureElevationCoeffsLutTypeSupportInterface (const command_configureElevationCoeffsLutTypeSupportInterface &);
      command_configureElevationCoeffsLutTypeSupportInterface & operator = (const command_configureElevationCoeffsLutTypeSupportInterface &);
   };

   class command_configureElevationCoeffsLutDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_configureElevationCoeffsLutDataWriter_ptr _ptr_type;
      typedef command_configureElevationCoeffsLutDataWriter_var _var_type;

      static command_configureElevationCoeffsLutDataWriter_ptr _duplicate (command_configureElevationCoeffsLutDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureElevationCoeffsLutDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_configureElevationCoeffsLutDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureElevationCoeffsLutDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureElevationCoeffsLutDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_configureElevationCoeffsLut& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_configureElevationCoeffsLut& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_configureElevationCoeffsLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_configureElevationCoeffsLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_configureElevationCoeffsLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_configureElevationCoeffsLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_configureElevationCoeffsLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_configureElevationCoeffsLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_configureElevationCoeffsLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_configureElevationCoeffsLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_configureElevationCoeffsLut& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureElevationCoeffsLut& instance_data) = 0;

   protected:
      command_configureElevationCoeffsLutDataWriter () {};
      ~command_configureElevationCoeffsLutDataWriter () {};
   private:
      command_configureElevationCoeffsLutDataWriter (const command_configureElevationCoeffsLutDataWriter &);
      command_configureElevationCoeffsLutDataWriter & operator = (const command_configureElevationCoeffsLutDataWriter &);
   };

   class command_configureElevationCoeffsLutDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_configureElevationCoeffsLutDataReader_ptr _ptr_type;
      typedef command_configureElevationCoeffsLutDataReader_var _var_type;

      static command_configureElevationCoeffsLutDataReader_ptr _duplicate (command_configureElevationCoeffsLutDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureElevationCoeffsLutDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_configureElevationCoeffsLutDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureElevationCoeffsLutDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureElevationCoeffsLutDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configureElevationCoeffsLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configureElevationCoeffsLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configureElevationCoeffsLut& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureElevationCoeffsLut& instance) = 0;

   protected:
      command_configureElevationCoeffsLutDataReader () {};
      ~command_configureElevationCoeffsLutDataReader () {};
   private:
      command_configureElevationCoeffsLutDataReader (const command_configureElevationCoeffsLutDataReader &);
      command_configureElevationCoeffsLutDataReader & operator = (const command_configureElevationCoeffsLutDataReader &);
   };

   class command_configureElevationCoeffsLutDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_configureElevationCoeffsLutDataReaderView_ptr _ptr_type;
      typedef command_configureElevationCoeffsLutDataReaderView_var _var_type;

      static command_configureElevationCoeffsLutDataReaderView_ptr _duplicate (command_configureElevationCoeffsLutDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureElevationCoeffsLutDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_configureElevationCoeffsLutDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureElevationCoeffsLutDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureElevationCoeffsLutDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configureElevationCoeffsLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configureElevationCoeffsLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureElevationCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configureElevationCoeffsLut& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureElevationCoeffsLut& instance) = 0;

   protected:
      command_configureElevationCoeffsLutDataReaderView () {};
      ~command_configureElevationCoeffsLutDataReaderView () {};
   private:
      command_configureElevationCoeffsLutDataReaderView (const command_configureElevationCoeffsLutDataReaderView &);
      command_configureElevationCoeffsLutDataReaderView & operator = (const command_configureElevationCoeffsLutDataReaderView &);
   };

   struct command_configureElevationRawLutSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_configureElevationRawLut, struct command_configureElevationRawLutSeq_uniq_> command_configureElevationRawLutSeq;
   typedef DDS_DCPSSequence_var < command_configureElevationRawLutSeq> command_configureElevationRawLutSeq_var;
   typedef DDS_DCPSSequence_out < command_configureElevationRawLutSeq> command_configureElevationRawLutSeq_out;
   class command_configureElevationRawLutTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_configureElevationRawLutTypeSupportInterface_ptr _ptr_type;
      typedef command_configureElevationRawLutTypeSupportInterface_var _var_type;

      static command_configureElevationRawLutTypeSupportInterface_ptr _duplicate (command_configureElevationRawLutTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureElevationRawLutTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_configureElevationRawLutTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureElevationRawLutTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureElevationRawLutTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_configureElevationRawLutTypeSupportInterface () {};
      ~command_configureElevationRawLutTypeSupportInterface () {};
   private:
      command_configureElevationRawLutTypeSupportInterface (const command_configureElevationRawLutTypeSupportInterface &);
      command_configureElevationRawLutTypeSupportInterface & operator = (const command_configureElevationRawLutTypeSupportInterface &);
   };

   class command_configureElevationRawLutDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_configureElevationRawLutDataWriter_ptr _ptr_type;
      typedef command_configureElevationRawLutDataWriter_var _var_type;

      static command_configureElevationRawLutDataWriter_ptr _duplicate (command_configureElevationRawLutDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureElevationRawLutDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_configureElevationRawLutDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureElevationRawLutDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureElevationRawLutDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_configureElevationRawLut& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_configureElevationRawLut& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_configureElevationRawLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_configureElevationRawLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_configureElevationRawLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_configureElevationRawLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_configureElevationRawLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_configureElevationRawLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_configureElevationRawLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_configureElevationRawLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_configureElevationRawLut& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureElevationRawLut& instance_data) = 0;

   protected:
      command_configureElevationRawLutDataWriter () {};
      ~command_configureElevationRawLutDataWriter () {};
   private:
      command_configureElevationRawLutDataWriter (const command_configureElevationRawLutDataWriter &);
      command_configureElevationRawLutDataWriter & operator = (const command_configureElevationRawLutDataWriter &);
   };

   class command_configureElevationRawLutDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_configureElevationRawLutDataReader_ptr _ptr_type;
      typedef command_configureElevationRawLutDataReader_var _var_type;

      static command_configureElevationRawLutDataReader_ptr _duplicate (command_configureElevationRawLutDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureElevationRawLutDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_configureElevationRawLutDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureElevationRawLutDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureElevationRawLutDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configureElevationRawLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configureElevationRawLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configureElevationRawLut& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureElevationRawLut& instance) = 0;

   protected:
      command_configureElevationRawLutDataReader () {};
      ~command_configureElevationRawLutDataReader () {};
   private:
      command_configureElevationRawLutDataReader (const command_configureElevationRawLutDataReader &);
      command_configureElevationRawLutDataReader & operator = (const command_configureElevationRawLutDataReader &);
   };

   class command_configureElevationRawLutDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_configureElevationRawLutDataReaderView_ptr _ptr_type;
      typedef command_configureElevationRawLutDataReaderView_var _var_type;

      static command_configureElevationRawLutDataReaderView_ptr _duplicate (command_configureElevationRawLutDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureElevationRawLutDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_configureElevationRawLutDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureElevationRawLutDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureElevationRawLutDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configureElevationRawLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configureElevationRawLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureElevationRawLutSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configureElevationRawLut& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureElevationRawLut& instance) = 0;

   protected:
      command_configureElevationRawLutDataReaderView () {};
      ~command_configureElevationRawLutDataReaderView () {};
   private:
      command_configureElevationRawLutDataReaderView (const command_configureElevationRawLutDataReaderView &);
      command_configureElevationRawLutDataReaderView & operator = (const command_configureElevationRawLutDataReaderView &);
   };

   struct command_configureLimitsSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_configureLimits, struct command_configureLimitsSeq_uniq_> command_configureLimitsSeq;
   typedef DDS_DCPSSequence_var < command_configureLimitsSeq> command_configureLimitsSeq_var;
   typedef DDS_DCPSSequence_out < command_configureLimitsSeq> command_configureLimitsSeq_out;
   class command_configureLimitsTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_configureLimitsTypeSupportInterface_ptr _ptr_type;
      typedef command_configureLimitsTypeSupportInterface_var _var_type;

      static command_configureLimitsTypeSupportInterface_ptr _duplicate (command_configureLimitsTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureLimitsTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_configureLimitsTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureLimitsTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureLimitsTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_configureLimitsTypeSupportInterface () {};
      ~command_configureLimitsTypeSupportInterface () {};
   private:
      command_configureLimitsTypeSupportInterface (const command_configureLimitsTypeSupportInterface &);
      command_configureLimitsTypeSupportInterface & operator = (const command_configureLimitsTypeSupportInterface &);
   };

   class command_configureLimitsDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_configureLimitsDataWriter_ptr _ptr_type;
      typedef command_configureLimitsDataWriter_var _var_type;

      static command_configureLimitsDataWriter_ptr _duplicate (command_configureLimitsDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureLimitsDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_configureLimitsDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureLimitsDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureLimitsDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_configureLimits& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_configureLimits& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_configureLimits& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_configureLimits& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_configureLimits& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_configureLimits& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_configureLimits& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_configureLimits& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_configureLimits& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_configureLimits& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_configureLimits& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureLimits& instance_data) = 0;

   protected:
      command_configureLimitsDataWriter () {};
      ~command_configureLimitsDataWriter () {};
   private:
      command_configureLimitsDataWriter (const command_configureLimitsDataWriter &);
      command_configureLimitsDataWriter & operator = (const command_configureLimitsDataWriter &);
   };

   class command_configureLimitsDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_configureLimitsDataReader_ptr _ptr_type;
      typedef command_configureLimitsDataReader_var _var_type;

      static command_configureLimitsDataReader_ptr _duplicate (command_configureLimitsDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureLimitsDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_configureLimitsDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureLimitsDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureLimitsDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configureLimits& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configureLimits& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configureLimits& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureLimits& instance) = 0;

   protected:
      command_configureLimitsDataReader () {};
      ~command_configureLimitsDataReader () {};
   private:
      command_configureLimitsDataReader (const command_configureLimitsDataReader &);
      command_configureLimitsDataReader & operator = (const command_configureLimitsDataReader &);
   };

   class command_configureLimitsDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_configureLimitsDataReaderView_ptr _ptr_type;
      typedef command_configureLimitsDataReaderView_var _var_type;

      static command_configureLimitsDataReaderView_ptr _duplicate (command_configureLimitsDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureLimitsDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_configureLimitsDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureLimitsDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureLimitsDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configureLimits& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configureLimits& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureLimitsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configureLimits& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureLimits& instance) = 0;

   protected:
      command_configureLimitsDataReaderView () {};
      ~command_configureLimitsDataReaderView () {};
   private:
      command_configureLimitsDataReaderView (const command_configureLimitsDataReaderView &);
      command_configureLimitsDataReaderView & operator = (const command_configureLimitsDataReaderView &);
   };

   struct command_configureTemperatureCoeffsLutSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_configureTemperatureCoeffsLut, struct command_configureTemperatureCoeffsLutSeq_uniq_> command_configureTemperatureCoeffsLutSeq;
   typedef DDS_DCPSSequence_var < command_configureTemperatureCoeffsLutSeq> command_configureTemperatureCoeffsLutSeq_var;
   typedef DDS_DCPSSequence_out < command_configureTemperatureCoeffsLutSeq> command_configureTemperatureCoeffsLutSeq_out;
   class command_configureTemperatureCoeffsLutTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_configureTemperatureCoeffsLutTypeSupportInterface_ptr _ptr_type;
      typedef command_configureTemperatureCoeffsLutTypeSupportInterface_var _var_type;

      static command_configureTemperatureCoeffsLutTypeSupportInterface_ptr _duplicate (command_configureTemperatureCoeffsLutTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureTemperatureCoeffsLutTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_configureTemperatureCoeffsLutTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureTemperatureCoeffsLutTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureTemperatureCoeffsLutTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_configureTemperatureCoeffsLutTypeSupportInterface () {};
      ~command_configureTemperatureCoeffsLutTypeSupportInterface () {};
   private:
      command_configureTemperatureCoeffsLutTypeSupportInterface (const command_configureTemperatureCoeffsLutTypeSupportInterface &);
      command_configureTemperatureCoeffsLutTypeSupportInterface & operator = (const command_configureTemperatureCoeffsLutTypeSupportInterface &);
   };

   class command_configureTemperatureCoeffsLutDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_configureTemperatureCoeffsLutDataWriter_ptr _ptr_type;
      typedef command_configureTemperatureCoeffsLutDataWriter_var _var_type;

      static command_configureTemperatureCoeffsLutDataWriter_ptr _duplicate (command_configureTemperatureCoeffsLutDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureTemperatureCoeffsLutDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_configureTemperatureCoeffsLutDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureTemperatureCoeffsLutDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureTemperatureCoeffsLutDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_configureTemperatureCoeffsLut& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_configureTemperatureCoeffsLut& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_configureTemperatureCoeffsLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_configureTemperatureCoeffsLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_configureTemperatureCoeffsLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_configureTemperatureCoeffsLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_configureTemperatureCoeffsLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_configureTemperatureCoeffsLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_configureTemperatureCoeffsLut& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_configureTemperatureCoeffsLut& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_configureTemperatureCoeffsLut& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureTemperatureCoeffsLut& instance_data) = 0;

   protected:
      command_configureTemperatureCoeffsLutDataWriter () {};
      ~command_configureTemperatureCoeffsLutDataWriter () {};
   private:
      command_configureTemperatureCoeffsLutDataWriter (const command_configureTemperatureCoeffsLutDataWriter &);
      command_configureTemperatureCoeffsLutDataWriter & operator = (const command_configureTemperatureCoeffsLutDataWriter &);
   };

   class command_configureTemperatureCoeffsLutDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_configureTemperatureCoeffsLutDataReader_ptr _ptr_type;
      typedef command_configureTemperatureCoeffsLutDataReader_var _var_type;

      static command_configureTemperatureCoeffsLutDataReader_ptr _duplicate (command_configureTemperatureCoeffsLutDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureTemperatureCoeffsLutDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_configureTemperatureCoeffsLutDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureTemperatureCoeffsLutDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureTemperatureCoeffsLutDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configureTemperatureCoeffsLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configureTemperatureCoeffsLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configureTemperatureCoeffsLut& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureTemperatureCoeffsLut& instance) = 0;

   protected:
      command_configureTemperatureCoeffsLutDataReader () {};
      ~command_configureTemperatureCoeffsLutDataReader () {};
   private:
      command_configureTemperatureCoeffsLutDataReader (const command_configureTemperatureCoeffsLutDataReader &);
      command_configureTemperatureCoeffsLutDataReader & operator = (const command_configureTemperatureCoeffsLutDataReader &);
   };

   class command_configureTemperatureCoeffsLutDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_configureTemperatureCoeffsLutDataReaderView_ptr _ptr_type;
      typedef command_configureTemperatureCoeffsLutDataReaderView_var _var_type;

      static command_configureTemperatureCoeffsLutDataReaderView_ptr _duplicate (command_configureTemperatureCoeffsLutDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureTemperatureCoeffsLutDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_configureTemperatureCoeffsLutDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureTemperatureCoeffsLutDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureTemperatureCoeffsLutDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configureTemperatureCoeffsLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configureTemperatureCoeffsLut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureTemperatureCoeffsLutSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configureTemperatureCoeffsLut& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureTemperatureCoeffsLut& instance) = 0;

   protected:
      command_configureTemperatureCoeffsLutDataReaderView () {};
      ~command_configureTemperatureCoeffsLutDataReaderView () {};
   private:
      command_configureTemperatureCoeffsLutDataReaderView (const command_configureTemperatureCoeffsLutDataReaderView &);
      command_configureTemperatureCoeffsLutDataReaderView & operator = (const command_configureTemperatureCoeffsLutDataReaderView &);
   };

   struct command_configureVelocitySeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_configureVelocity, struct command_configureVelocitySeq_uniq_> command_configureVelocitySeq;
   typedef DDS_DCPSSequence_var < command_configureVelocitySeq> command_configureVelocitySeq_var;
   typedef DDS_DCPSSequence_out < command_configureVelocitySeq> command_configureVelocitySeq_out;
   class command_configureVelocityTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_configureVelocityTypeSupportInterface_ptr _ptr_type;
      typedef command_configureVelocityTypeSupportInterface_var _var_type;

      static command_configureVelocityTypeSupportInterface_ptr _duplicate (command_configureVelocityTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureVelocityTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_configureVelocityTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureVelocityTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureVelocityTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_configureVelocityTypeSupportInterface () {};
      ~command_configureVelocityTypeSupportInterface () {};
   private:
      command_configureVelocityTypeSupportInterface (const command_configureVelocityTypeSupportInterface &);
      command_configureVelocityTypeSupportInterface & operator = (const command_configureVelocityTypeSupportInterface &);
   };

   class command_configureVelocityDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_configureVelocityDataWriter_ptr _ptr_type;
      typedef command_configureVelocityDataWriter_var _var_type;

      static command_configureVelocityDataWriter_ptr _duplicate (command_configureVelocityDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureVelocityDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_configureVelocityDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureVelocityDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureVelocityDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_configureVelocity& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_configureVelocity& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_configureVelocity& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_configureVelocity& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_configureVelocity& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_configureVelocity& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_configureVelocity& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_configureVelocity& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_configureVelocity& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_configureVelocity& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_configureVelocity& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureVelocity& instance_data) = 0;

   protected:
      command_configureVelocityDataWriter () {};
      ~command_configureVelocityDataWriter () {};
   private:
      command_configureVelocityDataWriter (const command_configureVelocityDataWriter &);
      command_configureVelocityDataWriter & operator = (const command_configureVelocityDataWriter &);
   };

   class command_configureVelocityDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_configureVelocityDataReader_ptr _ptr_type;
      typedef command_configureVelocityDataReader_var _var_type;

      static command_configureVelocityDataReader_ptr _duplicate (command_configureVelocityDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureVelocityDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_configureVelocityDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureVelocityDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureVelocityDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configureVelocity& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configureVelocity& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configureVelocity& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureVelocity& instance) = 0;

   protected:
      command_configureVelocityDataReader () {};
      ~command_configureVelocityDataReader () {};
   private:
      command_configureVelocityDataReader (const command_configureVelocityDataReader &);
      command_configureVelocityDataReader & operator = (const command_configureVelocityDataReader &);
   };

   class command_configureVelocityDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_configureVelocityDataReaderView_ptr _ptr_type;
      typedef command_configureVelocityDataReaderView_var _var_type;

      static command_configureVelocityDataReaderView_ptr _duplicate (command_configureVelocityDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureVelocityDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_configureVelocityDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureVelocityDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureVelocityDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configureVelocity& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configureVelocity& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureVelocitySeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configureVelocity& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configureVelocity& instance) = 0;

   protected:
      command_configureVelocityDataReaderView () {};
      ~command_configureVelocityDataReaderView () {};
   private:
      command_configureVelocityDataReaderView (const command_configureVelocityDataReaderView &);
      command_configureVelocityDataReaderView & operator = (const command_configureVelocityDataReaderView &);
   };

   struct command_moveSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_move, struct command_moveSeq_uniq_> command_moveSeq;
   typedef DDS_DCPSSequence_var < command_moveSeq> command_moveSeq_var;
   typedef DDS_DCPSSequence_out < command_moveSeq> command_moveSeq_out;
   class command_moveTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_moveTypeSupportInterface_ptr _ptr_type;
      typedef command_moveTypeSupportInterface_var _var_type;

      static command_moveTypeSupportInterface_ptr _duplicate (command_moveTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_moveTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_moveTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_moveTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_moveTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_moveTypeSupportInterface () {};
      ~command_moveTypeSupportInterface () {};
   private:
      command_moveTypeSupportInterface (const command_moveTypeSupportInterface &);
      command_moveTypeSupportInterface & operator = (const command_moveTypeSupportInterface &);
   };

   class command_moveDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_moveDataWriter_ptr _ptr_type;
      typedef command_moveDataWriter_var _var_type;

      static command_moveDataWriter_ptr _duplicate (command_moveDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_moveDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_moveDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_moveDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_moveDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_move& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_move& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_move& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_move& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_move& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_move& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_move& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_move& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_move& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_move& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_move& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_move& instance_data) = 0;

   protected:
      command_moveDataWriter () {};
      ~command_moveDataWriter () {};
   private:
      command_moveDataWriter (const command_moveDataWriter &);
      command_moveDataWriter & operator = (const command_moveDataWriter &);
   };

   class command_moveDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_moveDataReader_ptr _ptr_type;
      typedef command_moveDataReader_var _var_type;

      static command_moveDataReader_ptr _duplicate (command_moveDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_moveDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_moveDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_moveDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_moveDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_move& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_move& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_move& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_move& instance) = 0;

   protected:
      command_moveDataReader () {};
      ~command_moveDataReader () {};
   private:
      command_moveDataReader (const command_moveDataReader &);
      command_moveDataReader & operator = (const command_moveDataReader &);
   };

   class command_moveDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_moveDataReaderView_ptr _ptr_type;
      typedef command_moveDataReaderView_var _var_type;

      static command_moveDataReaderView_ptr _duplicate (command_moveDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_moveDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_moveDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_moveDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_moveDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_move& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_move& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_moveSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_move& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_move& instance) = 0;

   protected:
      command_moveDataReaderView () {};
      ~command_moveDataReaderView () {};
   private:
      command_moveDataReaderView (const command_moveDataReaderView &);
      command_moveDataReaderView & operator = (const command_moveDataReaderView &);
   };

   struct command_offsetSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_offset, struct command_offsetSeq_uniq_> command_offsetSeq;
   typedef DDS_DCPSSequence_var < command_offsetSeq> command_offsetSeq_var;
   typedef DDS_DCPSSequence_out < command_offsetSeq> command_offsetSeq_out;
   class command_offsetTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_offsetTypeSupportInterface_ptr _ptr_type;
      typedef command_offsetTypeSupportInterface_var _var_type;

      static command_offsetTypeSupportInterface_ptr _duplicate (command_offsetTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_offsetTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_offsetTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_offsetTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_offsetTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_offsetTypeSupportInterface () {};
      ~command_offsetTypeSupportInterface () {};
   private:
      command_offsetTypeSupportInterface (const command_offsetTypeSupportInterface &);
      command_offsetTypeSupportInterface & operator = (const command_offsetTypeSupportInterface &);
   };

   class command_offsetDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_offsetDataWriter_ptr _ptr_type;
      typedef command_offsetDataWriter_var _var_type;

      static command_offsetDataWriter_ptr _duplicate (command_offsetDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_offsetDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_offsetDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_offsetDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_offsetDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_offset& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_offset& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_offset& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_offset& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_offset& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_offset& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_offset& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_offset& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_offset& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_offset& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_offset& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_offset& instance_data) = 0;

   protected:
      command_offsetDataWriter () {};
      ~command_offsetDataWriter () {};
   private:
      command_offsetDataWriter (const command_offsetDataWriter &);
      command_offsetDataWriter & operator = (const command_offsetDataWriter &);
   };

   class command_offsetDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_offsetDataReader_ptr _ptr_type;
      typedef command_offsetDataReader_var _var_type;

      static command_offsetDataReader_ptr _duplicate (command_offsetDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_offsetDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_offsetDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_offsetDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_offsetDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_offset& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_offset& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_offset& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_offset& instance) = 0;

   protected:
      command_offsetDataReader () {};
      ~command_offsetDataReader () {};
   private:
      command_offsetDataReader (const command_offsetDataReader &);
      command_offsetDataReader & operator = (const command_offsetDataReader &);
   };

   class command_offsetDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_offsetDataReaderView_ptr _ptr_type;
      typedef command_offsetDataReaderView_var _var_type;

      static command_offsetDataReaderView_ptr _duplicate (command_offsetDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_offsetDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_offsetDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_offsetDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_offsetDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_offset& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_offset& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_offsetSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_offset& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_offset& instance) = 0;

   protected:
      command_offsetDataReaderView () {};
      ~command_offsetDataReaderView () {};
   private:
      command_offsetDataReaderView (const command_offsetDataReaderView &);
      command_offsetDataReaderView & operator = (const command_offsetDataReaderView &);
   };

   struct command_pivotSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_pivot, struct command_pivotSeq_uniq_> command_pivotSeq;
   typedef DDS_DCPSSequence_var < command_pivotSeq> command_pivotSeq_var;
   typedef DDS_DCPSSequence_out < command_pivotSeq> command_pivotSeq_out;
   class command_pivotTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_pivotTypeSupportInterface_ptr _ptr_type;
      typedef command_pivotTypeSupportInterface_var _var_type;

      static command_pivotTypeSupportInterface_ptr _duplicate (command_pivotTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_pivotTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_pivotTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_pivotTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_pivotTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_pivotTypeSupportInterface () {};
      ~command_pivotTypeSupportInterface () {};
   private:
      command_pivotTypeSupportInterface (const command_pivotTypeSupportInterface &);
      command_pivotTypeSupportInterface & operator = (const command_pivotTypeSupportInterface &);
   };

   class command_pivotDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_pivotDataWriter_ptr _ptr_type;
      typedef command_pivotDataWriter_var _var_type;

      static command_pivotDataWriter_ptr _duplicate (command_pivotDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_pivotDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_pivotDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_pivotDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_pivotDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_pivot& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_pivot& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_pivot& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_pivot& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_pivot& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_pivot& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_pivot& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_pivot& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_pivot& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_pivot& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_pivot& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_pivot& instance_data) = 0;

   protected:
      command_pivotDataWriter () {};
      ~command_pivotDataWriter () {};
   private:
      command_pivotDataWriter (const command_pivotDataWriter &);
      command_pivotDataWriter & operator = (const command_pivotDataWriter &);
   };

   class command_pivotDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_pivotDataReader_ptr _ptr_type;
      typedef command_pivotDataReader_var _var_type;

      static command_pivotDataReader_ptr _duplicate (command_pivotDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_pivotDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_pivotDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_pivotDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_pivotDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_pivot& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_pivot& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_pivot& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_pivot& instance) = 0;

   protected:
      command_pivotDataReader () {};
      ~command_pivotDataReader () {};
   private:
      command_pivotDataReader (const command_pivotDataReader &);
      command_pivotDataReader & operator = (const command_pivotDataReader &);
   };

   class command_pivotDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_pivotDataReaderView_ptr _ptr_type;
      typedef command_pivotDataReaderView_var _var_type;

      static command_pivotDataReaderView_ptr _duplicate (command_pivotDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_pivotDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_pivotDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_pivotDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_pivotDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_pivot& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_pivot& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_pivotSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_pivot& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_pivot& instance) = 0;

   protected:
      command_pivotDataReaderView () {};
      ~command_pivotDataReaderView () {};
   private:
      command_pivotDataReaderView (const command_pivotDataReaderView &);
      command_pivotDataReaderView & operator = (const command_pivotDataReaderView &);
   };

   struct command_positionSetSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_positionSet, struct command_positionSetSeq_uniq_> command_positionSetSeq;
   typedef DDS_DCPSSequence_var < command_positionSetSeq> command_positionSetSeq_var;
   typedef DDS_DCPSSequence_out < command_positionSetSeq> command_positionSetSeq_out;
   class command_positionSetTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_positionSetTypeSupportInterface_ptr _ptr_type;
      typedef command_positionSetTypeSupportInterface_var _var_type;

      static command_positionSetTypeSupportInterface_ptr _duplicate (command_positionSetTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_positionSetTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_positionSetTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_positionSetTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_positionSetTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_positionSetTypeSupportInterface () {};
      ~command_positionSetTypeSupportInterface () {};
   private:
      command_positionSetTypeSupportInterface (const command_positionSetTypeSupportInterface &);
      command_positionSetTypeSupportInterface & operator = (const command_positionSetTypeSupportInterface &);
   };

   class command_positionSetDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_positionSetDataWriter_ptr _ptr_type;
      typedef command_positionSetDataWriter_var _var_type;

      static command_positionSetDataWriter_ptr _duplicate (command_positionSetDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_positionSetDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_positionSetDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_positionSetDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_positionSetDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_positionSet& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_positionSet& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_positionSet& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_positionSet& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_positionSet& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_positionSet& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_positionSet& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_positionSet& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_positionSet& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_positionSet& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_positionSet& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_positionSet& instance_data) = 0;

   protected:
      command_positionSetDataWriter () {};
      ~command_positionSetDataWriter () {};
   private:
      command_positionSetDataWriter (const command_positionSetDataWriter &);
      command_positionSetDataWriter & operator = (const command_positionSetDataWriter &);
   };

   class command_positionSetDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_positionSetDataReader_ptr _ptr_type;
      typedef command_positionSetDataReader_var _var_type;

      static command_positionSetDataReader_ptr _duplicate (command_positionSetDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_positionSetDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_positionSetDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_positionSetDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_positionSetDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_positionSet& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_positionSet& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_positionSet& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_positionSet& instance) = 0;

   protected:
      command_positionSetDataReader () {};
      ~command_positionSetDataReader () {};
   private:
      command_positionSetDataReader (const command_positionSetDataReader &);
      command_positionSetDataReader & operator = (const command_positionSetDataReader &);
   };

   class command_positionSetDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_positionSetDataReaderView_ptr _ptr_type;
      typedef command_positionSetDataReaderView_var _var_type;

      static command_positionSetDataReaderView_ptr _duplicate (command_positionSetDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_positionSetDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_positionSetDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_positionSetDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_positionSetDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_positionSet& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_positionSet& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_positionSetSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_positionSet& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_positionSet& instance) = 0;

   protected:
      command_positionSetDataReaderView () {};
      ~command_positionSetDataReaderView () {};
   private:
      command_positionSetDataReaderView (const command_positionSetDataReaderView &);
      command_positionSetDataReaderView & operator = (const command_positionSetDataReaderView &);
   };

   struct command_rawPositionSetSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_rawPositionSet, struct command_rawPositionSetSeq_uniq_> command_rawPositionSetSeq;
   typedef DDS_DCPSSequence_var < command_rawPositionSetSeq> command_rawPositionSetSeq_var;
   typedef DDS_DCPSSequence_out < command_rawPositionSetSeq> command_rawPositionSetSeq_out;
   class command_rawPositionSetTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_rawPositionSetTypeSupportInterface_ptr _ptr_type;
      typedef command_rawPositionSetTypeSupportInterface_var _var_type;

      static command_rawPositionSetTypeSupportInterface_ptr _duplicate (command_rawPositionSetTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_rawPositionSetTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_rawPositionSetTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_rawPositionSetTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_rawPositionSetTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_rawPositionSetTypeSupportInterface () {};
      ~command_rawPositionSetTypeSupportInterface () {};
   private:
      command_rawPositionSetTypeSupportInterface (const command_rawPositionSetTypeSupportInterface &);
      command_rawPositionSetTypeSupportInterface & operator = (const command_rawPositionSetTypeSupportInterface &);
   };

   class command_rawPositionSetDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_rawPositionSetDataWriter_ptr _ptr_type;
      typedef command_rawPositionSetDataWriter_var _var_type;

      static command_rawPositionSetDataWriter_ptr _duplicate (command_rawPositionSetDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_rawPositionSetDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_rawPositionSetDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_rawPositionSetDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_rawPositionSetDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_rawPositionSet& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_rawPositionSet& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_rawPositionSet& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_rawPositionSet& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_rawPositionSet& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_rawPositionSet& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_rawPositionSet& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_rawPositionSet& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_rawPositionSet& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_rawPositionSet& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_rawPositionSet& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_rawPositionSet& instance_data) = 0;

   protected:
      command_rawPositionSetDataWriter () {};
      ~command_rawPositionSetDataWriter () {};
   private:
      command_rawPositionSetDataWriter (const command_rawPositionSetDataWriter &);
      command_rawPositionSetDataWriter & operator = (const command_rawPositionSetDataWriter &);
   };

   class command_rawPositionSetDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_rawPositionSetDataReader_ptr _ptr_type;
      typedef command_rawPositionSetDataReader_var _var_type;

      static command_rawPositionSetDataReader_ptr _duplicate (command_rawPositionSetDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_rawPositionSetDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_rawPositionSetDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_rawPositionSetDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_rawPositionSetDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_rawPositionSet& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_rawPositionSet& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_rawPositionSet& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_rawPositionSet& instance) = 0;

   protected:
      command_rawPositionSetDataReader () {};
      ~command_rawPositionSetDataReader () {};
   private:
      command_rawPositionSetDataReader (const command_rawPositionSetDataReader &);
      command_rawPositionSetDataReader & operator = (const command_rawPositionSetDataReader &);
   };

   class command_rawPositionSetDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_rawPositionSetDataReaderView_ptr _ptr_type;
      typedef command_rawPositionSetDataReaderView_var _var_type;

      static command_rawPositionSetDataReaderView_ptr _duplicate (command_rawPositionSetDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_rawPositionSetDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_rawPositionSetDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_rawPositionSetDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_rawPositionSetDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_rawPositionSet& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_rawPositionSet& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_rawPositionSetSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_rawPositionSet& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_rawPositionSet& instance) = 0;

   protected:
      command_rawPositionSetDataReaderView () {};
      ~command_rawPositionSetDataReaderView () {};
   private:
      command_rawPositionSetDataReaderView (const command_rawPositionSetDataReaderView &);
      command_rawPositionSetDataReaderView & operator = (const command_rawPositionSetDataReaderView &);
   };

   struct command_testSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_test, struct command_testSeq_uniq_> command_testSeq;
   typedef DDS_DCPSSequence_var < command_testSeq> command_testSeq_var;
   typedef DDS_DCPSSequence_out < command_testSeq> command_testSeq_out;
   class command_testTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_testTypeSupportInterface_ptr _ptr_type;
      typedef command_testTypeSupportInterface_var _var_type;

      static command_testTypeSupportInterface_ptr _duplicate (command_testTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_testTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_testTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_testTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_testTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_testTypeSupportInterface () {};
      ~command_testTypeSupportInterface () {};
   private:
      command_testTypeSupportInterface (const command_testTypeSupportInterface &);
      command_testTypeSupportInterface & operator = (const command_testTypeSupportInterface &);
   };

   class command_testDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_testDataWriter_ptr _ptr_type;
      typedef command_testDataWriter_var _var_type;

      static command_testDataWriter_ptr _duplicate (command_testDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_testDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_testDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_testDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_testDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_test& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_test& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_test& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_test& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_test& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_test& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_test& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_test& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_test& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_test& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_test& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_test& instance_data) = 0;

   protected:
      command_testDataWriter () {};
      ~command_testDataWriter () {};
   private:
      command_testDataWriter (const command_testDataWriter &);
      command_testDataWriter & operator = (const command_testDataWriter &);
   };

   class command_testDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_testDataReader_ptr _ptr_type;
      typedef command_testDataReader_var _var_type;

      static command_testDataReader_ptr _duplicate (command_testDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_testDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_testDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_testDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_testDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_test& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_test& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_test& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_test& instance) = 0;

   protected:
      command_testDataReader () {};
      ~command_testDataReader () {};
   private:
      command_testDataReader (const command_testDataReader &);
      command_testDataReader & operator = (const command_testDataReader &);
   };

   class command_testDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_testDataReaderView_ptr _ptr_type;
      typedef command_testDataReaderView_var _var_type;

      static command_testDataReaderView_ptr _duplicate (command_testDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_testDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_testDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_testDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_testDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_test& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_test& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_test& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_test& instance) = 0;

   protected:
      command_testDataReaderView () {};
      ~command_testDataReaderView () {};
   private:
      command_testDataReaderView (const command_testDataReaderView &);
      command_testDataReaderView & operator = (const command_testDataReaderView &);
   };

   struct logevent_TempErrorSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_TempError, struct logevent_TempErrorSeq_uniq_> logevent_TempErrorSeq;
   typedef DDS_DCPSSequence_var < logevent_TempErrorSeq> logevent_TempErrorSeq_var;
   typedef DDS_DCPSSequence_out < logevent_TempErrorSeq> logevent_TempErrorSeq_out;
   class logevent_TempErrorTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_TempErrorTypeSupportInterface_ptr _ptr_type;
      typedef logevent_TempErrorTypeSupportInterface_var _var_type;

      static logevent_TempErrorTypeSupportInterface_ptr _duplicate (logevent_TempErrorTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_TempErrorTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_TempErrorTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_TempErrorTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_TempErrorTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_TempErrorTypeSupportInterface () {};
      ~logevent_TempErrorTypeSupportInterface () {};
   private:
      logevent_TempErrorTypeSupportInterface (const logevent_TempErrorTypeSupportInterface &);
      logevent_TempErrorTypeSupportInterface & operator = (const logevent_TempErrorTypeSupportInterface &);
   };

   class logevent_TempErrorDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_TempErrorDataWriter_ptr _ptr_type;
      typedef logevent_TempErrorDataWriter_var _var_type;

      static logevent_TempErrorDataWriter_ptr _duplicate (logevent_TempErrorDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_TempErrorDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_TempErrorDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_TempErrorDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_TempErrorDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_TempError& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_TempError& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_TempError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_TempError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_TempError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_TempError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_TempError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_TempError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_TempError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_TempError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_TempError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_TempError& instance_data) = 0;

   protected:
      logevent_TempErrorDataWriter () {};
      ~logevent_TempErrorDataWriter () {};
   private:
      logevent_TempErrorDataWriter (const logevent_TempErrorDataWriter &);
      logevent_TempErrorDataWriter & operator = (const logevent_TempErrorDataWriter &);
   };

   class logevent_TempErrorDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_TempErrorDataReader_ptr _ptr_type;
      typedef logevent_TempErrorDataReader_var _var_type;

      static logevent_TempErrorDataReader_ptr _duplicate (logevent_TempErrorDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_TempErrorDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_TempErrorDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_TempErrorDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_TempErrorDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_TempError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_TempError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_TempError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_TempError& instance) = 0;

   protected:
      logevent_TempErrorDataReader () {};
      ~logevent_TempErrorDataReader () {};
   private:
      logevent_TempErrorDataReader (const logevent_TempErrorDataReader &);
      logevent_TempErrorDataReader & operator = (const logevent_TempErrorDataReader &);
   };

   class logevent_TempErrorDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_TempErrorDataReaderView_ptr _ptr_type;
      typedef logevent_TempErrorDataReaderView_var _var_type;

      static logevent_TempErrorDataReaderView_ptr _duplicate (logevent_TempErrorDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_TempErrorDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_TempErrorDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_TempErrorDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_TempErrorDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_TempError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_TempError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_TempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_TempError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_TempError& instance) = 0;

   protected:
      logevent_TempErrorDataReaderView () {};
      ~logevent_TempErrorDataReaderView () {};
   private:
      logevent_TempErrorDataReaderView (const logevent_TempErrorDataReaderView &);
      logevent_TempErrorDataReaderView & operator = (const logevent_TempErrorDataReaderView &);
   };

   struct logevent_TrackLostSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_TrackLost, struct logevent_TrackLostSeq_uniq_> logevent_TrackLostSeq;
   typedef DDS_DCPSSequence_var < logevent_TrackLostSeq> logevent_TrackLostSeq_var;
   typedef DDS_DCPSSequence_out < logevent_TrackLostSeq> logevent_TrackLostSeq_out;
   class logevent_TrackLostTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_TrackLostTypeSupportInterface_ptr _ptr_type;
      typedef logevent_TrackLostTypeSupportInterface_var _var_type;

      static logevent_TrackLostTypeSupportInterface_ptr _duplicate (logevent_TrackLostTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_TrackLostTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_TrackLostTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_TrackLostTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_TrackLostTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_TrackLostTypeSupportInterface () {};
      ~logevent_TrackLostTypeSupportInterface () {};
   private:
      logevent_TrackLostTypeSupportInterface (const logevent_TrackLostTypeSupportInterface &);
      logevent_TrackLostTypeSupportInterface & operator = (const logevent_TrackLostTypeSupportInterface &);
   };

   class logevent_TrackLostDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_TrackLostDataWriter_ptr _ptr_type;
      typedef logevent_TrackLostDataWriter_var _var_type;

      static logevent_TrackLostDataWriter_ptr _duplicate (logevent_TrackLostDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_TrackLostDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_TrackLostDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_TrackLostDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_TrackLostDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_TrackLost& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_TrackLost& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_TrackLost& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_TrackLost& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_TrackLost& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_TrackLost& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_TrackLost& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_TrackLost& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_TrackLost& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_TrackLost& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_TrackLost& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_TrackLost& instance_data) = 0;

   protected:
      logevent_TrackLostDataWriter () {};
      ~logevent_TrackLostDataWriter () {};
   private:
      logevent_TrackLostDataWriter (const logevent_TrackLostDataWriter &);
      logevent_TrackLostDataWriter & operator = (const logevent_TrackLostDataWriter &);
   };

   class logevent_TrackLostDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_TrackLostDataReader_ptr _ptr_type;
      typedef logevent_TrackLostDataReader_var _var_type;

      static logevent_TrackLostDataReader_ptr _duplicate (logevent_TrackLostDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_TrackLostDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_TrackLostDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_TrackLostDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_TrackLostDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_TrackLost& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_TrackLost& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_TrackLost& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_TrackLost& instance) = 0;

   protected:
      logevent_TrackLostDataReader () {};
      ~logevent_TrackLostDataReader () {};
   private:
      logevent_TrackLostDataReader (const logevent_TrackLostDataReader &);
      logevent_TrackLostDataReader & operator = (const logevent_TrackLostDataReader &);
   };

   class logevent_TrackLostDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_TrackLostDataReaderView_ptr _ptr_type;
      typedef logevent_TrackLostDataReaderView_var _var_type;

      static logevent_TrackLostDataReaderView_ptr _duplicate (logevent_TrackLostDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_TrackLostDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_TrackLostDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_TrackLostDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_TrackLostDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_TrackLost& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_TrackLost& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_TrackLostSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_TrackLost& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_TrackLost& instance) = 0;

   protected:
      logevent_TrackLostDataReaderView () {};
      ~logevent_TrackLostDataReaderView () {};
   private:
      logevent_TrackLostDataReaderView (const logevent_TrackLostDataReaderView &);
      logevent_TrackLostDataReaderView & operator = (const logevent_TrackLostDataReaderView &);
   };

   struct logevent_TrackingSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_Tracking, struct logevent_TrackingSeq_uniq_> logevent_TrackingSeq;
   typedef DDS_DCPSSequence_var < logevent_TrackingSeq> logevent_TrackingSeq_var;
   typedef DDS_DCPSSequence_out < logevent_TrackingSeq> logevent_TrackingSeq_out;
   class logevent_TrackingTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_TrackingTypeSupportInterface_ptr _ptr_type;
      typedef logevent_TrackingTypeSupportInterface_var _var_type;

      static logevent_TrackingTypeSupportInterface_ptr _duplicate (logevent_TrackingTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_TrackingTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_TrackingTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_TrackingTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_TrackingTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_TrackingTypeSupportInterface () {};
      ~logevent_TrackingTypeSupportInterface () {};
   private:
      logevent_TrackingTypeSupportInterface (const logevent_TrackingTypeSupportInterface &);
      logevent_TrackingTypeSupportInterface & operator = (const logevent_TrackingTypeSupportInterface &);
   };

   class logevent_TrackingDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_TrackingDataWriter_ptr _ptr_type;
      typedef logevent_TrackingDataWriter_var _var_type;

      static logevent_TrackingDataWriter_ptr _duplicate (logevent_TrackingDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_TrackingDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_TrackingDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_TrackingDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_TrackingDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_Tracking& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_Tracking& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_Tracking& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_Tracking& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_Tracking& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_Tracking& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_Tracking& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_Tracking& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_Tracking& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_Tracking& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_Tracking& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_Tracking& instance_data) = 0;

   protected:
      logevent_TrackingDataWriter () {};
      ~logevent_TrackingDataWriter () {};
   private:
      logevent_TrackingDataWriter (const logevent_TrackingDataWriter &);
      logevent_TrackingDataWriter & operator = (const logevent_TrackingDataWriter &);
   };

   class logevent_TrackingDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_TrackingDataReader_ptr _ptr_type;
      typedef logevent_TrackingDataReader_var _var_type;

      static logevent_TrackingDataReader_ptr _duplicate (logevent_TrackingDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_TrackingDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_TrackingDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_TrackingDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_TrackingDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_Tracking& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_Tracking& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_Tracking& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_Tracking& instance) = 0;

   protected:
      logevent_TrackingDataReader () {};
      ~logevent_TrackingDataReader () {};
   private:
      logevent_TrackingDataReader (const logevent_TrackingDataReader &);
      logevent_TrackingDataReader & operator = (const logevent_TrackingDataReader &);
   };

   class logevent_TrackingDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_TrackingDataReaderView_ptr _ptr_type;
      typedef logevent_TrackingDataReaderView_var _var_type;

      static logevent_TrackingDataReaderView_ptr _duplicate (logevent_TrackingDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_TrackingDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_TrackingDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_TrackingDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_TrackingDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_Tracking& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_Tracking& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_TrackingSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_Tracking& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_Tracking& instance) = 0;

   protected:
      logevent_TrackingDataReaderView () {};
      ~logevent_TrackingDataReaderView () {};
   private:
      logevent_TrackingDataReaderView (const logevent_TrackingDataReaderView &);
      logevent_TrackingDataReaderView & operator = (const logevent_TrackingDataReaderView &);
   };

   struct logevent_deviceErrorSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_deviceError, struct logevent_deviceErrorSeq_uniq_> logevent_deviceErrorSeq;
   typedef DDS_DCPSSequence_var < logevent_deviceErrorSeq> logevent_deviceErrorSeq_var;
   typedef DDS_DCPSSequence_out < logevent_deviceErrorSeq> logevent_deviceErrorSeq_out;
   class logevent_deviceErrorTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_deviceErrorTypeSupportInterface_ptr _ptr_type;
      typedef logevent_deviceErrorTypeSupportInterface_var _var_type;

      static logevent_deviceErrorTypeSupportInterface_ptr _duplicate (logevent_deviceErrorTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_deviceErrorTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_deviceErrorTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_deviceErrorTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_deviceErrorTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_deviceErrorTypeSupportInterface () {};
      ~logevent_deviceErrorTypeSupportInterface () {};
   private:
      logevent_deviceErrorTypeSupportInterface (const logevent_deviceErrorTypeSupportInterface &);
      logevent_deviceErrorTypeSupportInterface & operator = (const logevent_deviceErrorTypeSupportInterface &);
   };

   class logevent_deviceErrorDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_deviceErrorDataWriter_ptr _ptr_type;
      typedef logevent_deviceErrorDataWriter_var _var_type;

      static logevent_deviceErrorDataWriter_ptr _duplicate (logevent_deviceErrorDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_deviceErrorDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_deviceErrorDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_deviceErrorDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_deviceErrorDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_deviceError& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_deviceError& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_deviceError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_deviceError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_deviceError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_deviceError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_deviceError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_deviceError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_deviceError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_deviceError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_deviceError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_deviceError& instance_data) = 0;

   protected:
      logevent_deviceErrorDataWriter () {};
      ~logevent_deviceErrorDataWriter () {};
   private:
      logevent_deviceErrorDataWriter (const logevent_deviceErrorDataWriter &);
      logevent_deviceErrorDataWriter & operator = (const logevent_deviceErrorDataWriter &);
   };

   class logevent_deviceErrorDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_deviceErrorDataReader_ptr _ptr_type;
      typedef logevent_deviceErrorDataReader_var _var_type;

      static logevent_deviceErrorDataReader_ptr _duplicate (logevent_deviceErrorDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_deviceErrorDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_deviceErrorDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_deviceErrorDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_deviceErrorDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_deviceError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_deviceError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_deviceError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_deviceError& instance) = 0;

   protected:
      logevent_deviceErrorDataReader () {};
      ~logevent_deviceErrorDataReader () {};
   private:
      logevent_deviceErrorDataReader (const logevent_deviceErrorDataReader &);
      logevent_deviceErrorDataReader & operator = (const logevent_deviceErrorDataReader &);
   };

   class logevent_deviceErrorDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_deviceErrorDataReaderView_ptr _ptr_type;
      typedef logevent_deviceErrorDataReaderView_var _var_type;

      static logevent_deviceErrorDataReaderView_ptr _duplicate (logevent_deviceErrorDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_deviceErrorDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_deviceErrorDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_deviceErrorDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_deviceErrorDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_deviceError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_deviceError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_deviceErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_deviceError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_deviceError& instance) = 0;

   protected:
      logevent_deviceErrorDataReaderView () {};
      ~logevent_deviceErrorDataReaderView () {};
   private:
      logevent_deviceErrorDataReaderView (const logevent_deviceErrorDataReaderView &);
      logevent_deviceErrorDataReaderView & operator = (const logevent_deviceErrorDataReaderView &);
   };

   struct logevent_inPositionSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_inPosition, struct logevent_inPositionSeq_uniq_> logevent_inPositionSeq;
   typedef DDS_DCPSSequence_var < logevent_inPositionSeq> logevent_inPositionSeq_var;
   typedef DDS_DCPSSequence_out < logevent_inPositionSeq> logevent_inPositionSeq_out;
   class logevent_inPositionTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_inPositionTypeSupportInterface_ptr _ptr_type;
      typedef logevent_inPositionTypeSupportInterface_var _var_type;

      static logevent_inPositionTypeSupportInterface_ptr _duplicate (logevent_inPositionTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_inPositionTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_inPositionTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_inPositionTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_inPositionTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_inPositionTypeSupportInterface () {};
      ~logevent_inPositionTypeSupportInterface () {};
   private:
      logevent_inPositionTypeSupportInterface (const logevent_inPositionTypeSupportInterface &);
      logevent_inPositionTypeSupportInterface & operator = (const logevent_inPositionTypeSupportInterface &);
   };

   class logevent_inPositionDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_inPositionDataWriter_ptr _ptr_type;
      typedef logevent_inPositionDataWriter_var _var_type;

      static logevent_inPositionDataWriter_ptr _duplicate (logevent_inPositionDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_inPositionDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_inPositionDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_inPositionDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_inPositionDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_inPosition& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_inPosition& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_inPosition& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_inPosition& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_inPosition& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_inPosition& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_inPosition& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_inPosition& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_inPosition& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_inPosition& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_inPosition& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_inPosition& instance_data) = 0;

   protected:
      logevent_inPositionDataWriter () {};
      ~logevent_inPositionDataWriter () {};
   private:
      logevent_inPositionDataWriter (const logevent_inPositionDataWriter &);
      logevent_inPositionDataWriter & operator = (const logevent_inPositionDataWriter &);
   };

   class logevent_inPositionDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_inPositionDataReader_ptr _ptr_type;
      typedef logevent_inPositionDataReader_var _var_type;

      static logevent_inPositionDataReader_ptr _duplicate (logevent_inPositionDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_inPositionDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_inPositionDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_inPositionDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_inPositionDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_inPosition& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_inPosition& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_inPosition& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_inPosition& instance) = 0;

   protected:
      logevent_inPositionDataReader () {};
      ~logevent_inPositionDataReader () {};
   private:
      logevent_inPositionDataReader (const logevent_inPositionDataReader &);
      logevent_inPositionDataReader & operator = (const logevent_inPositionDataReader &);
   };

   class logevent_inPositionDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_inPositionDataReaderView_ptr _ptr_type;
      typedef logevent_inPositionDataReaderView_var _var_type;

      static logevent_inPositionDataReaderView_ptr _duplicate (logevent_inPositionDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_inPositionDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_inPositionDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_inPositionDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_inPositionDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_inPosition& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_inPosition& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_inPositionSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_inPosition& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_inPosition& instance) = 0;

   protected:
      logevent_inPositionDataReaderView () {};
      ~logevent_inPositionDataReaderView () {};
   private:
      logevent_inPositionDataReaderView (const logevent_inPositionDataReaderView &);
      logevent_inPositionDataReaderView & operator = (const logevent_inPositionDataReaderView &);
   };

   struct logevent_interlockSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_interlock, struct logevent_interlockSeq_uniq_> logevent_interlockSeq;
   typedef DDS_DCPSSequence_var < logevent_interlockSeq> logevent_interlockSeq_var;
   typedef DDS_DCPSSequence_out < logevent_interlockSeq> logevent_interlockSeq_out;
   class logevent_interlockTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_interlockTypeSupportInterface_ptr _ptr_type;
      typedef logevent_interlockTypeSupportInterface_var _var_type;

      static logevent_interlockTypeSupportInterface_ptr _duplicate (logevent_interlockTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_interlockTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_interlockTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_interlockTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_interlockTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_interlockTypeSupportInterface () {};
      ~logevent_interlockTypeSupportInterface () {};
   private:
      logevent_interlockTypeSupportInterface (const logevent_interlockTypeSupportInterface &);
      logevent_interlockTypeSupportInterface & operator = (const logevent_interlockTypeSupportInterface &);
   };

   class logevent_interlockDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_interlockDataWriter_ptr _ptr_type;
      typedef logevent_interlockDataWriter_var _var_type;

      static logevent_interlockDataWriter_ptr _duplicate (logevent_interlockDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_interlockDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_interlockDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_interlockDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_interlockDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_interlock& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_interlock& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_interlock& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_interlock& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_interlock& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_interlock& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_interlock& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_interlock& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_interlock& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_interlock& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_interlock& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_interlock& instance_data) = 0;

   protected:
      logevent_interlockDataWriter () {};
      ~logevent_interlockDataWriter () {};
   private:
      logevent_interlockDataWriter (const logevent_interlockDataWriter &);
      logevent_interlockDataWriter & operator = (const logevent_interlockDataWriter &);
   };

   class logevent_interlockDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_interlockDataReader_ptr _ptr_type;
      typedef logevent_interlockDataReader_var _var_type;

      static logevent_interlockDataReader_ptr _duplicate (logevent_interlockDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_interlockDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_interlockDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_interlockDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_interlockDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_interlock& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_interlock& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_interlock& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_interlock& instance) = 0;

   protected:
      logevent_interlockDataReader () {};
      ~logevent_interlockDataReader () {};
   private:
      logevent_interlockDataReader (const logevent_interlockDataReader &);
      logevent_interlockDataReader & operator = (const logevent_interlockDataReader &);
   };

   class logevent_interlockDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_interlockDataReaderView_ptr _ptr_type;
      typedef logevent_interlockDataReaderView_var _var_type;

      static logevent_interlockDataReaderView_ptr _duplicate (logevent_interlockDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_interlockDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_interlockDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_interlockDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_interlockDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_interlock& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_interlock& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_interlock& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_interlock& instance) = 0;

   protected:
      logevent_interlockDataReaderView () {};
      ~logevent_interlockDataReaderView () {};
   private:
      logevent_interlockDataReaderView (const logevent_interlockDataReaderView &);
      logevent_interlockDataReaderView & operator = (const logevent_interlockDataReaderView &);
   };

   struct logevent_limitSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_limit, struct logevent_limitSeq_uniq_> logevent_limitSeq;
   typedef DDS_DCPSSequence_var < logevent_limitSeq> logevent_limitSeq_var;
   typedef DDS_DCPSSequence_out < logevent_limitSeq> logevent_limitSeq_out;
   class logevent_limitTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_limitTypeSupportInterface_ptr _ptr_type;
      typedef logevent_limitTypeSupportInterface_var _var_type;

      static logevent_limitTypeSupportInterface_ptr _duplicate (logevent_limitTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_limitTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_limitTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_limitTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_limitTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_limitTypeSupportInterface () {};
      ~logevent_limitTypeSupportInterface () {};
   private:
      logevent_limitTypeSupportInterface (const logevent_limitTypeSupportInterface &);
      logevent_limitTypeSupportInterface & operator = (const logevent_limitTypeSupportInterface &);
   };

   class logevent_limitDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_limitDataWriter_ptr _ptr_type;
      typedef logevent_limitDataWriter_var _var_type;

      static logevent_limitDataWriter_ptr _duplicate (logevent_limitDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_limitDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_limitDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_limitDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_limitDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_limit& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_limit& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_limit& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_limit& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_limit& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_limit& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_limit& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_limit& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_limit& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_limit& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_limit& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_limit& instance_data) = 0;

   protected:
      logevent_limitDataWriter () {};
      ~logevent_limitDataWriter () {};
   private:
      logevent_limitDataWriter (const logevent_limitDataWriter &);
      logevent_limitDataWriter & operator = (const logevent_limitDataWriter &);
   };

   class logevent_limitDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_limitDataReader_ptr _ptr_type;
      typedef logevent_limitDataReader_var _var_type;

      static logevent_limitDataReader_ptr _duplicate (logevent_limitDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_limitDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_limitDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_limitDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_limitDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_limit& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_limit& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_limit& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_limit& instance) = 0;

   protected:
      logevent_limitDataReader () {};
      ~logevent_limitDataReader () {};
   private:
      logevent_limitDataReader (const logevent_limitDataReader &);
      logevent_limitDataReader & operator = (const logevent_limitDataReader &);
   };

   class logevent_limitDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_limitDataReaderView_ptr _ptr_type;
      typedef logevent_limitDataReaderView_var _var_type;

      static logevent_limitDataReaderView_ptr _duplicate (logevent_limitDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_limitDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_limitDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_limitDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_limitDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_limit& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_limit& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_limitSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_limit& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_limit& instance) = 0;

   protected:
      logevent_limitDataReaderView () {};
      ~logevent_limitDataReaderView () {};
   private:
      logevent_limitDataReaderView (const logevent_limitDataReaderView &);
      logevent_limitDataReaderView & operator = (const logevent_limitDataReaderView &);
   };

   struct commandSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command, struct commandSeq_uniq_> commandSeq;
   typedef DDS_DCPSSequence_var < commandSeq> commandSeq_var;
   typedef DDS_DCPSSequence_out < commandSeq> commandSeq_out;
   class commandTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef commandTypeSupportInterface_ptr _ptr_type;
      typedef commandTypeSupportInterface_var _var_type;

      static commandTypeSupportInterface_ptr _duplicate (commandTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static commandTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      commandTypeSupportInterface_ptr _this () { return this; }


   protected:
      commandTypeSupportInterface () {};
      ~commandTypeSupportInterface () {};
   private:
      commandTypeSupportInterface (const commandTypeSupportInterface &);
      commandTypeSupportInterface & operator = (const commandTypeSupportInterface &);
   };

   class commandDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef commandDataWriter_ptr _ptr_type;
      typedef commandDataWriter_var _var_type;

      static commandDataWriter_ptr _duplicate (commandDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static commandDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      commandDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command& instance_data) = 0;

   protected:
      commandDataWriter () {};
      ~commandDataWriter () {};
   private:
      commandDataWriter (const commandDataWriter &);
      commandDataWriter & operator = (const commandDataWriter &);
   };

   class commandDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef commandDataReader_ptr _ptr_type;
      typedef commandDataReader_var _var_type;

      static commandDataReader_ptr _duplicate (commandDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandDataReader_ptr _narrow (DDS::Object_ptr obj);
      static commandDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      commandDataReader_ptr _this () { return this; }

      virtual DDS::Long read (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (commandSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command& instance) = 0;

   protected:
      commandDataReader () {};
      ~commandDataReader () {};
   private:
      commandDataReader (const commandDataReader &);
      commandDataReader & operator = (const commandDataReader &);
   };

   class commandDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef commandDataReaderView_ptr _ptr_type;
      typedef commandDataReaderView_var _var_type;

      static commandDataReaderView_ptr _duplicate (commandDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static commandDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      commandDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (commandSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command& instance) = 0;

   protected:
      commandDataReaderView () {};
      ~commandDataReaderView () {};
   private:
      commandDataReaderView (const commandDataReaderView &);
      commandDataReaderView & operator = (const commandDataReaderView &);
   };

   struct ackcmdSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < ackcmd, struct ackcmdSeq_uniq_> ackcmdSeq;
   typedef DDS_DCPSSequence_var < ackcmdSeq> ackcmdSeq_var;
   typedef DDS_DCPSSequence_out < ackcmdSeq> ackcmdSeq_out;
   class ackcmdTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ackcmdTypeSupportInterface_ptr _ptr_type;
      typedef ackcmdTypeSupportInterface_var _var_type;

      static ackcmdTypeSupportInterface_ptr _duplicate (ackcmdTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdTypeSupportInterface_ptr _this () { return this; }


   protected:
      ackcmdTypeSupportInterface () {};
      ~ackcmdTypeSupportInterface () {};
   private:
      ackcmdTypeSupportInterface (const ackcmdTypeSupportInterface &);
      ackcmdTypeSupportInterface & operator = (const ackcmdTypeSupportInterface &);
   };

   class ackcmdDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ackcmdDataWriter_ptr _ptr_type;
      typedef ackcmdDataWriter_var _var_type;

      static ackcmdDataWriter_ptr _duplicate (ackcmdDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const ackcmd& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const ackcmd& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (ackcmd& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ackcmd& instance_data) = 0;

   protected:
      ackcmdDataWriter () {};
      ~ackcmdDataWriter () {};
   private:
      ackcmdDataWriter (const ackcmdDataWriter &);
      ackcmdDataWriter & operator = (const ackcmdDataWriter &);
   };

   class ackcmdDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ackcmdDataReader_ptr _ptr_type;
      typedef ackcmdDataReader_var _var_type;

      static ackcmdDataReader_ptr _duplicate (ackcmdDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (ackcmd& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ackcmd& instance) = 0;

   protected:
      ackcmdDataReader () {};
      ~ackcmdDataReader () {};
   private:
      ackcmdDataReader (const ackcmdDataReader &);
      ackcmdDataReader & operator = (const ackcmdDataReader &);
   };

   class ackcmdDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ackcmdDataReaderView_ptr _ptr_type;
      typedef ackcmdDataReaderView_var _var_type;

      static ackcmdDataReaderView_ptr _duplicate (ackcmdDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (ackcmd& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ackcmd& instance) = 0;

   protected:
      ackcmdDataReaderView () {};
      ~ackcmdDataReaderView () {};
   private:
      ackcmdDataReaderView (const ackcmdDataReaderView &);
      ackcmdDataReaderView & operator = (const ackcmdDataReaderView &);
   };

   struct logeventSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent, struct logeventSeq_uniq_> logeventSeq;
   typedef DDS_DCPSSequence_var < logeventSeq> logeventSeq_var;
   typedef DDS_DCPSSequence_out < logeventSeq> logeventSeq_out;
   class logeventTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logeventTypeSupportInterface_ptr _ptr_type;
      typedef logeventTypeSupportInterface_var _var_type;

      static logeventTypeSupportInterface_ptr _duplicate (logeventTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logeventTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventTypeSupportInterface_ptr _this () { return this; }


   protected:
      logeventTypeSupportInterface () {};
      ~logeventTypeSupportInterface () {};
   private:
      logeventTypeSupportInterface (const logeventTypeSupportInterface &);
      logeventTypeSupportInterface & operator = (const logeventTypeSupportInterface &);
   };

   class logeventDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logeventDataWriter_ptr _ptr_type;
      typedef logeventDataWriter_var _var_type;

      static logeventDataWriter_ptr _duplicate (logeventDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logeventDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent& instance_data) = 0;

   protected:
      logeventDataWriter () {};
      ~logeventDataWriter () {};
   private:
      logeventDataWriter (const logeventDataWriter &);
      logeventDataWriter & operator = (const logeventDataWriter &);
   };

   class logeventDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logeventDataReader_ptr _ptr_type;
      typedef logeventDataReader_var _var_type;

      static logeventDataReader_ptr _duplicate (logeventDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logeventDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent& instance) = 0;

   protected:
      logeventDataReader () {};
      ~logeventDataReader () {};
   private:
      logeventDataReader (const logeventDataReader &);
      logeventDataReader & operator = (const logeventDataReader &);
   };

   class logeventDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logeventDataReaderView_ptr _ptr_type;
      typedef logeventDataReaderView_var _var_type;

      static logeventDataReaderView_ptr _duplicate (logeventDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logeventDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent& instance) = 0;

   protected:
      logeventDataReaderView () {};
      ~logeventDataReaderView () {};
   private:
      logeventDataReaderView (const logeventDataReaderView &);
      logeventDataReaderView & operator = (const logeventDataReaderView &);
   };

}




#endif 
