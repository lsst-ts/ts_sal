//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: sal_m2ms.h
//  Source: sal_m2ms.idl
//  Generated: Thu Aug 23 17:36:53 2018
//  OpenSplice V6.4.140320OSS
//  
//******************************************************************
#ifndef _SAL_M2MS_H_
#define _SAL_M2MS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"


namespace m2ms
{
   struct ActuatorLimitSwitches;
   struct AxialActuatorAbsolutePositionSteps;
   struct AxialActuatorPositionAbsoluteEncoderPositionMeasured;
   struct AxialForcesMeasured;
   struct MirrorPositionMeasured;
   struct PowerStatus;
   struct RawDisplacement;
   struct RawTelemetry;
   struct StepVectorUpdate;
   struct SystemStatus;
   struct TangentActuatorAbsolutePositionSteps;
   struct TangentActuatorPositionAbsoluteEncoderPositionMeasured;
   struct TangentForcesMeasured;
   struct TargetForces;
   struct TemperaturesMeasured;
   struct ZenithAngleMeasured;
   struct command_ApplyBendingMode;
   struct command_ApplyForce;
   struct command_MoveAxialActuator;
   struct command_PositionMirror;
   struct command_SetCorrectionMode;
   struct logevent_M2AssemblyInPosition;
   struct logevent_M2DetailedState;
   struct logevent_M2FaultState;
   struct logevent_M2SummaryState;
   struct command;
   struct ackcmd;
   struct logevent;

   struct ActuatorLimitSwitches
   {
         typedef DDS::Boolean _forward_slice;
         typedef DDS::Boolean _forward[72];
         typedef _forward _forward_out;
         static _forward_slice * _forward_alloc ();
         static void _forward_free (_forward_slice *);
         static void _forward_copy (_forward_slice* to, const _forward_slice* from);
         static _forward_slice *_forward_dup (const _forward_slice* from);

         struct _forward_uniq_ {};
         typedef DDS_DCPS_FArray_var< _forward, _forward_slice, struct _forward_uniq_> _forward_var;
         typedef DDS_DCPS_Array_forany< _forward, _forward_slice, struct _forward_uniq_> _forward_forany;
         typedef DDS::Boolean _reverse_slice;
         typedef DDS::Boolean _reverse[72];
         typedef _reverse _reverse_out;
         static _reverse_slice * _reverse_alloc ();
         static void _reverse_free (_reverse_slice *);
         static void _reverse_copy (_reverse_slice* to, const _reverse_slice* from);
         static _reverse_slice *_reverse_dup (const _reverse_slice* from);

         struct _reverse_uniq_ {};
         typedef DDS_DCPS_FArray_var< _reverse, _reverse_slice, struct _reverse_uniq_> _reverse_var;
         typedef DDS_DCPS_Array_forany< _reverse, _reverse_slice, struct _reverse_uniq_> _reverse_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _forward forward;
         _reverse reverse;
   };

   typedef DDS_DCPSStruct_var < ActuatorLimitSwitches> ActuatorLimitSwitches_var;
   typedef DDS_DCPSStruct_out < ActuatorLimitSwitches> ActuatorLimitSwitches_out;

   struct AxialActuatorAbsolutePositionSteps
   {
         typedef DDS::Long _axialAbsolutePositionSteps_slice;
         typedef DDS::Long _axialAbsolutePositionSteps[72];
         typedef _axialAbsolutePositionSteps _axialAbsolutePositionSteps_out;
         static _axialAbsolutePositionSteps_slice * _axialAbsolutePositionSteps_alloc ();
         static void _axialAbsolutePositionSteps_free (_axialAbsolutePositionSteps_slice *);
         static void _axialAbsolutePositionSteps_copy (_axialAbsolutePositionSteps_slice* to, const _axialAbsolutePositionSteps_slice* from);
         static _axialAbsolutePositionSteps_slice *_axialAbsolutePositionSteps_dup (const _axialAbsolutePositionSteps_slice* from);

         struct _axialAbsolutePositionSteps_uniq_ {};
         typedef DDS_DCPS_FArray_var< _axialAbsolutePositionSteps, _axialAbsolutePositionSteps_slice, struct _axialAbsolutePositionSteps_uniq_> _axialAbsolutePositionSteps_var;
         typedef DDS_DCPS_Array_forany< _axialAbsolutePositionSteps, _axialAbsolutePositionSteps_slice, struct _axialAbsolutePositionSteps_uniq_> _axialAbsolutePositionSteps_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _axialAbsolutePositionSteps axialAbsolutePositionSteps;
   };

   typedef DDS_DCPSStruct_var < AxialActuatorAbsolutePositionSteps> AxialActuatorAbsolutePositionSteps_var;
   typedef DDS_DCPSStruct_out < AxialActuatorAbsolutePositionSteps> AxialActuatorAbsolutePositionSteps_out;

   struct AxialActuatorPositionAbsoluteEncoderPositionMeasured
   {
         typedef DDS::Double _axialEncoderPositionMeasured_slice;
         typedef DDS::Double _axialEncoderPositionMeasured[72];
         typedef _axialEncoderPositionMeasured _axialEncoderPositionMeasured_out;
         static _axialEncoderPositionMeasured_slice * _axialEncoderPositionMeasured_alloc ();
         static void _axialEncoderPositionMeasured_free (_axialEncoderPositionMeasured_slice *);
         static void _axialEncoderPositionMeasured_copy (_axialEncoderPositionMeasured_slice* to, const _axialEncoderPositionMeasured_slice* from);
         static _axialEncoderPositionMeasured_slice *_axialEncoderPositionMeasured_dup (const _axialEncoderPositionMeasured_slice* from);

         struct _axialEncoderPositionMeasured_uniq_ {};
         typedef DDS_DCPS_FArray_var< _axialEncoderPositionMeasured, _axialEncoderPositionMeasured_slice, struct _axialEncoderPositionMeasured_uniq_> _axialEncoderPositionMeasured_var;
         typedef DDS_DCPS_Array_forany< _axialEncoderPositionMeasured, _axialEncoderPositionMeasured_slice, struct _axialEncoderPositionMeasured_uniq_> _axialEncoderPositionMeasured_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _axialEncoderPositionMeasured axialEncoderPositionMeasured;
   };

   typedef DDS_DCPSStruct_var < AxialActuatorPositionAbsoluteEncoderPositionMeasured> AxialActuatorPositionAbsoluteEncoderPositionMeasured_var;
   typedef DDS_DCPSStruct_out < AxialActuatorPositionAbsoluteEncoderPositionMeasured> AxialActuatorPositionAbsoluteEncoderPositionMeasured_out;

   struct AxialForcesMeasured
   {
         typedef DDS::Double _axialForceMeasured_slice;
         typedef DDS::Double _axialForceMeasured[72];
         typedef _axialForceMeasured _axialForceMeasured_out;
         static _axialForceMeasured_slice * _axialForceMeasured_alloc ();
         static void _axialForceMeasured_free (_axialForceMeasured_slice *);
         static void _axialForceMeasured_copy (_axialForceMeasured_slice* to, const _axialForceMeasured_slice* from);
         static _axialForceMeasured_slice *_axialForceMeasured_dup (const _axialForceMeasured_slice* from);

         struct _axialForceMeasured_uniq_ {};
         typedef DDS_DCPS_FArray_var< _axialForceMeasured, _axialForceMeasured_slice, struct _axialForceMeasured_uniq_> _axialForceMeasured_var;
         typedef DDS_DCPS_Array_forany< _axialForceMeasured, _axialForceMeasured_slice, struct _axialForceMeasured_uniq_> _axialForceMeasured_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _axialForceMeasured axialForceMeasured;
   };

   typedef DDS_DCPSStruct_var < AxialForcesMeasured> AxialForcesMeasured_var;
   typedef DDS_DCPSStruct_out < AxialForcesMeasured> AxialForcesMeasured_out;

   struct MirrorPositionMeasured
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Double xTilt;
         DDS::Double yTilt;
         DDS::Double piston;
         DDS::Double xPosition;
         DDS::Double yPosition;
         DDS::Double theta_z_position;
   };

   typedef DDS_DCPSStruct_var < MirrorPositionMeasured> MirrorPositionMeasured_var;
   typedef DDS_DCPSStruct_out < MirrorPositionMeasured> MirrorPositionMeasured_out;

   struct PowerStatus
   {
         typedef DDS::Double _voltages_slice;
         typedef DDS::Double _voltages[16];
         typedef _voltages _voltages_out;
         static _voltages_slice * _voltages_alloc ();
         static void _voltages_free (_voltages_slice *);
         static void _voltages_copy (_voltages_slice* to, const _voltages_slice* from);
         static _voltages_slice *_voltages_dup (const _voltages_slice* from);

         struct _voltages_uniq_ {};
         typedef DDS_DCPS_FArray_var< _voltages, _voltages_slice, struct _voltages_uniq_> _voltages_var;
         typedef DDS_DCPS_Array_forany< _voltages, _voltages_slice, struct _voltages_uniq_> _voltages_forany;
         typedef DDS::Double _currents_slice;
         typedef DDS::Double _currents[16];
         typedef _currents _currents_out;
         static _currents_slice * _currents_alloc ();
         static void _currents_free (_currents_slice *);
         static void _currents_copy (_currents_slice* to, const _currents_slice* from);
         static _currents_slice *_currents_dup (const _currents_slice* from);

         struct _currents_uniq_ {};
         typedef DDS_DCPS_FArray_var< _currents, _currents_slice, struct _currents_uniq_> _currents_var;
         typedef DDS_DCPS_Array_forany< _currents, _currents_slice, struct _currents_uniq_> _currents_forany;
         typedef DDS::Boolean _onOff_slice;
         typedef DDS::Boolean _onOff[16];
         typedef _onOff _onOff_out;
         static _onOff_slice * _onOff_alloc ();
         static void _onOff_free (_onOff_slice *);
         static void _onOff_copy (_onOff_slice* to, const _onOff_slice* from);
         static _onOff_slice *_onOff_dup (const _onOff_slice* from);

         struct _onOff_uniq_ {};
         typedef DDS_DCPS_FArray_var< _onOff, _onOff_slice, struct _onOff_uniq_> _onOff_var;
         typedef DDS_DCPS_Array_forany< _onOff, _onOff_slice, struct _onOff_uniq_> _onOff_forany;
         typedef DDS::ULong _states_slice;
         typedef DDS::ULong _states[16];
         typedef _states _states_out;
         static _states_slice * _states_alloc ();
         static void _states_free (_states_slice *);
         static void _states_copy (_states_slice* to, const _states_slice* from);
         static _states_slice *_states_dup (const _states_slice* from);

         struct _states_uniq_ {};
         typedef DDS_DCPS_FArray_var< _states, _states_slice, struct _states_uniq_> _states_var;
         typedef DDS_DCPS_Array_forany< _states, _states_slice, struct _states_uniq_> _states_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _voltages voltages;
         _currents currents;
         _onOff onOff;
         _states states;
   };

   typedef DDS_DCPSStruct_var < PowerStatus> PowerStatus_var;
   typedef DDS_DCPSStruct_out < PowerStatus> PowerStatus_out;

   struct RawDisplacement
   {
         typedef DDS::Double _rawPosition_slice;
         typedef DDS::Double _rawPosition[72];
         typedef _rawPosition _rawPosition_out;
         static _rawPosition_slice * _rawPosition_alloc ();
         static void _rawPosition_free (_rawPosition_slice *);
         static void _rawPosition_copy (_rawPosition_slice* to, const _rawPosition_slice* from);
         static _rawPosition_slice *_rawPosition_dup (const _rawPosition_slice* from);

         struct _rawPosition_uniq_ {};
         typedef DDS_DCPS_FArray_var< _rawPosition, _rawPosition_slice, struct _rawPosition_uniq_> _rawPosition_var;
         typedef DDS_DCPS_Array_forany< _rawPosition, _rawPosition_slice, struct _rawPosition_uniq_> _rawPosition_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _rawPosition rawPosition;
   };

   typedef DDS_DCPSStruct_var < RawDisplacement> RawDisplacement_var;
   typedef DDS_DCPSStruct_out < RawDisplacement> RawDisplacement_out;

   struct RawTelemetry
   {
         typedef DDS::Long _dataPacket_slice;
         typedef DDS::Long _dataPacket[720];
         typedef _dataPacket _dataPacket_out;
         static _dataPacket_slice * _dataPacket_alloc ();
         static void _dataPacket_free (_dataPacket_slice *);
         static void _dataPacket_copy (_dataPacket_slice* to, const _dataPacket_slice* from);
         static _dataPacket_slice *_dataPacket_dup (const _dataPacket_slice* from);

         struct _dataPacket_uniq_ {};
         typedef DDS_DCPS_FArray_var< _dataPacket, _dataPacket_slice, struct _dataPacket_uniq_> _dataPacket_var;
         typedef DDS_DCPS_Array_forany< _dataPacket, _dataPacket_slice, struct _dataPacket_uniq_> _dataPacket_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _dataPacket dataPacket;
   };

   typedef DDS_DCPSStruct_var < RawTelemetry> RawTelemetry_var;
   typedef DDS_DCPSStruct_out < RawTelemetry> RawTelemetry_out;

   struct StepVectorUpdate
   {
         typedef DDS::Long _steps_slice;
         typedef DDS::Long _steps[72];
         typedef _steps _steps_out;
         static _steps_slice * _steps_alloc ();
         static void _steps_free (_steps_slice *);
         static void _steps_copy (_steps_slice* to, const _steps_slice* from);
         static _steps_slice *_steps_dup (const _steps_slice* from);

         struct _steps_uniq_ {};
         typedef DDS_DCPS_FArray_var< _steps, _steps_slice, struct _steps_uniq_> _steps_var;
         typedef DDS_DCPS_Array_forany< _steps, _steps_slice, struct _steps_uniq_> _steps_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _steps steps;
   };

   typedef DDS_DCPSStruct_var < StepVectorUpdate> StepVectorUpdate_var;
   typedef DDS_DCPSStruct_out < StepVectorUpdate> StepVectorUpdate_out;

   struct SystemStatus
   {
         typedef DDS::ULong _statusBits_slice;
         typedef DDS::ULong _statusBits[72];
         typedef _statusBits _statusBits_out;
         static _statusBits_slice * _statusBits_alloc ();
         static void _statusBits_free (_statusBits_slice *);
         static void _statusBits_copy (_statusBits_slice* to, const _statusBits_slice* from);
         static _statusBits_slice *_statusBits_dup (const _statusBits_slice* from);

         struct _statusBits_uniq_ {};
         typedef DDS_DCPS_FArray_var< _statusBits, _statusBits_slice, struct _statusBits_uniq_> _statusBits_var;
         typedef DDS_DCPS_Array_forany< _statusBits, _statusBits_slice, struct _statusBits_uniq_> _statusBits_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _statusBits statusBits;
   };

   typedef DDS_DCPSStruct_var < SystemStatus> SystemStatus_var;
   typedef DDS_DCPSStruct_out < SystemStatus> SystemStatus_out;

   struct TangentActuatorAbsolutePositionSteps
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long tangentLink_0deg_absolutePositionSteps;
         DDS::Long tangentLink_60deg_absolutePositionSteps;
         DDS::Long tangentLink_120deg_absolutePositionSteps;
         DDS::Long tangentLink_180deg_absolutePositionSteps;
         DDS::Long tangentLink_240deg_absolutePositionSteps;
         DDS::Long tangentLink_300deg_absolutePositionSteps;
   };

   typedef DDS_DCPSStruct_var < TangentActuatorAbsolutePositionSteps> TangentActuatorAbsolutePositionSteps_var;
   typedef DDS_DCPSStruct_out < TangentActuatorAbsolutePositionSteps> TangentActuatorAbsolutePositionSteps_out;

   struct TangentActuatorPositionAbsoluteEncoderPositionMeasured
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Double tangentLink_0deg_absoluteEncoderPositionMeasured;
         DDS::Double tangentLink_60deg_absoluteEncoderPositionMeasured;
         DDS::Double tangentLink_120deg_absoluteEncoderPositionMeasured;
         DDS::Double tangentLink_180deg_absoluteEncoderPositionMeasured;
         DDS::Double tangentLink_240deg_absoluteEncoderPositionMeasured;
         DDS::Double tangentLink_300deg_absoluteEncoderPositionMeasured;
   };

   typedef DDS_DCPSStruct_var < TangentActuatorPositionAbsoluteEncoderPositionMeasured> TangentActuatorPositionAbsoluteEncoderPositionMeasured_var;
   typedef DDS_DCPSStruct_out < TangentActuatorPositionAbsoluteEncoderPositionMeasured> TangentActuatorPositionAbsoluteEncoderPositionMeasured_out;

   struct TangentForcesMeasured
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Double tangentLink_0deg_forceMeasured;
         DDS::Double tangentLink_60deg_forceMeasured;
         DDS::Double tangentLink_120deg_forceMeasured;
         DDS::Double tangentLink_180deg_forceMeasured;
         DDS::Double tangentLink_240deg_forceMeasured;
         DDS::Double tangentLink_300deg_forceMeasured;
   };

   typedef DDS_DCPSStruct_var < TangentForcesMeasured> TangentForcesMeasured_var;
   typedef DDS_DCPSStruct_out < TangentForcesMeasured> TangentForcesMeasured_out;

   struct TargetForces
   {
         typedef DDS::Double _setPoint_slice;
         typedef DDS::Double _setPoint[72];
         typedef _setPoint _setPoint_out;
         static _setPoint_slice * _setPoint_alloc ();
         static void _setPoint_free (_setPoint_slice *);
         static void _setPoint_copy (_setPoint_slice* to, const _setPoint_slice* from);
         static _setPoint_slice *_setPoint_dup (const _setPoint_slice* from);

         struct _setPoint_uniq_ {};
         typedef DDS_DCPS_FArray_var< _setPoint, _setPoint_slice, struct _setPoint_uniq_> _setPoint_var;
         typedef DDS_DCPS_Array_forany< _setPoint, _setPoint_slice, struct _setPoint_uniq_> _setPoint_forany;
         typedef DDS::Double _forceComponent_slice;
         typedef DDS::Double _forceComponent[72];
         typedef _forceComponent _forceComponent_out;
         static _forceComponent_slice * _forceComponent_alloc ();
         static void _forceComponent_free (_forceComponent_slice *);
         static void _forceComponent_copy (_forceComponent_slice* to, const _forceComponent_slice* from);
         static _forceComponent_slice *_forceComponent_dup (const _forceComponent_slice* from);

         struct _forceComponent_uniq_ {};
         typedef DDS_DCPS_FArray_var< _forceComponent, _forceComponent_slice, struct _forceComponent_uniq_> _forceComponent_var;
         typedef DDS_DCPS_Array_forany< _forceComponent, _forceComponent_slice, struct _forceComponent_uniq_> _forceComponent_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _setPoint setPoint;
         _forceComponent forceComponent;
   };

   typedef DDS_DCPSStruct_var < TargetForces> TargetForces_var;
   typedef DDS_DCPSStruct_out < TargetForces> TargetForces_out;

   struct TemperaturesMeasured
   {
         typedef DDS::Double _temps_slice;
         typedef DDS::Double _temps[72];
         typedef _temps _temps_out;
         static _temps_slice * _temps_alloc ();
         static void _temps_free (_temps_slice *);
         static void _temps_copy (_temps_slice* to, const _temps_slice* from);
         static _temps_slice *_temps_dup (const _temps_slice* from);

         struct _temps_uniq_ {};
         typedef DDS_DCPS_FArray_var< _temps, _temps_slice, struct _temps_uniq_> _temps_var;
         typedef DDS_DCPS_Array_forany< _temps, _temps_slice, struct _temps_uniq_> _temps_forany;
         typedef DDS::Double _intakeTemperatures_slice;
         typedef DDS::Double _intakeTemperatures[4];
         typedef _intakeTemperatures _intakeTemperatures_out;
         static _intakeTemperatures_slice * _intakeTemperatures_alloc ();
         static void _intakeTemperatures_free (_intakeTemperatures_slice *);
         static void _intakeTemperatures_copy (_intakeTemperatures_slice* to, const _intakeTemperatures_slice* from);
         static _intakeTemperatures_slice *_intakeTemperatures_dup (const _intakeTemperatures_slice* from);

         struct _intakeTemperatures_uniq_ {};
         typedef DDS_DCPS_FArray_var< _intakeTemperatures, _intakeTemperatures_slice, struct _intakeTemperatures_uniq_> _intakeTemperatures_var;
         typedef DDS_DCPS_Array_forany< _intakeTemperatures, _intakeTemperatures_slice, struct _intakeTemperatures_uniq_> _intakeTemperatures_forany;
         typedef DDS::Double _exhaustTemperatures_slice;
         typedef DDS::Double _exhaustTemperatures[4];
         typedef _exhaustTemperatures _exhaustTemperatures_out;
         static _exhaustTemperatures_slice * _exhaustTemperatures_alloc ();
         static void _exhaustTemperatures_free (_exhaustTemperatures_slice *);
         static void _exhaustTemperatures_copy (_exhaustTemperatures_slice* to, const _exhaustTemperatures_slice* from);
         static _exhaustTemperatures_slice *_exhaustTemperatures_dup (const _exhaustTemperatures_slice* from);

         struct _exhaustTemperatures_uniq_ {};
         typedef DDS_DCPS_FArray_var< _exhaustTemperatures, _exhaustTemperatures_slice, struct _exhaustTemperatures_uniq_> _exhaustTemperatures_var;
         typedef DDS_DCPS_Array_forany< _exhaustTemperatures, _exhaustTemperatures_slice, struct _exhaustTemperatures_uniq_> _exhaustTemperatures_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _temps temps;
         _intakeTemperatures intakeTemperatures;
         _exhaustTemperatures exhaustTemperatures;
   };

   typedef DDS_DCPSStruct_var < TemperaturesMeasured> TemperaturesMeasured_var;
   typedef DDS_DCPSStruct_out < TemperaturesMeasured> TemperaturesMeasured_out;

   struct ZenithAngleMeasured
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Double ZenithAngleMeasured;
   };

   typedef DDS_DCPSStruct_var < ZenithAngleMeasured> ZenithAngleMeasured_var;
   typedef DDS_DCPSStruct_out < ZenithAngleMeasured> ZenithAngleMeasured_out;

   struct command_ApplyBendingMode
   {
         typedef DDS::Short _bendingModeNbr_slice;
         typedef DDS::Short _bendingModeNbr[32];
         typedef _bendingModeNbr _bendingModeNbr_out;
         static _bendingModeNbr_slice * _bendingModeNbr_alloc ();
         static void _bendingModeNbr_free (_bendingModeNbr_slice *);
         static void _bendingModeNbr_copy (_bendingModeNbr_slice* to, const _bendingModeNbr_slice* from);
         static _bendingModeNbr_slice *_bendingModeNbr_dup (const _bendingModeNbr_slice* from);

         struct _bendingModeNbr_uniq_ {};
         typedef DDS_DCPS_FArray_var< _bendingModeNbr, _bendingModeNbr_slice, struct _bendingModeNbr_uniq_> _bendingModeNbr_var;
         typedef DDS_DCPS_Array_forany< _bendingModeNbr, _bendingModeNbr_slice, struct _bendingModeNbr_uniq_> _bendingModeNbr_forany;
         typedef DDS::Double _bendingModeValue_slice;
         typedef DDS::Double _bendingModeValue[32];
         typedef _bendingModeValue _bendingModeValue_out;
         static _bendingModeValue_slice * _bendingModeValue_alloc ();
         static void _bendingModeValue_free (_bendingModeValue_slice *);
         static void _bendingModeValue_copy (_bendingModeValue_slice* to, const _bendingModeValue_slice* from);
         static _bendingModeValue_slice *_bendingModeValue_dup (const _bendingModeValue_slice* from);

         struct _bendingModeValue_uniq_ {};
         typedef DDS_DCPS_FArray_var< _bendingModeValue, _bendingModeValue_slice, struct _bendingModeValue_uniq_> _bendingModeValue_var;
         typedef DDS_DCPS_Array_forany< _bendingModeValue, _bendingModeValue_slice, struct _bendingModeValue_uniq_> _bendingModeValue_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         _bendingModeNbr bendingModeNbr;
         _bendingModeValue bendingModeValue;
   };

   typedef DDS_DCPSStruct_var < command_ApplyBendingMode> command_ApplyBendingMode_var;
   typedef DDS_DCPSStruct_out < command_ApplyBendingMode> command_ApplyBendingMode_out;

   struct command_ApplyForce
   {
         typedef DDS::Double _forceSetPoint_slice;
         typedef DDS::Double _forceSetPoint[72];
         typedef _forceSetPoint _forceSetPoint_out;
         static _forceSetPoint_slice * _forceSetPoint_alloc ();
         static void _forceSetPoint_free (_forceSetPoint_slice *);
         static void _forceSetPoint_copy (_forceSetPoint_slice* to, const _forceSetPoint_slice* from);
         static _forceSetPoint_slice *_forceSetPoint_dup (const _forceSetPoint_slice* from);

         struct _forceSetPoint_uniq_ {};
         typedef DDS_DCPS_FArray_var< _forceSetPoint, _forceSetPoint_slice, struct _forceSetPoint_uniq_> _forceSetPoint_var;
         typedef DDS_DCPS_Array_forany< _forceSetPoint, _forceSetPoint_slice, struct _forceSetPoint_uniq_> _forceSetPoint_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         _forceSetPoint forceSetPoint;
   };

   typedef DDS_DCPSStruct_var < command_ApplyForce> command_ApplyForce_var;
   typedef DDS_DCPSStruct_out < command_ApplyForce> command_ApplyForce_out;

   struct command_MoveAxialActuator
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         DDS::Short axialActuatorID;
         DDS::Long relativeStepsToMove;
   };

   typedef DDS_DCPSStruct_var < command_MoveAxialActuator> command_MoveAxialActuator_var;
   typedef DDS_DCPSStruct_out < command_MoveAxialActuator> command_MoveAxialActuator_out;

   struct command_PositionMirror
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         DDS::Double xTilt;
         DDS::Double yTilt;
         DDS::Double piston;
   };

   typedef DDS_DCPSStruct_var < command_PositionMirror> command_PositionMirror_var;
   typedef DDS_DCPSStruct_out < command_PositionMirror> command_PositionMirror_out;

   struct command_SetCorrectionMode
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         DDS::Long Mode;
   };

   typedef DDS_DCPSStruct_var < command_SetCorrectionMode> command_SetCorrectionMode_var;
   typedef DDS_DCPSStruct_out < command_SetCorrectionMode> command_SetCorrectionMode_out;

   struct logevent_M2AssemblyInPosition
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Boolean inPosition;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_M2AssemblyInPosition> logevent_M2AssemblyInPosition_var;
   typedef DDS_DCPSStruct_out < logevent_M2AssemblyInPosition> logevent_M2AssemblyInPosition_out;

   struct logevent_M2DetailedState
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Short state;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_M2DetailedState> logevent_M2DetailedState_var;
   typedef DDS_DCPSStruct_out < logevent_M2DetailedState> logevent_M2DetailedState_out;

   struct logevent_M2FaultState
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Short state;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_M2FaultState> logevent_M2FaultState_var;
   typedef DDS_DCPSStruct_out < logevent_M2FaultState> logevent_M2FaultState_out;
   const DDS::Long M2FaultState_ActuatorPlusLimit = (DDS::Long) 1L;
   const DDS::Long M2FaultState_ActuatorMinusLimit = (DDS::Long) 2L;
   const DDS::Long M2FaultState_ActuatorPlusForceLimit = (DDS::Long) 3L;
   const DDS::Long M2FaultState_ActuatorMinusForceLimit = (DDS::Long) 4L;
   const DDS::Long M2FaultState_ActuatorCommTimeout = (DDS::Long) 5L;
   const DDS::Long M2FaultState_FollowingError = (DDS::Long) 6L;
   const DDS::Long M2FaultState_ConfigurationError = (DDS::Long) 7L;
   const DDS::Long M2FaultState_UnresponsiveActuator = (DDS::Long) 8L;
   const DDS::Long M2FaultState_TangentLinkStrainFault = (DDS::Long) 9L;
   const DDS::Long M2FaultState_cRIOCommFailure = (DDS::Long) 10L;
   const DDS::Long M2FaultState_cRIOHeartbeatFailure = (DDS::Long) 11L;
   const DDS::Long M2FaultState_CurrentError = (DDS::Long) 12L;
   const DDS::Long M2FaultState_VoltageError = (DDS::Long) 13L;
   const DDS::Long M2FaultState_PowerRelayFault = (DDS::Long) 14L;
   const DDS::Long M2FaultState_PowerSupplyFault = (DDS::Long) 15L;
   const DDS::Long M2FaultState_TemperatureFault = (DDS::Long) 16L;
   const DDS::Long M2FaultState_TempSensorFailure = (DDS::Long) 17L;
   const DDS::Long M2FaultState_TelescopeElevationFault = (DDS::Long) 18L;
   const DDS::Long M2FaultState_GravitySensorFailure = (DDS::Long) 19L;
   const DDS::Long M2FaultState_ILCFault = (DDS::Long) 20L;
   const DDS::Long M2FaultState_CelRBPositionError = (DDS::Long) 21L;
   const DDS::Long M2FaultState_DisplacementSensor = (DDS::Long) 22L;
   const DDS::Long M2FaultState_ActuatorPlusSoftLimit = (DDS::Long) 23L;
   const DDS::Long M2FaultState_ActuatorMinusSoftLimit = (DDS::Long) 24L;
   const DDS::Long M2FaultState_CelTemperatureWarning = (DDS::Long) 25L;

   struct logevent_M2SummaryState
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Short state;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_M2SummaryState> logevent_M2SummaryState_var;
   typedef DDS_DCPSStruct_out < logevent_M2SummaryState> logevent_M2SummaryState_out;

   struct command
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long private_seqNum;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr itemValue;
         DDS::String_mgr modifiers;
   };

   typedef DDS_DCPSStruct_var < command> command_var;
   typedef DDS_DCPSStruct_out < command> command_out;

   struct ackcmd
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long private_seqNum;
         DDS::Long ack;
         DDS::Long error;
         DDS::String_mgr result;
   };

   typedef DDS_DCPSStruct_var < ackcmd> ackcmd_var;
   typedef DDS_DCPSStruct_out < ackcmd> ackcmd_out;

   struct logevent
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr message;
   };

   typedef DDS_DCPSStruct_var < logevent> logevent_var;
   typedef DDS_DCPSStruct_out < logevent> logevent_out;
}
template <>
m2ms::ActuatorLimitSwitches::_forward_slice* DDS_DCPS_ArrayHelper < m2ms::ActuatorLimitSwitches::_forward, m2ms::ActuatorLimitSwitches::_forward_slice, m2ms::ActuatorLimitSwitches::_forward_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::ActuatorLimitSwitches::_forward, m2ms::ActuatorLimitSwitches::_forward_slice, m2ms::ActuatorLimitSwitches::_forward_uniq_>::copy (m2ms::ActuatorLimitSwitches::_forward_slice *to, const m2ms::ActuatorLimitSwitches::_forward_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::ActuatorLimitSwitches::_forward, m2ms::ActuatorLimitSwitches::_forward_slice, m2ms::ActuatorLimitSwitches::_forward_uniq_>::free (m2ms::ActuatorLimitSwitches::_forward_slice *ptr);
template <>
m2ms::ActuatorLimitSwitches::_reverse_slice* DDS_DCPS_ArrayHelper < m2ms::ActuatorLimitSwitches::_reverse, m2ms::ActuatorLimitSwitches::_reverse_slice, m2ms::ActuatorLimitSwitches::_reverse_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::ActuatorLimitSwitches::_reverse, m2ms::ActuatorLimitSwitches::_reverse_slice, m2ms::ActuatorLimitSwitches::_reverse_uniq_>::copy (m2ms::ActuatorLimitSwitches::_reverse_slice *to, const m2ms::ActuatorLimitSwitches::_reverse_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::ActuatorLimitSwitches::_reverse, m2ms::ActuatorLimitSwitches::_reverse_slice, m2ms::ActuatorLimitSwitches::_reverse_uniq_>::free (m2ms::ActuatorLimitSwitches::_reverse_slice *ptr);
template <>
m2ms::AxialActuatorAbsolutePositionSteps::_axialAbsolutePositionSteps_slice* DDS_DCPS_ArrayHelper < m2ms::AxialActuatorAbsolutePositionSteps::_axialAbsolutePositionSteps, m2ms::AxialActuatorAbsolutePositionSteps::_axialAbsolutePositionSteps_slice, m2ms::AxialActuatorAbsolutePositionSteps::_axialAbsolutePositionSteps_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::AxialActuatorAbsolutePositionSteps::_axialAbsolutePositionSteps, m2ms::AxialActuatorAbsolutePositionSteps::_axialAbsolutePositionSteps_slice, m2ms::AxialActuatorAbsolutePositionSteps::_axialAbsolutePositionSteps_uniq_>::copy (m2ms::AxialActuatorAbsolutePositionSteps::_axialAbsolutePositionSteps_slice *to, const m2ms::AxialActuatorAbsolutePositionSteps::_axialAbsolutePositionSteps_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::AxialActuatorAbsolutePositionSteps::_axialAbsolutePositionSteps, m2ms::AxialActuatorAbsolutePositionSteps::_axialAbsolutePositionSteps_slice, m2ms::AxialActuatorAbsolutePositionSteps::_axialAbsolutePositionSteps_uniq_>::free (m2ms::AxialActuatorAbsolutePositionSteps::_axialAbsolutePositionSteps_slice *ptr);
template <>
m2ms::AxialActuatorPositionAbsoluteEncoderPositionMeasured::_axialEncoderPositionMeasured_slice* DDS_DCPS_ArrayHelper < m2ms::AxialActuatorPositionAbsoluteEncoderPositionMeasured::_axialEncoderPositionMeasured, m2ms::AxialActuatorPositionAbsoluteEncoderPositionMeasured::_axialEncoderPositionMeasured_slice, m2ms::AxialActuatorPositionAbsoluteEncoderPositionMeasured::_axialEncoderPositionMeasured_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::AxialActuatorPositionAbsoluteEncoderPositionMeasured::_axialEncoderPositionMeasured, m2ms::AxialActuatorPositionAbsoluteEncoderPositionMeasured::_axialEncoderPositionMeasured_slice, m2ms::AxialActuatorPositionAbsoluteEncoderPositionMeasured::_axialEncoderPositionMeasured_uniq_>::copy (m2ms::AxialActuatorPositionAbsoluteEncoderPositionMeasured::_axialEncoderPositionMeasured_slice *to, const m2ms::AxialActuatorPositionAbsoluteEncoderPositionMeasured::_axialEncoderPositionMeasured_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::AxialActuatorPositionAbsoluteEncoderPositionMeasured::_axialEncoderPositionMeasured, m2ms::AxialActuatorPositionAbsoluteEncoderPositionMeasured::_axialEncoderPositionMeasured_slice, m2ms::AxialActuatorPositionAbsoluteEncoderPositionMeasured::_axialEncoderPositionMeasured_uniq_>::free (m2ms::AxialActuatorPositionAbsoluteEncoderPositionMeasured::_axialEncoderPositionMeasured_slice *ptr);
template <>
m2ms::AxialForcesMeasured::_axialForceMeasured_slice* DDS_DCPS_ArrayHelper < m2ms::AxialForcesMeasured::_axialForceMeasured, m2ms::AxialForcesMeasured::_axialForceMeasured_slice, m2ms::AxialForcesMeasured::_axialForceMeasured_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::AxialForcesMeasured::_axialForceMeasured, m2ms::AxialForcesMeasured::_axialForceMeasured_slice, m2ms::AxialForcesMeasured::_axialForceMeasured_uniq_>::copy (m2ms::AxialForcesMeasured::_axialForceMeasured_slice *to, const m2ms::AxialForcesMeasured::_axialForceMeasured_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::AxialForcesMeasured::_axialForceMeasured, m2ms::AxialForcesMeasured::_axialForceMeasured_slice, m2ms::AxialForcesMeasured::_axialForceMeasured_uniq_>::free (m2ms::AxialForcesMeasured::_axialForceMeasured_slice *ptr);
template <>
m2ms::PowerStatus::_voltages_slice* DDS_DCPS_ArrayHelper < m2ms::PowerStatus::_voltages, m2ms::PowerStatus::_voltages_slice, m2ms::PowerStatus::_voltages_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::PowerStatus::_voltages, m2ms::PowerStatus::_voltages_slice, m2ms::PowerStatus::_voltages_uniq_>::copy (m2ms::PowerStatus::_voltages_slice *to, const m2ms::PowerStatus::_voltages_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::PowerStatus::_voltages, m2ms::PowerStatus::_voltages_slice, m2ms::PowerStatus::_voltages_uniq_>::free (m2ms::PowerStatus::_voltages_slice *ptr);
template <>
m2ms::PowerStatus::_currents_slice* DDS_DCPS_ArrayHelper < m2ms::PowerStatus::_currents, m2ms::PowerStatus::_currents_slice, m2ms::PowerStatus::_currents_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::PowerStatus::_currents, m2ms::PowerStatus::_currents_slice, m2ms::PowerStatus::_currents_uniq_>::copy (m2ms::PowerStatus::_currents_slice *to, const m2ms::PowerStatus::_currents_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::PowerStatus::_currents, m2ms::PowerStatus::_currents_slice, m2ms::PowerStatus::_currents_uniq_>::free (m2ms::PowerStatus::_currents_slice *ptr);
template <>
m2ms::PowerStatus::_onOff_slice* DDS_DCPS_ArrayHelper < m2ms::PowerStatus::_onOff, m2ms::PowerStatus::_onOff_slice, m2ms::PowerStatus::_onOff_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::PowerStatus::_onOff, m2ms::PowerStatus::_onOff_slice, m2ms::PowerStatus::_onOff_uniq_>::copy (m2ms::PowerStatus::_onOff_slice *to, const m2ms::PowerStatus::_onOff_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::PowerStatus::_onOff, m2ms::PowerStatus::_onOff_slice, m2ms::PowerStatus::_onOff_uniq_>::free (m2ms::PowerStatus::_onOff_slice *ptr);
template <>
m2ms::PowerStatus::_states_slice* DDS_DCPS_ArrayHelper < m2ms::PowerStatus::_states, m2ms::PowerStatus::_states_slice, m2ms::PowerStatus::_states_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::PowerStatus::_states, m2ms::PowerStatus::_states_slice, m2ms::PowerStatus::_states_uniq_>::copy (m2ms::PowerStatus::_states_slice *to, const m2ms::PowerStatus::_states_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::PowerStatus::_states, m2ms::PowerStatus::_states_slice, m2ms::PowerStatus::_states_uniq_>::free (m2ms::PowerStatus::_states_slice *ptr);
template <>
m2ms::RawDisplacement::_rawPosition_slice* DDS_DCPS_ArrayHelper < m2ms::RawDisplacement::_rawPosition, m2ms::RawDisplacement::_rawPosition_slice, m2ms::RawDisplacement::_rawPosition_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::RawDisplacement::_rawPosition, m2ms::RawDisplacement::_rawPosition_slice, m2ms::RawDisplacement::_rawPosition_uniq_>::copy (m2ms::RawDisplacement::_rawPosition_slice *to, const m2ms::RawDisplacement::_rawPosition_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::RawDisplacement::_rawPosition, m2ms::RawDisplacement::_rawPosition_slice, m2ms::RawDisplacement::_rawPosition_uniq_>::free (m2ms::RawDisplacement::_rawPosition_slice *ptr);
template <>
m2ms::RawTelemetry::_dataPacket_slice* DDS_DCPS_ArrayHelper < m2ms::RawTelemetry::_dataPacket, m2ms::RawTelemetry::_dataPacket_slice, m2ms::RawTelemetry::_dataPacket_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::RawTelemetry::_dataPacket, m2ms::RawTelemetry::_dataPacket_slice, m2ms::RawTelemetry::_dataPacket_uniq_>::copy (m2ms::RawTelemetry::_dataPacket_slice *to, const m2ms::RawTelemetry::_dataPacket_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::RawTelemetry::_dataPacket, m2ms::RawTelemetry::_dataPacket_slice, m2ms::RawTelemetry::_dataPacket_uniq_>::free (m2ms::RawTelemetry::_dataPacket_slice *ptr);
template <>
m2ms::StepVectorUpdate::_steps_slice* DDS_DCPS_ArrayHelper < m2ms::StepVectorUpdate::_steps, m2ms::StepVectorUpdate::_steps_slice, m2ms::StepVectorUpdate::_steps_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::StepVectorUpdate::_steps, m2ms::StepVectorUpdate::_steps_slice, m2ms::StepVectorUpdate::_steps_uniq_>::copy (m2ms::StepVectorUpdate::_steps_slice *to, const m2ms::StepVectorUpdate::_steps_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::StepVectorUpdate::_steps, m2ms::StepVectorUpdate::_steps_slice, m2ms::StepVectorUpdate::_steps_uniq_>::free (m2ms::StepVectorUpdate::_steps_slice *ptr);
template <>
m2ms::SystemStatus::_statusBits_slice* DDS_DCPS_ArrayHelper < m2ms::SystemStatus::_statusBits, m2ms::SystemStatus::_statusBits_slice, m2ms::SystemStatus::_statusBits_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::SystemStatus::_statusBits, m2ms::SystemStatus::_statusBits_slice, m2ms::SystemStatus::_statusBits_uniq_>::copy (m2ms::SystemStatus::_statusBits_slice *to, const m2ms::SystemStatus::_statusBits_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::SystemStatus::_statusBits, m2ms::SystemStatus::_statusBits_slice, m2ms::SystemStatus::_statusBits_uniq_>::free (m2ms::SystemStatus::_statusBits_slice *ptr);
template <>
m2ms::TargetForces::_setPoint_slice* DDS_DCPS_ArrayHelper < m2ms::TargetForces::_setPoint, m2ms::TargetForces::_setPoint_slice, m2ms::TargetForces::_setPoint_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::TargetForces::_setPoint, m2ms::TargetForces::_setPoint_slice, m2ms::TargetForces::_setPoint_uniq_>::copy (m2ms::TargetForces::_setPoint_slice *to, const m2ms::TargetForces::_setPoint_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::TargetForces::_setPoint, m2ms::TargetForces::_setPoint_slice, m2ms::TargetForces::_setPoint_uniq_>::free (m2ms::TargetForces::_setPoint_slice *ptr);
template <>
m2ms::TargetForces::_forceComponent_slice* DDS_DCPS_ArrayHelper < m2ms::TargetForces::_forceComponent, m2ms::TargetForces::_forceComponent_slice, m2ms::TargetForces::_forceComponent_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::TargetForces::_forceComponent, m2ms::TargetForces::_forceComponent_slice, m2ms::TargetForces::_forceComponent_uniq_>::copy (m2ms::TargetForces::_forceComponent_slice *to, const m2ms::TargetForces::_forceComponent_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::TargetForces::_forceComponent, m2ms::TargetForces::_forceComponent_slice, m2ms::TargetForces::_forceComponent_uniq_>::free (m2ms::TargetForces::_forceComponent_slice *ptr);
template <>
m2ms::TemperaturesMeasured::_temps_slice* DDS_DCPS_ArrayHelper < m2ms::TemperaturesMeasured::_temps, m2ms::TemperaturesMeasured::_temps_slice, m2ms::TemperaturesMeasured::_temps_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::TemperaturesMeasured::_temps, m2ms::TemperaturesMeasured::_temps_slice, m2ms::TemperaturesMeasured::_temps_uniq_>::copy (m2ms::TemperaturesMeasured::_temps_slice *to, const m2ms::TemperaturesMeasured::_temps_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::TemperaturesMeasured::_temps, m2ms::TemperaturesMeasured::_temps_slice, m2ms::TemperaturesMeasured::_temps_uniq_>::free (m2ms::TemperaturesMeasured::_temps_slice *ptr);
template <>
m2ms::TemperaturesMeasured::_intakeTemperatures_slice* DDS_DCPS_ArrayHelper < m2ms::TemperaturesMeasured::_intakeTemperatures, m2ms::TemperaturesMeasured::_intakeTemperatures_slice, m2ms::TemperaturesMeasured::_intakeTemperatures_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::TemperaturesMeasured::_intakeTemperatures, m2ms::TemperaturesMeasured::_intakeTemperatures_slice, m2ms::TemperaturesMeasured::_intakeTemperatures_uniq_>::copy (m2ms::TemperaturesMeasured::_intakeTemperatures_slice *to, const m2ms::TemperaturesMeasured::_intakeTemperatures_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::TemperaturesMeasured::_intakeTemperatures, m2ms::TemperaturesMeasured::_intakeTemperatures_slice, m2ms::TemperaturesMeasured::_intakeTemperatures_uniq_>::free (m2ms::TemperaturesMeasured::_intakeTemperatures_slice *ptr);
template <>
m2ms::TemperaturesMeasured::_exhaustTemperatures_slice* DDS_DCPS_ArrayHelper < m2ms::TemperaturesMeasured::_exhaustTemperatures, m2ms::TemperaturesMeasured::_exhaustTemperatures_slice, m2ms::TemperaturesMeasured::_exhaustTemperatures_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::TemperaturesMeasured::_exhaustTemperatures, m2ms::TemperaturesMeasured::_exhaustTemperatures_slice, m2ms::TemperaturesMeasured::_exhaustTemperatures_uniq_>::copy (m2ms::TemperaturesMeasured::_exhaustTemperatures_slice *to, const m2ms::TemperaturesMeasured::_exhaustTemperatures_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::TemperaturesMeasured::_exhaustTemperatures, m2ms::TemperaturesMeasured::_exhaustTemperatures_slice, m2ms::TemperaturesMeasured::_exhaustTemperatures_uniq_>::free (m2ms::TemperaturesMeasured::_exhaustTemperatures_slice *ptr);
template <>
m2ms::command_ApplyBendingMode::_bendingModeNbr_slice* DDS_DCPS_ArrayHelper < m2ms::command_ApplyBendingMode::_bendingModeNbr, m2ms::command_ApplyBendingMode::_bendingModeNbr_slice, m2ms::command_ApplyBendingMode::_bendingModeNbr_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::command_ApplyBendingMode::_bendingModeNbr, m2ms::command_ApplyBendingMode::_bendingModeNbr_slice, m2ms::command_ApplyBendingMode::_bendingModeNbr_uniq_>::copy (m2ms::command_ApplyBendingMode::_bendingModeNbr_slice *to, const m2ms::command_ApplyBendingMode::_bendingModeNbr_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::command_ApplyBendingMode::_bendingModeNbr, m2ms::command_ApplyBendingMode::_bendingModeNbr_slice, m2ms::command_ApplyBendingMode::_bendingModeNbr_uniq_>::free (m2ms::command_ApplyBendingMode::_bendingModeNbr_slice *ptr);
template <>
m2ms::command_ApplyBendingMode::_bendingModeValue_slice* DDS_DCPS_ArrayHelper < m2ms::command_ApplyBendingMode::_bendingModeValue, m2ms::command_ApplyBendingMode::_bendingModeValue_slice, m2ms::command_ApplyBendingMode::_bendingModeValue_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::command_ApplyBendingMode::_bendingModeValue, m2ms::command_ApplyBendingMode::_bendingModeValue_slice, m2ms::command_ApplyBendingMode::_bendingModeValue_uniq_>::copy (m2ms::command_ApplyBendingMode::_bendingModeValue_slice *to, const m2ms::command_ApplyBendingMode::_bendingModeValue_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::command_ApplyBendingMode::_bendingModeValue, m2ms::command_ApplyBendingMode::_bendingModeValue_slice, m2ms::command_ApplyBendingMode::_bendingModeValue_uniq_>::free (m2ms::command_ApplyBendingMode::_bendingModeValue_slice *ptr);
template <>
m2ms::command_ApplyForce::_forceSetPoint_slice* DDS_DCPS_ArrayHelper < m2ms::command_ApplyForce::_forceSetPoint, m2ms::command_ApplyForce::_forceSetPoint_slice, m2ms::command_ApplyForce::_forceSetPoint_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2ms::command_ApplyForce::_forceSetPoint, m2ms::command_ApplyForce::_forceSetPoint_slice, m2ms::command_ApplyForce::_forceSetPoint_uniq_>::copy (m2ms::command_ApplyForce::_forceSetPoint_slice *to, const m2ms::command_ApplyForce::_forceSetPoint_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2ms::command_ApplyForce::_forceSetPoint, m2ms::command_ApplyForce::_forceSetPoint_slice, m2ms::command_ApplyForce::_forceSetPoint_uniq_>::free (m2ms::command_ApplyForce::_forceSetPoint_slice *ptr);




#endif 
