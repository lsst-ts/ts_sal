//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: sal_m2msDcps.h
//  Source: sal_m2msDcps.idl
//  Generated: Thu Aug 23 17:36:53 2018
//  OpenSplice V6.4.140320OSS
//  
//******************************************************************
#ifndef _SAL_M2MSDCPS_H_
#define _SAL_M2MSDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps.h"
#include "sal_m2ms.h"


namespace m2ms
{

   class ActuatorLimitSwitchesTypeSupportInterface;

   typedef ActuatorLimitSwitchesTypeSupportInterface * ActuatorLimitSwitchesTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ActuatorLimitSwitchesTypeSupportInterface> ActuatorLimitSwitchesTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ActuatorLimitSwitchesTypeSupportInterface> ActuatorLimitSwitchesTypeSupportInterface_out;


   class ActuatorLimitSwitchesDataWriter;

   typedef ActuatorLimitSwitchesDataWriter * ActuatorLimitSwitchesDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ActuatorLimitSwitchesDataWriter> ActuatorLimitSwitchesDataWriter_var;
   typedef DDS_DCPSInterface_out < ActuatorLimitSwitchesDataWriter> ActuatorLimitSwitchesDataWriter_out;


   class ActuatorLimitSwitchesDataReader;

   typedef ActuatorLimitSwitchesDataReader * ActuatorLimitSwitchesDataReader_ptr;
   typedef DDS_DCPSInterface_var < ActuatorLimitSwitchesDataReader> ActuatorLimitSwitchesDataReader_var;
   typedef DDS_DCPSInterface_out < ActuatorLimitSwitchesDataReader> ActuatorLimitSwitchesDataReader_out;


   class ActuatorLimitSwitchesDataReaderView;

   typedef ActuatorLimitSwitchesDataReaderView * ActuatorLimitSwitchesDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ActuatorLimitSwitchesDataReaderView> ActuatorLimitSwitchesDataReaderView_var;
   typedef DDS_DCPSInterface_out < ActuatorLimitSwitchesDataReaderView> ActuatorLimitSwitchesDataReaderView_out;


   class AxialActuatorAbsolutePositionStepsTypeSupportInterface;

   typedef AxialActuatorAbsolutePositionStepsTypeSupportInterface * AxialActuatorAbsolutePositionStepsTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < AxialActuatorAbsolutePositionStepsTypeSupportInterface> AxialActuatorAbsolutePositionStepsTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < AxialActuatorAbsolutePositionStepsTypeSupportInterface> AxialActuatorAbsolutePositionStepsTypeSupportInterface_out;


   class AxialActuatorAbsolutePositionStepsDataWriter;

   typedef AxialActuatorAbsolutePositionStepsDataWriter * AxialActuatorAbsolutePositionStepsDataWriter_ptr;
   typedef DDS_DCPSInterface_var < AxialActuatorAbsolutePositionStepsDataWriter> AxialActuatorAbsolutePositionStepsDataWriter_var;
   typedef DDS_DCPSInterface_out < AxialActuatorAbsolutePositionStepsDataWriter> AxialActuatorAbsolutePositionStepsDataWriter_out;


   class AxialActuatorAbsolutePositionStepsDataReader;

   typedef AxialActuatorAbsolutePositionStepsDataReader * AxialActuatorAbsolutePositionStepsDataReader_ptr;
   typedef DDS_DCPSInterface_var < AxialActuatorAbsolutePositionStepsDataReader> AxialActuatorAbsolutePositionStepsDataReader_var;
   typedef DDS_DCPSInterface_out < AxialActuatorAbsolutePositionStepsDataReader> AxialActuatorAbsolutePositionStepsDataReader_out;


   class AxialActuatorAbsolutePositionStepsDataReaderView;

   typedef AxialActuatorAbsolutePositionStepsDataReaderView * AxialActuatorAbsolutePositionStepsDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < AxialActuatorAbsolutePositionStepsDataReaderView> AxialActuatorAbsolutePositionStepsDataReaderView_var;
   typedef DDS_DCPSInterface_out < AxialActuatorAbsolutePositionStepsDataReaderView> AxialActuatorAbsolutePositionStepsDataReaderView_out;


   class AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface;

   typedef AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface * AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface> AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface> AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_out;


   class AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter;

   typedef AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter * AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_ptr;
   typedef DDS_DCPSInterface_var < AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter> AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_var;
   typedef DDS_DCPSInterface_out < AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter> AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_out;


   class AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader;

   typedef AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader * AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_ptr;
   typedef DDS_DCPSInterface_var < AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader> AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_var;
   typedef DDS_DCPSInterface_out < AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader> AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_out;


   class AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView;

   typedef AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView * AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView> AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_var;
   typedef DDS_DCPSInterface_out < AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView> AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_out;


   class AxialForcesMeasuredTypeSupportInterface;

   typedef AxialForcesMeasuredTypeSupportInterface * AxialForcesMeasuredTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < AxialForcesMeasuredTypeSupportInterface> AxialForcesMeasuredTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < AxialForcesMeasuredTypeSupportInterface> AxialForcesMeasuredTypeSupportInterface_out;


   class AxialForcesMeasuredDataWriter;

   typedef AxialForcesMeasuredDataWriter * AxialForcesMeasuredDataWriter_ptr;
   typedef DDS_DCPSInterface_var < AxialForcesMeasuredDataWriter> AxialForcesMeasuredDataWriter_var;
   typedef DDS_DCPSInterface_out < AxialForcesMeasuredDataWriter> AxialForcesMeasuredDataWriter_out;


   class AxialForcesMeasuredDataReader;

   typedef AxialForcesMeasuredDataReader * AxialForcesMeasuredDataReader_ptr;
   typedef DDS_DCPSInterface_var < AxialForcesMeasuredDataReader> AxialForcesMeasuredDataReader_var;
   typedef DDS_DCPSInterface_out < AxialForcesMeasuredDataReader> AxialForcesMeasuredDataReader_out;


   class AxialForcesMeasuredDataReaderView;

   typedef AxialForcesMeasuredDataReaderView * AxialForcesMeasuredDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < AxialForcesMeasuredDataReaderView> AxialForcesMeasuredDataReaderView_var;
   typedef DDS_DCPSInterface_out < AxialForcesMeasuredDataReaderView> AxialForcesMeasuredDataReaderView_out;


   class MirrorPositionMeasuredTypeSupportInterface;

   typedef MirrorPositionMeasuredTypeSupportInterface * MirrorPositionMeasuredTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < MirrorPositionMeasuredTypeSupportInterface> MirrorPositionMeasuredTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < MirrorPositionMeasuredTypeSupportInterface> MirrorPositionMeasuredTypeSupportInterface_out;


   class MirrorPositionMeasuredDataWriter;

   typedef MirrorPositionMeasuredDataWriter * MirrorPositionMeasuredDataWriter_ptr;
   typedef DDS_DCPSInterface_var < MirrorPositionMeasuredDataWriter> MirrorPositionMeasuredDataWriter_var;
   typedef DDS_DCPSInterface_out < MirrorPositionMeasuredDataWriter> MirrorPositionMeasuredDataWriter_out;


   class MirrorPositionMeasuredDataReader;

   typedef MirrorPositionMeasuredDataReader * MirrorPositionMeasuredDataReader_ptr;
   typedef DDS_DCPSInterface_var < MirrorPositionMeasuredDataReader> MirrorPositionMeasuredDataReader_var;
   typedef DDS_DCPSInterface_out < MirrorPositionMeasuredDataReader> MirrorPositionMeasuredDataReader_out;


   class MirrorPositionMeasuredDataReaderView;

   typedef MirrorPositionMeasuredDataReaderView * MirrorPositionMeasuredDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < MirrorPositionMeasuredDataReaderView> MirrorPositionMeasuredDataReaderView_var;
   typedef DDS_DCPSInterface_out < MirrorPositionMeasuredDataReaderView> MirrorPositionMeasuredDataReaderView_out;


   class PowerStatusTypeSupportInterface;

   typedef PowerStatusTypeSupportInterface * PowerStatusTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < PowerStatusTypeSupportInterface> PowerStatusTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < PowerStatusTypeSupportInterface> PowerStatusTypeSupportInterface_out;


   class PowerStatusDataWriter;

   typedef PowerStatusDataWriter * PowerStatusDataWriter_ptr;
   typedef DDS_DCPSInterface_var < PowerStatusDataWriter> PowerStatusDataWriter_var;
   typedef DDS_DCPSInterface_out < PowerStatusDataWriter> PowerStatusDataWriter_out;


   class PowerStatusDataReader;

   typedef PowerStatusDataReader * PowerStatusDataReader_ptr;
   typedef DDS_DCPSInterface_var < PowerStatusDataReader> PowerStatusDataReader_var;
   typedef DDS_DCPSInterface_out < PowerStatusDataReader> PowerStatusDataReader_out;


   class PowerStatusDataReaderView;

   typedef PowerStatusDataReaderView * PowerStatusDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < PowerStatusDataReaderView> PowerStatusDataReaderView_var;
   typedef DDS_DCPSInterface_out < PowerStatusDataReaderView> PowerStatusDataReaderView_out;


   class RawDisplacementTypeSupportInterface;

   typedef RawDisplacementTypeSupportInterface * RawDisplacementTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < RawDisplacementTypeSupportInterface> RawDisplacementTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < RawDisplacementTypeSupportInterface> RawDisplacementTypeSupportInterface_out;


   class RawDisplacementDataWriter;

   typedef RawDisplacementDataWriter * RawDisplacementDataWriter_ptr;
   typedef DDS_DCPSInterface_var < RawDisplacementDataWriter> RawDisplacementDataWriter_var;
   typedef DDS_DCPSInterface_out < RawDisplacementDataWriter> RawDisplacementDataWriter_out;


   class RawDisplacementDataReader;

   typedef RawDisplacementDataReader * RawDisplacementDataReader_ptr;
   typedef DDS_DCPSInterface_var < RawDisplacementDataReader> RawDisplacementDataReader_var;
   typedef DDS_DCPSInterface_out < RawDisplacementDataReader> RawDisplacementDataReader_out;


   class RawDisplacementDataReaderView;

   typedef RawDisplacementDataReaderView * RawDisplacementDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < RawDisplacementDataReaderView> RawDisplacementDataReaderView_var;
   typedef DDS_DCPSInterface_out < RawDisplacementDataReaderView> RawDisplacementDataReaderView_out;


   class RawTelemetryTypeSupportInterface;

   typedef RawTelemetryTypeSupportInterface * RawTelemetryTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < RawTelemetryTypeSupportInterface> RawTelemetryTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < RawTelemetryTypeSupportInterface> RawTelemetryTypeSupportInterface_out;


   class RawTelemetryDataWriter;

   typedef RawTelemetryDataWriter * RawTelemetryDataWriter_ptr;
   typedef DDS_DCPSInterface_var < RawTelemetryDataWriter> RawTelemetryDataWriter_var;
   typedef DDS_DCPSInterface_out < RawTelemetryDataWriter> RawTelemetryDataWriter_out;


   class RawTelemetryDataReader;

   typedef RawTelemetryDataReader * RawTelemetryDataReader_ptr;
   typedef DDS_DCPSInterface_var < RawTelemetryDataReader> RawTelemetryDataReader_var;
   typedef DDS_DCPSInterface_out < RawTelemetryDataReader> RawTelemetryDataReader_out;


   class RawTelemetryDataReaderView;

   typedef RawTelemetryDataReaderView * RawTelemetryDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < RawTelemetryDataReaderView> RawTelemetryDataReaderView_var;
   typedef DDS_DCPSInterface_out < RawTelemetryDataReaderView> RawTelemetryDataReaderView_out;


   class StepVectorUpdateTypeSupportInterface;

   typedef StepVectorUpdateTypeSupportInterface * StepVectorUpdateTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < StepVectorUpdateTypeSupportInterface> StepVectorUpdateTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < StepVectorUpdateTypeSupportInterface> StepVectorUpdateTypeSupportInterface_out;


   class StepVectorUpdateDataWriter;

   typedef StepVectorUpdateDataWriter * StepVectorUpdateDataWriter_ptr;
   typedef DDS_DCPSInterface_var < StepVectorUpdateDataWriter> StepVectorUpdateDataWriter_var;
   typedef DDS_DCPSInterface_out < StepVectorUpdateDataWriter> StepVectorUpdateDataWriter_out;


   class StepVectorUpdateDataReader;

   typedef StepVectorUpdateDataReader * StepVectorUpdateDataReader_ptr;
   typedef DDS_DCPSInterface_var < StepVectorUpdateDataReader> StepVectorUpdateDataReader_var;
   typedef DDS_DCPSInterface_out < StepVectorUpdateDataReader> StepVectorUpdateDataReader_out;


   class StepVectorUpdateDataReaderView;

   typedef StepVectorUpdateDataReaderView * StepVectorUpdateDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < StepVectorUpdateDataReaderView> StepVectorUpdateDataReaderView_var;
   typedef DDS_DCPSInterface_out < StepVectorUpdateDataReaderView> StepVectorUpdateDataReaderView_out;


   class SystemStatusTypeSupportInterface;

   typedef SystemStatusTypeSupportInterface * SystemStatusTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < SystemStatusTypeSupportInterface> SystemStatusTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < SystemStatusTypeSupportInterface> SystemStatusTypeSupportInterface_out;


   class SystemStatusDataWriter;

   typedef SystemStatusDataWriter * SystemStatusDataWriter_ptr;
   typedef DDS_DCPSInterface_var < SystemStatusDataWriter> SystemStatusDataWriter_var;
   typedef DDS_DCPSInterface_out < SystemStatusDataWriter> SystemStatusDataWriter_out;


   class SystemStatusDataReader;

   typedef SystemStatusDataReader * SystemStatusDataReader_ptr;
   typedef DDS_DCPSInterface_var < SystemStatusDataReader> SystemStatusDataReader_var;
   typedef DDS_DCPSInterface_out < SystemStatusDataReader> SystemStatusDataReader_out;


   class SystemStatusDataReaderView;

   typedef SystemStatusDataReaderView * SystemStatusDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < SystemStatusDataReaderView> SystemStatusDataReaderView_var;
   typedef DDS_DCPSInterface_out < SystemStatusDataReaderView> SystemStatusDataReaderView_out;


   class TangentActuatorAbsolutePositionStepsTypeSupportInterface;

   typedef TangentActuatorAbsolutePositionStepsTypeSupportInterface * TangentActuatorAbsolutePositionStepsTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < TangentActuatorAbsolutePositionStepsTypeSupportInterface> TangentActuatorAbsolutePositionStepsTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < TangentActuatorAbsolutePositionStepsTypeSupportInterface> TangentActuatorAbsolutePositionStepsTypeSupportInterface_out;


   class TangentActuatorAbsolutePositionStepsDataWriter;

   typedef TangentActuatorAbsolutePositionStepsDataWriter * TangentActuatorAbsolutePositionStepsDataWriter_ptr;
   typedef DDS_DCPSInterface_var < TangentActuatorAbsolutePositionStepsDataWriter> TangentActuatorAbsolutePositionStepsDataWriter_var;
   typedef DDS_DCPSInterface_out < TangentActuatorAbsolutePositionStepsDataWriter> TangentActuatorAbsolutePositionStepsDataWriter_out;


   class TangentActuatorAbsolutePositionStepsDataReader;

   typedef TangentActuatorAbsolutePositionStepsDataReader * TangentActuatorAbsolutePositionStepsDataReader_ptr;
   typedef DDS_DCPSInterface_var < TangentActuatorAbsolutePositionStepsDataReader> TangentActuatorAbsolutePositionStepsDataReader_var;
   typedef DDS_DCPSInterface_out < TangentActuatorAbsolutePositionStepsDataReader> TangentActuatorAbsolutePositionStepsDataReader_out;


   class TangentActuatorAbsolutePositionStepsDataReaderView;

   typedef TangentActuatorAbsolutePositionStepsDataReaderView * TangentActuatorAbsolutePositionStepsDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < TangentActuatorAbsolutePositionStepsDataReaderView> TangentActuatorAbsolutePositionStepsDataReaderView_var;
   typedef DDS_DCPSInterface_out < TangentActuatorAbsolutePositionStepsDataReaderView> TangentActuatorAbsolutePositionStepsDataReaderView_out;


   class TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface;

   typedef TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface * TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface> TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface> TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_out;


   class TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter;

   typedef TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter * TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_ptr;
   typedef DDS_DCPSInterface_var < TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter> TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_var;
   typedef DDS_DCPSInterface_out < TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter> TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_out;


   class TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader;

   typedef TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader * TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_ptr;
   typedef DDS_DCPSInterface_var < TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader> TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_var;
   typedef DDS_DCPSInterface_out < TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader> TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_out;


   class TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView;

   typedef TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView * TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView> TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_var;
   typedef DDS_DCPSInterface_out < TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView> TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_out;


   class TangentForcesMeasuredTypeSupportInterface;

   typedef TangentForcesMeasuredTypeSupportInterface * TangentForcesMeasuredTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < TangentForcesMeasuredTypeSupportInterface> TangentForcesMeasuredTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < TangentForcesMeasuredTypeSupportInterface> TangentForcesMeasuredTypeSupportInterface_out;


   class TangentForcesMeasuredDataWriter;

   typedef TangentForcesMeasuredDataWriter * TangentForcesMeasuredDataWriter_ptr;
   typedef DDS_DCPSInterface_var < TangentForcesMeasuredDataWriter> TangentForcesMeasuredDataWriter_var;
   typedef DDS_DCPSInterface_out < TangentForcesMeasuredDataWriter> TangentForcesMeasuredDataWriter_out;


   class TangentForcesMeasuredDataReader;

   typedef TangentForcesMeasuredDataReader * TangentForcesMeasuredDataReader_ptr;
   typedef DDS_DCPSInterface_var < TangentForcesMeasuredDataReader> TangentForcesMeasuredDataReader_var;
   typedef DDS_DCPSInterface_out < TangentForcesMeasuredDataReader> TangentForcesMeasuredDataReader_out;


   class TangentForcesMeasuredDataReaderView;

   typedef TangentForcesMeasuredDataReaderView * TangentForcesMeasuredDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < TangentForcesMeasuredDataReaderView> TangentForcesMeasuredDataReaderView_var;
   typedef DDS_DCPSInterface_out < TangentForcesMeasuredDataReaderView> TangentForcesMeasuredDataReaderView_out;


   class TargetForcesTypeSupportInterface;

   typedef TargetForcesTypeSupportInterface * TargetForcesTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < TargetForcesTypeSupportInterface> TargetForcesTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < TargetForcesTypeSupportInterface> TargetForcesTypeSupportInterface_out;


   class TargetForcesDataWriter;

   typedef TargetForcesDataWriter * TargetForcesDataWriter_ptr;
   typedef DDS_DCPSInterface_var < TargetForcesDataWriter> TargetForcesDataWriter_var;
   typedef DDS_DCPSInterface_out < TargetForcesDataWriter> TargetForcesDataWriter_out;


   class TargetForcesDataReader;

   typedef TargetForcesDataReader * TargetForcesDataReader_ptr;
   typedef DDS_DCPSInterface_var < TargetForcesDataReader> TargetForcesDataReader_var;
   typedef DDS_DCPSInterface_out < TargetForcesDataReader> TargetForcesDataReader_out;


   class TargetForcesDataReaderView;

   typedef TargetForcesDataReaderView * TargetForcesDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < TargetForcesDataReaderView> TargetForcesDataReaderView_var;
   typedef DDS_DCPSInterface_out < TargetForcesDataReaderView> TargetForcesDataReaderView_out;


   class TemperaturesMeasuredTypeSupportInterface;

   typedef TemperaturesMeasuredTypeSupportInterface * TemperaturesMeasuredTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < TemperaturesMeasuredTypeSupportInterface> TemperaturesMeasuredTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < TemperaturesMeasuredTypeSupportInterface> TemperaturesMeasuredTypeSupportInterface_out;


   class TemperaturesMeasuredDataWriter;

   typedef TemperaturesMeasuredDataWriter * TemperaturesMeasuredDataWriter_ptr;
   typedef DDS_DCPSInterface_var < TemperaturesMeasuredDataWriter> TemperaturesMeasuredDataWriter_var;
   typedef DDS_DCPSInterface_out < TemperaturesMeasuredDataWriter> TemperaturesMeasuredDataWriter_out;


   class TemperaturesMeasuredDataReader;

   typedef TemperaturesMeasuredDataReader * TemperaturesMeasuredDataReader_ptr;
   typedef DDS_DCPSInterface_var < TemperaturesMeasuredDataReader> TemperaturesMeasuredDataReader_var;
   typedef DDS_DCPSInterface_out < TemperaturesMeasuredDataReader> TemperaturesMeasuredDataReader_out;


   class TemperaturesMeasuredDataReaderView;

   typedef TemperaturesMeasuredDataReaderView * TemperaturesMeasuredDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < TemperaturesMeasuredDataReaderView> TemperaturesMeasuredDataReaderView_var;
   typedef DDS_DCPSInterface_out < TemperaturesMeasuredDataReaderView> TemperaturesMeasuredDataReaderView_out;


   class ZenithAngleMeasuredTypeSupportInterface;

   typedef ZenithAngleMeasuredTypeSupportInterface * ZenithAngleMeasuredTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ZenithAngleMeasuredTypeSupportInterface> ZenithAngleMeasuredTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ZenithAngleMeasuredTypeSupportInterface> ZenithAngleMeasuredTypeSupportInterface_out;


   class ZenithAngleMeasuredDataWriter;

   typedef ZenithAngleMeasuredDataWriter * ZenithAngleMeasuredDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ZenithAngleMeasuredDataWriter> ZenithAngleMeasuredDataWriter_var;
   typedef DDS_DCPSInterface_out < ZenithAngleMeasuredDataWriter> ZenithAngleMeasuredDataWriter_out;


   class ZenithAngleMeasuredDataReader;

   typedef ZenithAngleMeasuredDataReader * ZenithAngleMeasuredDataReader_ptr;
   typedef DDS_DCPSInterface_var < ZenithAngleMeasuredDataReader> ZenithAngleMeasuredDataReader_var;
   typedef DDS_DCPSInterface_out < ZenithAngleMeasuredDataReader> ZenithAngleMeasuredDataReader_out;


   class ZenithAngleMeasuredDataReaderView;

   typedef ZenithAngleMeasuredDataReaderView * ZenithAngleMeasuredDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ZenithAngleMeasuredDataReaderView> ZenithAngleMeasuredDataReaderView_var;
   typedef DDS_DCPSInterface_out < ZenithAngleMeasuredDataReaderView> ZenithAngleMeasuredDataReaderView_out;


   class command_ApplyBendingModeTypeSupportInterface;

   typedef command_ApplyBendingModeTypeSupportInterface * command_ApplyBendingModeTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_ApplyBendingModeTypeSupportInterface> command_ApplyBendingModeTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_ApplyBendingModeTypeSupportInterface> command_ApplyBendingModeTypeSupportInterface_out;


   class command_ApplyBendingModeDataWriter;

   typedef command_ApplyBendingModeDataWriter * command_ApplyBendingModeDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_ApplyBendingModeDataWriter> command_ApplyBendingModeDataWriter_var;
   typedef DDS_DCPSInterface_out < command_ApplyBendingModeDataWriter> command_ApplyBendingModeDataWriter_out;


   class command_ApplyBendingModeDataReader;

   typedef command_ApplyBendingModeDataReader * command_ApplyBendingModeDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_ApplyBendingModeDataReader> command_ApplyBendingModeDataReader_var;
   typedef DDS_DCPSInterface_out < command_ApplyBendingModeDataReader> command_ApplyBendingModeDataReader_out;


   class command_ApplyBendingModeDataReaderView;

   typedef command_ApplyBendingModeDataReaderView * command_ApplyBendingModeDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_ApplyBendingModeDataReaderView> command_ApplyBendingModeDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_ApplyBendingModeDataReaderView> command_ApplyBendingModeDataReaderView_out;


   class command_ApplyForceTypeSupportInterface;

   typedef command_ApplyForceTypeSupportInterface * command_ApplyForceTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_ApplyForceTypeSupportInterface> command_ApplyForceTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_ApplyForceTypeSupportInterface> command_ApplyForceTypeSupportInterface_out;


   class command_ApplyForceDataWriter;

   typedef command_ApplyForceDataWriter * command_ApplyForceDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_ApplyForceDataWriter> command_ApplyForceDataWriter_var;
   typedef DDS_DCPSInterface_out < command_ApplyForceDataWriter> command_ApplyForceDataWriter_out;


   class command_ApplyForceDataReader;

   typedef command_ApplyForceDataReader * command_ApplyForceDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_ApplyForceDataReader> command_ApplyForceDataReader_var;
   typedef DDS_DCPSInterface_out < command_ApplyForceDataReader> command_ApplyForceDataReader_out;


   class command_ApplyForceDataReaderView;

   typedef command_ApplyForceDataReaderView * command_ApplyForceDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_ApplyForceDataReaderView> command_ApplyForceDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_ApplyForceDataReaderView> command_ApplyForceDataReaderView_out;


   class command_MoveAxialActuatorTypeSupportInterface;

   typedef command_MoveAxialActuatorTypeSupportInterface * command_MoveAxialActuatorTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_MoveAxialActuatorTypeSupportInterface> command_MoveAxialActuatorTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_MoveAxialActuatorTypeSupportInterface> command_MoveAxialActuatorTypeSupportInterface_out;


   class command_MoveAxialActuatorDataWriter;

   typedef command_MoveAxialActuatorDataWriter * command_MoveAxialActuatorDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_MoveAxialActuatorDataWriter> command_MoveAxialActuatorDataWriter_var;
   typedef DDS_DCPSInterface_out < command_MoveAxialActuatorDataWriter> command_MoveAxialActuatorDataWriter_out;


   class command_MoveAxialActuatorDataReader;

   typedef command_MoveAxialActuatorDataReader * command_MoveAxialActuatorDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_MoveAxialActuatorDataReader> command_MoveAxialActuatorDataReader_var;
   typedef DDS_DCPSInterface_out < command_MoveAxialActuatorDataReader> command_MoveAxialActuatorDataReader_out;


   class command_MoveAxialActuatorDataReaderView;

   typedef command_MoveAxialActuatorDataReaderView * command_MoveAxialActuatorDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_MoveAxialActuatorDataReaderView> command_MoveAxialActuatorDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_MoveAxialActuatorDataReaderView> command_MoveAxialActuatorDataReaderView_out;


   class command_PositionMirrorTypeSupportInterface;

   typedef command_PositionMirrorTypeSupportInterface * command_PositionMirrorTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_PositionMirrorTypeSupportInterface> command_PositionMirrorTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_PositionMirrorTypeSupportInterface> command_PositionMirrorTypeSupportInterface_out;


   class command_PositionMirrorDataWriter;

   typedef command_PositionMirrorDataWriter * command_PositionMirrorDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_PositionMirrorDataWriter> command_PositionMirrorDataWriter_var;
   typedef DDS_DCPSInterface_out < command_PositionMirrorDataWriter> command_PositionMirrorDataWriter_out;


   class command_PositionMirrorDataReader;

   typedef command_PositionMirrorDataReader * command_PositionMirrorDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_PositionMirrorDataReader> command_PositionMirrorDataReader_var;
   typedef DDS_DCPSInterface_out < command_PositionMirrorDataReader> command_PositionMirrorDataReader_out;


   class command_PositionMirrorDataReaderView;

   typedef command_PositionMirrorDataReaderView * command_PositionMirrorDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_PositionMirrorDataReaderView> command_PositionMirrorDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_PositionMirrorDataReaderView> command_PositionMirrorDataReaderView_out;


   class command_SetCorrectionModeTypeSupportInterface;

   typedef command_SetCorrectionModeTypeSupportInterface * command_SetCorrectionModeTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_SetCorrectionModeTypeSupportInterface> command_SetCorrectionModeTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_SetCorrectionModeTypeSupportInterface> command_SetCorrectionModeTypeSupportInterface_out;


   class command_SetCorrectionModeDataWriter;

   typedef command_SetCorrectionModeDataWriter * command_SetCorrectionModeDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_SetCorrectionModeDataWriter> command_SetCorrectionModeDataWriter_var;
   typedef DDS_DCPSInterface_out < command_SetCorrectionModeDataWriter> command_SetCorrectionModeDataWriter_out;


   class command_SetCorrectionModeDataReader;

   typedef command_SetCorrectionModeDataReader * command_SetCorrectionModeDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_SetCorrectionModeDataReader> command_SetCorrectionModeDataReader_var;
   typedef DDS_DCPSInterface_out < command_SetCorrectionModeDataReader> command_SetCorrectionModeDataReader_out;


   class command_SetCorrectionModeDataReaderView;

   typedef command_SetCorrectionModeDataReaderView * command_SetCorrectionModeDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_SetCorrectionModeDataReaderView> command_SetCorrectionModeDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_SetCorrectionModeDataReaderView> command_SetCorrectionModeDataReaderView_out;


   class logevent_M2AssemblyInPositionTypeSupportInterface;

   typedef logevent_M2AssemblyInPositionTypeSupportInterface * logevent_M2AssemblyInPositionTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_M2AssemblyInPositionTypeSupportInterface> logevent_M2AssemblyInPositionTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_M2AssemblyInPositionTypeSupportInterface> logevent_M2AssemblyInPositionTypeSupportInterface_out;


   class logevent_M2AssemblyInPositionDataWriter;

   typedef logevent_M2AssemblyInPositionDataWriter * logevent_M2AssemblyInPositionDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_M2AssemblyInPositionDataWriter> logevent_M2AssemblyInPositionDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_M2AssemblyInPositionDataWriter> logevent_M2AssemblyInPositionDataWriter_out;


   class logevent_M2AssemblyInPositionDataReader;

   typedef logevent_M2AssemblyInPositionDataReader * logevent_M2AssemblyInPositionDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_M2AssemblyInPositionDataReader> logevent_M2AssemblyInPositionDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_M2AssemblyInPositionDataReader> logevent_M2AssemblyInPositionDataReader_out;


   class logevent_M2AssemblyInPositionDataReaderView;

   typedef logevent_M2AssemblyInPositionDataReaderView * logevent_M2AssemblyInPositionDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_M2AssemblyInPositionDataReaderView> logevent_M2AssemblyInPositionDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_M2AssemblyInPositionDataReaderView> logevent_M2AssemblyInPositionDataReaderView_out;


   class logevent_M2DetailedStateTypeSupportInterface;

   typedef logevent_M2DetailedStateTypeSupportInterface * logevent_M2DetailedStateTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_M2DetailedStateTypeSupportInterface> logevent_M2DetailedStateTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_M2DetailedStateTypeSupportInterface> logevent_M2DetailedStateTypeSupportInterface_out;


   class logevent_M2DetailedStateDataWriter;

   typedef logevent_M2DetailedStateDataWriter * logevent_M2DetailedStateDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_M2DetailedStateDataWriter> logevent_M2DetailedStateDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_M2DetailedStateDataWriter> logevent_M2DetailedStateDataWriter_out;


   class logevent_M2DetailedStateDataReader;

   typedef logevent_M2DetailedStateDataReader * logevent_M2DetailedStateDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_M2DetailedStateDataReader> logevent_M2DetailedStateDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_M2DetailedStateDataReader> logevent_M2DetailedStateDataReader_out;


   class logevent_M2DetailedStateDataReaderView;

   typedef logevent_M2DetailedStateDataReaderView * logevent_M2DetailedStateDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_M2DetailedStateDataReaderView> logevent_M2DetailedStateDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_M2DetailedStateDataReaderView> logevent_M2DetailedStateDataReaderView_out;


   class logevent_M2FaultStateTypeSupportInterface;

   typedef logevent_M2FaultStateTypeSupportInterface * logevent_M2FaultStateTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_M2FaultStateTypeSupportInterface> logevent_M2FaultStateTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_M2FaultStateTypeSupportInterface> logevent_M2FaultStateTypeSupportInterface_out;


   class logevent_M2FaultStateDataWriter;

   typedef logevent_M2FaultStateDataWriter * logevent_M2FaultStateDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_M2FaultStateDataWriter> logevent_M2FaultStateDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_M2FaultStateDataWriter> logevent_M2FaultStateDataWriter_out;


   class logevent_M2FaultStateDataReader;

   typedef logevent_M2FaultStateDataReader * logevent_M2FaultStateDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_M2FaultStateDataReader> logevent_M2FaultStateDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_M2FaultStateDataReader> logevent_M2FaultStateDataReader_out;


   class logevent_M2FaultStateDataReaderView;

   typedef logevent_M2FaultStateDataReaderView * logevent_M2FaultStateDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_M2FaultStateDataReaderView> logevent_M2FaultStateDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_M2FaultStateDataReaderView> logevent_M2FaultStateDataReaderView_out;


   class logevent_M2SummaryStateTypeSupportInterface;

   typedef logevent_M2SummaryStateTypeSupportInterface * logevent_M2SummaryStateTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_M2SummaryStateTypeSupportInterface> logevent_M2SummaryStateTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_M2SummaryStateTypeSupportInterface> logevent_M2SummaryStateTypeSupportInterface_out;


   class logevent_M2SummaryStateDataWriter;

   typedef logevent_M2SummaryStateDataWriter * logevent_M2SummaryStateDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_M2SummaryStateDataWriter> logevent_M2SummaryStateDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_M2SummaryStateDataWriter> logevent_M2SummaryStateDataWriter_out;


   class logevent_M2SummaryStateDataReader;

   typedef logevent_M2SummaryStateDataReader * logevent_M2SummaryStateDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_M2SummaryStateDataReader> logevent_M2SummaryStateDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_M2SummaryStateDataReader> logevent_M2SummaryStateDataReader_out;


   class logevent_M2SummaryStateDataReaderView;

   typedef logevent_M2SummaryStateDataReaderView * logevent_M2SummaryStateDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_M2SummaryStateDataReaderView> logevent_M2SummaryStateDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_M2SummaryStateDataReaderView> logevent_M2SummaryStateDataReaderView_out;


   class commandTypeSupportInterface;

   typedef commandTypeSupportInterface * commandTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < commandTypeSupportInterface> commandTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < commandTypeSupportInterface> commandTypeSupportInterface_out;


   class commandDataWriter;

   typedef commandDataWriter * commandDataWriter_ptr;
   typedef DDS_DCPSInterface_var < commandDataWriter> commandDataWriter_var;
   typedef DDS_DCPSInterface_out < commandDataWriter> commandDataWriter_out;


   class commandDataReader;

   typedef commandDataReader * commandDataReader_ptr;
   typedef DDS_DCPSInterface_var < commandDataReader> commandDataReader_var;
   typedef DDS_DCPSInterface_out < commandDataReader> commandDataReader_out;


   class commandDataReaderView;

   typedef commandDataReaderView * commandDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < commandDataReaderView> commandDataReaderView_var;
   typedef DDS_DCPSInterface_out < commandDataReaderView> commandDataReaderView_out;


   class ackcmdTypeSupportInterface;

   typedef ackcmdTypeSupportInterface * ackcmdTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ackcmdTypeSupportInterface> ackcmdTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ackcmdTypeSupportInterface> ackcmdTypeSupportInterface_out;


   class ackcmdDataWriter;

   typedef ackcmdDataWriter * ackcmdDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ackcmdDataWriter> ackcmdDataWriter_var;
   typedef DDS_DCPSInterface_out < ackcmdDataWriter> ackcmdDataWriter_out;


   class ackcmdDataReader;

   typedef ackcmdDataReader * ackcmdDataReader_ptr;
   typedef DDS_DCPSInterface_var < ackcmdDataReader> ackcmdDataReader_var;
   typedef DDS_DCPSInterface_out < ackcmdDataReader> ackcmdDataReader_out;


   class ackcmdDataReaderView;

   typedef ackcmdDataReaderView * ackcmdDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ackcmdDataReaderView> ackcmdDataReaderView_var;
   typedef DDS_DCPSInterface_out < ackcmdDataReaderView> ackcmdDataReaderView_out;


   class logeventTypeSupportInterface;

   typedef logeventTypeSupportInterface * logeventTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logeventTypeSupportInterface> logeventTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logeventTypeSupportInterface> logeventTypeSupportInterface_out;


   class logeventDataWriter;

   typedef logeventDataWriter * logeventDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logeventDataWriter> logeventDataWriter_var;
   typedef DDS_DCPSInterface_out < logeventDataWriter> logeventDataWriter_out;


   class logeventDataReader;

   typedef logeventDataReader * logeventDataReader_ptr;
   typedef DDS_DCPSInterface_var < logeventDataReader> logeventDataReader_var;
   typedef DDS_DCPSInterface_out < logeventDataReader> logeventDataReader_out;


   class logeventDataReaderView;

   typedef logeventDataReaderView * logeventDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logeventDataReaderView> logeventDataReaderView_var;
   typedef DDS_DCPSInterface_out < logeventDataReaderView> logeventDataReaderView_out;

   struct ActuatorLimitSwitchesSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < ActuatorLimitSwitches, struct ActuatorLimitSwitchesSeq_uniq_> ActuatorLimitSwitchesSeq;
   typedef DDS_DCPSSequence_var < ActuatorLimitSwitchesSeq> ActuatorLimitSwitchesSeq_var;
   typedef DDS_DCPSSequence_out < ActuatorLimitSwitchesSeq> ActuatorLimitSwitchesSeq_out;
   class ActuatorLimitSwitchesTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ActuatorLimitSwitchesTypeSupportInterface_ptr _ptr_type;
      typedef ActuatorLimitSwitchesTypeSupportInterface_var _var_type;

      static ActuatorLimitSwitchesTypeSupportInterface_ptr _duplicate (ActuatorLimitSwitchesTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ActuatorLimitSwitchesTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ActuatorLimitSwitchesTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ActuatorLimitSwitchesTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ActuatorLimitSwitchesTypeSupportInterface_ptr _this () { return this; }


   protected:
      ActuatorLimitSwitchesTypeSupportInterface () {};
      ~ActuatorLimitSwitchesTypeSupportInterface () {};
   private:
      ActuatorLimitSwitchesTypeSupportInterface (const ActuatorLimitSwitchesTypeSupportInterface &);
      ActuatorLimitSwitchesTypeSupportInterface & operator = (const ActuatorLimitSwitchesTypeSupportInterface &);
   };

   class ActuatorLimitSwitchesDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ActuatorLimitSwitchesDataWriter_ptr _ptr_type;
      typedef ActuatorLimitSwitchesDataWriter_var _var_type;

      static ActuatorLimitSwitchesDataWriter_ptr _duplicate (ActuatorLimitSwitchesDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ActuatorLimitSwitchesDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ActuatorLimitSwitchesDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ActuatorLimitSwitchesDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ActuatorLimitSwitchesDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const ActuatorLimitSwitches& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const ActuatorLimitSwitches& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const ActuatorLimitSwitches& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const ActuatorLimitSwitches& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const ActuatorLimitSwitches& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const ActuatorLimitSwitches& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const ActuatorLimitSwitches& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const ActuatorLimitSwitches& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const ActuatorLimitSwitches& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const ActuatorLimitSwitches& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (ActuatorLimitSwitches& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ActuatorLimitSwitches& instance_data) = 0;

   protected:
      ActuatorLimitSwitchesDataWriter () {};
      ~ActuatorLimitSwitchesDataWriter () {};
   private:
      ActuatorLimitSwitchesDataWriter (const ActuatorLimitSwitchesDataWriter &);
      ActuatorLimitSwitchesDataWriter & operator = (const ActuatorLimitSwitchesDataWriter &);
   };

   class ActuatorLimitSwitchesDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ActuatorLimitSwitchesDataReader_ptr _ptr_type;
      typedef ActuatorLimitSwitchesDataReader_var _var_type;

      static ActuatorLimitSwitchesDataReader_ptr _duplicate (ActuatorLimitSwitchesDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ActuatorLimitSwitchesDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ActuatorLimitSwitchesDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ActuatorLimitSwitchesDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ActuatorLimitSwitchesDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (ActuatorLimitSwitches& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (ActuatorLimitSwitches& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (ActuatorLimitSwitches& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ActuatorLimitSwitches& instance) = 0;

   protected:
      ActuatorLimitSwitchesDataReader () {};
      ~ActuatorLimitSwitchesDataReader () {};
   private:
      ActuatorLimitSwitchesDataReader (const ActuatorLimitSwitchesDataReader &);
      ActuatorLimitSwitchesDataReader & operator = (const ActuatorLimitSwitchesDataReader &);
   };

   class ActuatorLimitSwitchesDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ActuatorLimitSwitchesDataReaderView_ptr _ptr_type;
      typedef ActuatorLimitSwitchesDataReaderView_var _var_type;

      static ActuatorLimitSwitchesDataReaderView_ptr _duplicate (ActuatorLimitSwitchesDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ActuatorLimitSwitchesDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ActuatorLimitSwitchesDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ActuatorLimitSwitchesDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ActuatorLimitSwitchesDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (ActuatorLimitSwitches& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (ActuatorLimitSwitches& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ActuatorLimitSwitchesSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (ActuatorLimitSwitches& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ActuatorLimitSwitches& instance) = 0;

   protected:
      ActuatorLimitSwitchesDataReaderView () {};
      ~ActuatorLimitSwitchesDataReaderView () {};
   private:
      ActuatorLimitSwitchesDataReaderView (const ActuatorLimitSwitchesDataReaderView &);
      ActuatorLimitSwitchesDataReaderView & operator = (const ActuatorLimitSwitchesDataReaderView &);
   };

   struct AxialActuatorAbsolutePositionStepsSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < AxialActuatorAbsolutePositionSteps, struct AxialActuatorAbsolutePositionStepsSeq_uniq_> AxialActuatorAbsolutePositionStepsSeq;
   typedef DDS_DCPSSequence_var < AxialActuatorAbsolutePositionStepsSeq> AxialActuatorAbsolutePositionStepsSeq_var;
   typedef DDS_DCPSSequence_out < AxialActuatorAbsolutePositionStepsSeq> AxialActuatorAbsolutePositionStepsSeq_out;
   class AxialActuatorAbsolutePositionStepsTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef AxialActuatorAbsolutePositionStepsTypeSupportInterface_ptr _ptr_type;
      typedef AxialActuatorAbsolutePositionStepsTypeSupportInterface_var _var_type;

      static AxialActuatorAbsolutePositionStepsTypeSupportInterface_ptr _duplicate (AxialActuatorAbsolutePositionStepsTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AxialActuatorAbsolutePositionStepsTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static AxialActuatorAbsolutePositionStepsTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AxialActuatorAbsolutePositionStepsTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      AxialActuatorAbsolutePositionStepsTypeSupportInterface_ptr _this () { return this; }


   protected:
      AxialActuatorAbsolutePositionStepsTypeSupportInterface () {};
      ~AxialActuatorAbsolutePositionStepsTypeSupportInterface () {};
   private:
      AxialActuatorAbsolutePositionStepsTypeSupportInterface (const AxialActuatorAbsolutePositionStepsTypeSupportInterface &);
      AxialActuatorAbsolutePositionStepsTypeSupportInterface & operator = (const AxialActuatorAbsolutePositionStepsTypeSupportInterface &);
   };

   class AxialActuatorAbsolutePositionStepsDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef AxialActuatorAbsolutePositionStepsDataWriter_ptr _ptr_type;
      typedef AxialActuatorAbsolutePositionStepsDataWriter_var _var_type;

      static AxialActuatorAbsolutePositionStepsDataWriter_ptr _duplicate (AxialActuatorAbsolutePositionStepsDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AxialActuatorAbsolutePositionStepsDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static AxialActuatorAbsolutePositionStepsDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AxialActuatorAbsolutePositionStepsDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      AxialActuatorAbsolutePositionStepsDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const AxialActuatorAbsolutePositionSteps& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const AxialActuatorAbsolutePositionSteps& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const AxialActuatorAbsolutePositionSteps& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const AxialActuatorAbsolutePositionSteps& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const AxialActuatorAbsolutePositionSteps& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const AxialActuatorAbsolutePositionSteps& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const AxialActuatorAbsolutePositionSteps& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const AxialActuatorAbsolutePositionSteps& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const AxialActuatorAbsolutePositionSteps& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const AxialActuatorAbsolutePositionSteps& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (AxialActuatorAbsolutePositionSteps& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const AxialActuatorAbsolutePositionSteps& instance_data) = 0;

   protected:
      AxialActuatorAbsolutePositionStepsDataWriter () {};
      ~AxialActuatorAbsolutePositionStepsDataWriter () {};
   private:
      AxialActuatorAbsolutePositionStepsDataWriter (const AxialActuatorAbsolutePositionStepsDataWriter &);
      AxialActuatorAbsolutePositionStepsDataWriter & operator = (const AxialActuatorAbsolutePositionStepsDataWriter &);
   };

   class AxialActuatorAbsolutePositionStepsDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef AxialActuatorAbsolutePositionStepsDataReader_ptr _ptr_type;
      typedef AxialActuatorAbsolutePositionStepsDataReader_var _var_type;

      static AxialActuatorAbsolutePositionStepsDataReader_ptr _duplicate (AxialActuatorAbsolutePositionStepsDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AxialActuatorAbsolutePositionStepsDataReader_ptr _narrow (DDS::Object_ptr obj);
      static AxialActuatorAbsolutePositionStepsDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AxialActuatorAbsolutePositionStepsDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      AxialActuatorAbsolutePositionStepsDataReader_ptr _this () { return this; }

      virtual DDS::Long read (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (AxialActuatorAbsolutePositionSteps& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (AxialActuatorAbsolutePositionSteps& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (AxialActuatorAbsolutePositionSteps& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const AxialActuatorAbsolutePositionSteps& instance) = 0;

   protected:
      AxialActuatorAbsolutePositionStepsDataReader () {};
      ~AxialActuatorAbsolutePositionStepsDataReader () {};
   private:
      AxialActuatorAbsolutePositionStepsDataReader (const AxialActuatorAbsolutePositionStepsDataReader &);
      AxialActuatorAbsolutePositionStepsDataReader & operator = (const AxialActuatorAbsolutePositionStepsDataReader &);
   };

   class AxialActuatorAbsolutePositionStepsDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef AxialActuatorAbsolutePositionStepsDataReaderView_ptr _ptr_type;
      typedef AxialActuatorAbsolutePositionStepsDataReaderView_var _var_type;

      static AxialActuatorAbsolutePositionStepsDataReaderView_ptr _duplicate (AxialActuatorAbsolutePositionStepsDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AxialActuatorAbsolutePositionStepsDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static AxialActuatorAbsolutePositionStepsDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AxialActuatorAbsolutePositionStepsDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      AxialActuatorAbsolutePositionStepsDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (AxialActuatorAbsolutePositionSteps& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (AxialActuatorAbsolutePositionSteps& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (AxialActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (AxialActuatorAbsolutePositionSteps& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const AxialActuatorAbsolutePositionSteps& instance) = 0;

   protected:
      AxialActuatorAbsolutePositionStepsDataReaderView () {};
      ~AxialActuatorAbsolutePositionStepsDataReaderView () {};
   private:
      AxialActuatorAbsolutePositionStepsDataReaderView (const AxialActuatorAbsolutePositionStepsDataReaderView &);
      AxialActuatorAbsolutePositionStepsDataReaderView & operator = (const AxialActuatorAbsolutePositionStepsDataReaderView &);
   };

   struct AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < AxialActuatorPositionAbsoluteEncoderPositionMeasured, struct AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq_uniq_> AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq;
   typedef DDS_DCPSSequence_var < AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq> AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq_var;
   typedef DDS_DCPSSequence_out < AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq> AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq_out;
   class AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_ptr _ptr_type;
      typedef AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_var _var_type;

      static AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_ptr _duplicate (AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_ptr _this () { return this; }


   protected:
      AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface () {};
      ~AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface () {};
   private:
      AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface (const AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface &);
      AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface & operator = (const AxialActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface &);
   };

   class AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_ptr _ptr_type;
      typedef AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_var _var_type;

      static AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_ptr _duplicate (AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const AxialActuatorPositionAbsoluteEncoderPositionMeasured& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const AxialActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const AxialActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const AxialActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const AxialActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const AxialActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const AxialActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const AxialActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const AxialActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const AxialActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (AxialActuatorPositionAbsoluteEncoderPositionMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const AxialActuatorPositionAbsoluteEncoderPositionMeasured& instance_data) = 0;

   protected:
      AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter () {};
      ~AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter () {};
   private:
      AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter (const AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter &);
      AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter & operator = (const AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter &);
   };

   class AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_ptr _ptr_type;
      typedef AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_var _var_type;

      static AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_ptr _duplicate (AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_ptr _narrow (DDS::Object_ptr obj);
      static AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_ptr _this () { return this; }

      virtual DDS::Long read (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (AxialActuatorPositionAbsoluteEncoderPositionMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (AxialActuatorPositionAbsoluteEncoderPositionMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (AxialActuatorPositionAbsoluteEncoderPositionMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const AxialActuatorPositionAbsoluteEncoderPositionMeasured& instance) = 0;

   protected:
      AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader () {};
      ~AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader () {};
   private:
      AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader (const AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader &);
      AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader & operator = (const AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReader &);
   };

   class AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_ptr _ptr_type;
      typedef AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_var _var_type;

      static AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_ptr _duplicate (AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (AxialActuatorPositionAbsoluteEncoderPositionMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (AxialActuatorPositionAbsoluteEncoderPositionMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (AxialActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (AxialActuatorPositionAbsoluteEncoderPositionMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const AxialActuatorPositionAbsoluteEncoderPositionMeasured& instance) = 0;

   protected:
      AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView () {};
      ~AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView () {};
   private:
      AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView (const AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView &);
      AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView & operator = (const AxialActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView &);
   };

   struct AxialForcesMeasuredSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < AxialForcesMeasured, struct AxialForcesMeasuredSeq_uniq_> AxialForcesMeasuredSeq;
   typedef DDS_DCPSSequence_var < AxialForcesMeasuredSeq> AxialForcesMeasuredSeq_var;
   typedef DDS_DCPSSequence_out < AxialForcesMeasuredSeq> AxialForcesMeasuredSeq_out;
   class AxialForcesMeasuredTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef AxialForcesMeasuredTypeSupportInterface_ptr _ptr_type;
      typedef AxialForcesMeasuredTypeSupportInterface_var _var_type;

      static AxialForcesMeasuredTypeSupportInterface_ptr _duplicate (AxialForcesMeasuredTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AxialForcesMeasuredTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static AxialForcesMeasuredTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AxialForcesMeasuredTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      AxialForcesMeasuredTypeSupportInterface_ptr _this () { return this; }


   protected:
      AxialForcesMeasuredTypeSupportInterface () {};
      ~AxialForcesMeasuredTypeSupportInterface () {};
   private:
      AxialForcesMeasuredTypeSupportInterface (const AxialForcesMeasuredTypeSupportInterface &);
      AxialForcesMeasuredTypeSupportInterface & operator = (const AxialForcesMeasuredTypeSupportInterface &);
   };

   class AxialForcesMeasuredDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef AxialForcesMeasuredDataWriter_ptr _ptr_type;
      typedef AxialForcesMeasuredDataWriter_var _var_type;

      static AxialForcesMeasuredDataWriter_ptr _duplicate (AxialForcesMeasuredDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AxialForcesMeasuredDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static AxialForcesMeasuredDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AxialForcesMeasuredDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      AxialForcesMeasuredDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const AxialForcesMeasured& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const AxialForcesMeasured& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const AxialForcesMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const AxialForcesMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const AxialForcesMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const AxialForcesMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const AxialForcesMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const AxialForcesMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const AxialForcesMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const AxialForcesMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (AxialForcesMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const AxialForcesMeasured& instance_data) = 0;

   protected:
      AxialForcesMeasuredDataWriter () {};
      ~AxialForcesMeasuredDataWriter () {};
   private:
      AxialForcesMeasuredDataWriter (const AxialForcesMeasuredDataWriter &);
      AxialForcesMeasuredDataWriter & operator = (const AxialForcesMeasuredDataWriter &);
   };

   class AxialForcesMeasuredDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef AxialForcesMeasuredDataReader_ptr _ptr_type;
      typedef AxialForcesMeasuredDataReader_var _var_type;

      static AxialForcesMeasuredDataReader_ptr _duplicate (AxialForcesMeasuredDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AxialForcesMeasuredDataReader_ptr _narrow (DDS::Object_ptr obj);
      static AxialForcesMeasuredDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AxialForcesMeasuredDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      AxialForcesMeasuredDataReader_ptr _this () { return this; }

      virtual DDS::Long read (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (AxialForcesMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (AxialForcesMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (AxialForcesMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const AxialForcesMeasured& instance) = 0;

   protected:
      AxialForcesMeasuredDataReader () {};
      ~AxialForcesMeasuredDataReader () {};
   private:
      AxialForcesMeasuredDataReader (const AxialForcesMeasuredDataReader &);
      AxialForcesMeasuredDataReader & operator = (const AxialForcesMeasuredDataReader &);
   };

   class AxialForcesMeasuredDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef AxialForcesMeasuredDataReaderView_ptr _ptr_type;
      typedef AxialForcesMeasuredDataReaderView_var _var_type;

      static AxialForcesMeasuredDataReaderView_ptr _duplicate (AxialForcesMeasuredDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AxialForcesMeasuredDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static AxialForcesMeasuredDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AxialForcesMeasuredDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      AxialForcesMeasuredDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (AxialForcesMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (AxialForcesMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (AxialForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (AxialForcesMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const AxialForcesMeasured& instance) = 0;

   protected:
      AxialForcesMeasuredDataReaderView () {};
      ~AxialForcesMeasuredDataReaderView () {};
   private:
      AxialForcesMeasuredDataReaderView (const AxialForcesMeasuredDataReaderView &);
      AxialForcesMeasuredDataReaderView & operator = (const AxialForcesMeasuredDataReaderView &);
   };

   struct MirrorPositionMeasuredSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < MirrorPositionMeasured, struct MirrorPositionMeasuredSeq_uniq_> MirrorPositionMeasuredSeq;
   typedef DDS_DCPSSequence_var < MirrorPositionMeasuredSeq> MirrorPositionMeasuredSeq_var;
   typedef DDS_DCPSSequence_out < MirrorPositionMeasuredSeq> MirrorPositionMeasuredSeq_out;
   class MirrorPositionMeasuredTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef MirrorPositionMeasuredTypeSupportInterface_ptr _ptr_type;
      typedef MirrorPositionMeasuredTypeSupportInterface_var _var_type;

      static MirrorPositionMeasuredTypeSupportInterface_ptr _duplicate (MirrorPositionMeasuredTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MirrorPositionMeasuredTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static MirrorPositionMeasuredTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MirrorPositionMeasuredTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      MirrorPositionMeasuredTypeSupportInterface_ptr _this () { return this; }


   protected:
      MirrorPositionMeasuredTypeSupportInterface () {};
      ~MirrorPositionMeasuredTypeSupportInterface () {};
   private:
      MirrorPositionMeasuredTypeSupportInterface (const MirrorPositionMeasuredTypeSupportInterface &);
      MirrorPositionMeasuredTypeSupportInterface & operator = (const MirrorPositionMeasuredTypeSupportInterface &);
   };

   class MirrorPositionMeasuredDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef MirrorPositionMeasuredDataWriter_ptr _ptr_type;
      typedef MirrorPositionMeasuredDataWriter_var _var_type;

      static MirrorPositionMeasuredDataWriter_ptr _duplicate (MirrorPositionMeasuredDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MirrorPositionMeasuredDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static MirrorPositionMeasuredDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MirrorPositionMeasuredDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      MirrorPositionMeasuredDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const MirrorPositionMeasured& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const MirrorPositionMeasured& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const MirrorPositionMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const MirrorPositionMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const MirrorPositionMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const MirrorPositionMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const MirrorPositionMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const MirrorPositionMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const MirrorPositionMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const MirrorPositionMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (MirrorPositionMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const MirrorPositionMeasured& instance_data) = 0;

   protected:
      MirrorPositionMeasuredDataWriter () {};
      ~MirrorPositionMeasuredDataWriter () {};
   private:
      MirrorPositionMeasuredDataWriter (const MirrorPositionMeasuredDataWriter &);
      MirrorPositionMeasuredDataWriter & operator = (const MirrorPositionMeasuredDataWriter &);
   };

   class MirrorPositionMeasuredDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef MirrorPositionMeasuredDataReader_ptr _ptr_type;
      typedef MirrorPositionMeasuredDataReader_var _var_type;

      static MirrorPositionMeasuredDataReader_ptr _duplicate (MirrorPositionMeasuredDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MirrorPositionMeasuredDataReader_ptr _narrow (DDS::Object_ptr obj);
      static MirrorPositionMeasuredDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MirrorPositionMeasuredDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      MirrorPositionMeasuredDataReader_ptr _this () { return this; }

      virtual DDS::Long read (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (MirrorPositionMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (MirrorPositionMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (MirrorPositionMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const MirrorPositionMeasured& instance) = 0;

   protected:
      MirrorPositionMeasuredDataReader () {};
      ~MirrorPositionMeasuredDataReader () {};
   private:
      MirrorPositionMeasuredDataReader (const MirrorPositionMeasuredDataReader &);
      MirrorPositionMeasuredDataReader & operator = (const MirrorPositionMeasuredDataReader &);
   };

   class MirrorPositionMeasuredDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef MirrorPositionMeasuredDataReaderView_ptr _ptr_type;
      typedef MirrorPositionMeasuredDataReaderView_var _var_type;

      static MirrorPositionMeasuredDataReaderView_ptr _duplicate (MirrorPositionMeasuredDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MirrorPositionMeasuredDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static MirrorPositionMeasuredDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MirrorPositionMeasuredDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      MirrorPositionMeasuredDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (MirrorPositionMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (MirrorPositionMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (MirrorPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (MirrorPositionMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const MirrorPositionMeasured& instance) = 0;

   protected:
      MirrorPositionMeasuredDataReaderView () {};
      ~MirrorPositionMeasuredDataReaderView () {};
   private:
      MirrorPositionMeasuredDataReaderView (const MirrorPositionMeasuredDataReaderView &);
      MirrorPositionMeasuredDataReaderView & operator = (const MirrorPositionMeasuredDataReaderView &);
   };

   struct PowerStatusSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < PowerStatus, struct PowerStatusSeq_uniq_> PowerStatusSeq;
   typedef DDS_DCPSSequence_var < PowerStatusSeq> PowerStatusSeq_var;
   typedef DDS_DCPSSequence_out < PowerStatusSeq> PowerStatusSeq_out;
   class PowerStatusTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef PowerStatusTypeSupportInterface_ptr _ptr_type;
      typedef PowerStatusTypeSupportInterface_var _var_type;

      static PowerStatusTypeSupportInterface_ptr _duplicate (PowerStatusTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static PowerStatusTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static PowerStatusTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static PowerStatusTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      PowerStatusTypeSupportInterface_ptr _this () { return this; }


   protected:
      PowerStatusTypeSupportInterface () {};
      ~PowerStatusTypeSupportInterface () {};
   private:
      PowerStatusTypeSupportInterface (const PowerStatusTypeSupportInterface &);
      PowerStatusTypeSupportInterface & operator = (const PowerStatusTypeSupportInterface &);
   };

   class PowerStatusDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef PowerStatusDataWriter_ptr _ptr_type;
      typedef PowerStatusDataWriter_var _var_type;

      static PowerStatusDataWriter_ptr _duplicate (PowerStatusDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static PowerStatusDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static PowerStatusDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static PowerStatusDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      PowerStatusDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const PowerStatus& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const PowerStatus& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const PowerStatus& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const PowerStatus& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const PowerStatus& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const PowerStatus& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const PowerStatus& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const PowerStatus& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const PowerStatus& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const PowerStatus& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (PowerStatus& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const PowerStatus& instance_data) = 0;

   protected:
      PowerStatusDataWriter () {};
      ~PowerStatusDataWriter () {};
   private:
      PowerStatusDataWriter (const PowerStatusDataWriter &);
      PowerStatusDataWriter & operator = (const PowerStatusDataWriter &);
   };

   class PowerStatusDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef PowerStatusDataReader_ptr _ptr_type;
      typedef PowerStatusDataReader_var _var_type;

      static PowerStatusDataReader_ptr _duplicate (PowerStatusDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static PowerStatusDataReader_ptr _narrow (DDS::Object_ptr obj);
      static PowerStatusDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static PowerStatusDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      PowerStatusDataReader_ptr _this () { return this; }

      virtual DDS::Long read (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (PowerStatus& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (PowerStatus& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (PowerStatus& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const PowerStatus& instance) = 0;

   protected:
      PowerStatusDataReader () {};
      ~PowerStatusDataReader () {};
   private:
      PowerStatusDataReader (const PowerStatusDataReader &);
      PowerStatusDataReader & operator = (const PowerStatusDataReader &);
   };

   class PowerStatusDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef PowerStatusDataReaderView_ptr _ptr_type;
      typedef PowerStatusDataReaderView_var _var_type;

      static PowerStatusDataReaderView_ptr _duplicate (PowerStatusDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static PowerStatusDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static PowerStatusDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static PowerStatusDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      PowerStatusDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (PowerStatus& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (PowerStatus& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (PowerStatusSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (PowerStatus& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const PowerStatus& instance) = 0;

   protected:
      PowerStatusDataReaderView () {};
      ~PowerStatusDataReaderView () {};
   private:
      PowerStatusDataReaderView (const PowerStatusDataReaderView &);
      PowerStatusDataReaderView & operator = (const PowerStatusDataReaderView &);
   };

   struct RawDisplacementSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < RawDisplacement, struct RawDisplacementSeq_uniq_> RawDisplacementSeq;
   typedef DDS_DCPSSequence_var < RawDisplacementSeq> RawDisplacementSeq_var;
   typedef DDS_DCPSSequence_out < RawDisplacementSeq> RawDisplacementSeq_out;
   class RawDisplacementTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef RawDisplacementTypeSupportInterface_ptr _ptr_type;
      typedef RawDisplacementTypeSupportInterface_var _var_type;

      static RawDisplacementTypeSupportInterface_ptr _duplicate (RawDisplacementTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static RawDisplacementTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static RawDisplacementTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static RawDisplacementTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      RawDisplacementTypeSupportInterface_ptr _this () { return this; }


   protected:
      RawDisplacementTypeSupportInterface () {};
      ~RawDisplacementTypeSupportInterface () {};
   private:
      RawDisplacementTypeSupportInterface (const RawDisplacementTypeSupportInterface &);
      RawDisplacementTypeSupportInterface & operator = (const RawDisplacementTypeSupportInterface &);
   };

   class RawDisplacementDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef RawDisplacementDataWriter_ptr _ptr_type;
      typedef RawDisplacementDataWriter_var _var_type;

      static RawDisplacementDataWriter_ptr _duplicate (RawDisplacementDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static RawDisplacementDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static RawDisplacementDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static RawDisplacementDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      RawDisplacementDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const RawDisplacement& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const RawDisplacement& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const RawDisplacement& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const RawDisplacement& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const RawDisplacement& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const RawDisplacement& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const RawDisplacement& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const RawDisplacement& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const RawDisplacement& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const RawDisplacement& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (RawDisplacement& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const RawDisplacement& instance_data) = 0;

   protected:
      RawDisplacementDataWriter () {};
      ~RawDisplacementDataWriter () {};
   private:
      RawDisplacementDataWriter (const RawDisplacementDataWriter &);
      RawDisplacementDataWriter & operator = (const RawDisplacementDataWriter &);
   };

   class RawDisplacementDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef RawDisplacementDataReader_ptr _ptr_type;
      typedef RawDisplacementDataReader_var _var_type;

      static RawDisplacementDataReader_ptr _duplicate (RawDisplacementDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static RawDisplacementDataReader_ptr _narrow (DDS::Object_ptr obj);
      static RawDisplacementDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static RawDisplacementDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      RawDisplacementDataReader_ptr _this () { return this; }

      virtual DDS::Long read (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (RawDisplacement& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (RawDisplacement& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (RawDisplacement& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const RawDisplacement& instance) = 0;

   protected:
      RawDisplacementDataReader () {};
      ~RawDisplacementDataReader () {};
   private:
      RawDisplacementDataReader (const RawDisplacementDataReader &);
      RawDisplacementDataReader & operator = (const RawDisplacementDataReader &);
   };

   class RawDisplacementDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef RawDisplacementDataReaderView_ptr _ptr_type;
      typedef RawDisplacementDataReaderView_var _var_type;

      static RawDisplacementDataReaderView_ptr _duplicate (RawDisplacementDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static RawDisplacementDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static RawDisplacementDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static RawDisplacementDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      RawDisplacementDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (RawDisplacement& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (RawDisplacement& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (RawDisplacementSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (RawDisplacement& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const RawDisplacement& instance) = 0;

   protected:
      RawDisplacementDataReaderView () {};
      ~RawDisplacementDataReaderView () {};
   private:
      RawDisplacementDataReaderView (const RawDisplacementDataReaderView &);
      RawDisplacementDataReaderView & operator = (const RawDisplacementDataReaderView &);
   };

   struct RawTelemetrySeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < RawTelemetry, struct RawTelemetrySeq_uniq_> RawTelemetrySeq;
   typedef DDS_DCPSSequence_var < RawTelemetrySeq> RawTelemetrySeq_var;
   typedef DDS_DCPSSequence_out < RawTelemetrySeq> RawTelemetrySeq_out;
   class RawTelemetryTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef RawTelemetryTypeSupportInterface_ptr _ptr_type;
      typedef RawTelemetryTypeSupportInterface_var _var_type;

      static RawTelemetryTypeSupportInterface_ptr _duplicate (RawTelemetryTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static RawTelemetryTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static RawTelemetryTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static RawTelemetryTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      RawTelemetryTypeSupportInterface_ptr _this () { return this; }


   protected:
      RawTelemetryTypeSupportInterface () {};
      ~RawTelemetryTypeSupportInterface () {};
   private:
      RawTelemetryTypeSupportInterface (const RawTelemetryTypeSupportInterface &);
      RawTelemetryTypeSupportInterface & operator = (const RawTelemetryTypeSupportInterface &);
   };

   class RawTelemetryDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef RawTelemetryDataWriter_ptr _ptr_type;
      typedef RawTelemetryDataWriter_var _var_type;

      static RawTelemetryDataWriter_ptr _duplicate (RawTelemetryDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static RawTelemetryDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static RawTelemetryDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static RawTelemetryDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      RawTelemetryDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const RawTelemetry& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const RawTelemetry& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const RawTelemetry& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const RawTelemetry& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const RawTelemetry& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const RawTelemetry& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const RawTelemetry& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const RawTelemetry& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const RawTelemetry& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const RawTelemetry& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (RawTelemetry& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const RawTelemetry& instance_data) = 0;

   protected:
      RawTelemetryDataWriter () {};
      ~RawTelemetryDataWriter () {};
   private:
      RawTelemetryDataWriter (const RawTelemetryDataWriter &);
      RawTelemetryDataWriter & operator = (const RawTelemetryDataWriter &);
   };

   class RawTelemetryDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef RawTelemetryDataReader_ptr _ptr_type;
      typedef RawTelemetryDataReader_var _var_type;

      static RawTelemetryDataReader_ptr _duplicate (RawTelemetryDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static RawTelemetryDataReader_ptr _narrow (DDS::Object_ptr obj);
      static RawTelemetryDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static RawTelemetryDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      RawTelemetryDataReader_ptr _this () { return this; }

      virtual DDS::Long read (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (RawTelemetry& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (RawTelemetry& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (RawTelemetry& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const RawTelemetry& instance) = 0;

   protected:
      RawTelemetryDataReader () {};
      ~RawTelemetryDataReader () {};
   private:
      RawTelemetryDataReader (const RawTelemetryDataReader &);
      RawTelemetryDataReader & operator = (const RawTelemetryDataReader &);
   };

   class RawTelemetryDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef RawTelemetryDataReaderView_ptr _ptr_type;
      typedef RawTelemetryDataReaderView_var _var_type;

      static RawTelemetryDataReaderView_ptr _duplicate (RawTelemetryDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static RawTelemetryDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static RawTelemetryDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static RawTelemetryDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      RawTelemetryDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (RawTelemetry& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (RawTelemetry& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (RawTelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (RawTelemetry& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const RawTelemetry& instance) = 0;

   protected:
      RawTelemetryDataReaderView () {};
      ~RawTelemetryDataReaderView () {};
   private:
      RawTelemetryDataReaderView (const RawTelemetryDataReaderView &);
      RawTelemetryDataReaderView & operator = (const RawTelemetryDataReaderView &);
   };

   struct StepVectorUpdateSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < StepVectorUpdate, struct StepVectorUpdateSeq_uniq_> StepVectorUpdateSeq;
   typedef DDS_DCPSSequence_var < StepVectorUpdateSeq> StepVectorUpdateSeq_var;
   typedef DDS_DCPSSequence_out < StepVectorUpdateSeq> StepVectorUpdateSeq_out;
   class StepVectorUpdateTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef StepVectorUpdateTypeSupportInterface_ptr _ptr_type;
      typedef StepVectorUpdateTypeSupportInterface_var _var_type;

      static StepVectorUpdateTypeSupportInterface_ptr _duplicate (StepVectorUpdateTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static StepVectorUpdateTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static StepVectorUpdateTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static StepVectorUpdateTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      StepVectorUpdateTypeSupportInterface_ptr _this () { return this; }


   protected:
      StepVectorUpdateTypeSupportInterface () {};
      ~StepVectorUpdateTypeSupportInterface () {};
   private:
      StepVectorUpdateTypeSupportInterface (const StepVectorUpdateTypeSupportInterface &);
      StepVectorUpdateTypeSupportInterface & operator = (const StepVectorUpdateTypeSupportInterface &);
   };

   class StepVectorUpdateDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef StepVectorUpdateDataWriter_ptr _ptr_type;
      typedef StepVectorUpdateDataWriter_var _var_type;

      static StepVectorUpdateDataWriter_ptr _duplicate (StepVectorUpdateDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static StepVectorUpdateDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static StepVectorUpdateDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static StepVectorUpdateDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      StepVectorUpdateDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const StepVectorUpdate& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const StepVectorUpdate& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const StepVectorUpdate& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const StepVectorUpdate& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const StepVectorUpdate& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const StepVectorUpdate& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const StepVectorUpdate& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const StepVectorUpdate& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const StepVectorUpdate& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const StepVectorUpdate& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (StepVectorUpdate& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const StepVectorUpdate& instance_data) = 0;

   protected:
      StepVectorUpdateDataWriter () {};
      ~StepVectorUpdateDataWriter () {};
   private:
      StepVectorUpdateDataWriter (const StepVectorUpdateDataWriter &);
      StepVectorUpdateDataWriter & operator = (const StepVectorUpdateDataWriter &);
   };

   class StepVectorUpdateDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef StepVectorUpdateDataReader_ptr _ptr_type;
      typedef StepVectorUpdateDataReader_var _var_type;

      static StepVectorUpdateDataReader_ptr _duplicate (StepVectorUpdateDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static StepVectorUpdateDataReader_ptr _narrow (DDS::Object_ptr obj);
      static StepVectorUpdateDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static StepVectorUpdateDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      StepVectorUpdateDataReader_ptr _this () { return this; }

      virtual DDS::Long read (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (StepVectorUpdate& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (StepVectorUpdate& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (StepVectorUpdate& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const StepVectorUpdate& instance) = 0;

   protected:
      StepVectorUpdateDataReader () {};
      ~StepVectorUpdateDataReader () {};
   private:
      StepVectorUpdateDataReader (const StepVectorUpdateDataReader &);
      StepVectorUpdateDataReader & operator = (const StepVectorUpdateDataReader &);
   };

   class StepVectorUpdateDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef StepVectorUpdateDataReaderView_ptr _ptr_type;
      typedef StepVectorUpdateDataReaderView_var _var_type;

      static StepVectorUpdateDataReaderView_ptr _duplicate (StepVectorUpdateDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static StepVectorUpdateDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static StepVectorUpdateDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static StepVectorUpdateDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      StepVectorUpdateDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (StepVectorUpdate& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (StepVectorUpdate& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (StepVectorUpdateSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (StepVectorUpdate& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const StepVectorUpdate& instance) = 0;

   protected:
      StepVectorUpdateDataReaderView () {};
      ~StepVectorUpdateDataReaderView () {};
   private:
      StepVectorUpdateDataReaderView (const StepVectorUpdateDataReaderView &);
      StepVectorUpdateDataReaderView & operator = (const StepVectorUpdateDataReaderView &);
   };

   struct SystemStatusSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < SystemStatus, struct SystemStatusSeq_uniq_> SystemStatusSeq;
   typedef DDS_DCPSSequence_var < SystemStatusSeq> SystemStatusSeq_var;
   typedef DDS_DCPSSequence_out < SystemStatusSeq> SystemStatusSeq_out;
   class SystemStatusTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef SystemStatusTypeSupportInterface_ptr _ptr_type;
      typedef SystemStatusTypeSupportInterface_var _var_type;

      static SystemStatusTypeSupportInterface_ptr _duplicate (SystemStatusTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static SystemStatusTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static SystemStatusTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static SystemStatusTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      SystemStatusTypeSupportInterface_ptr _this () { return this; }


   protected:
      SystemStatusTypeSupportInterface () {};
      ~SystemStatusTypeSupportInterface () {};
   private:
      SystemStatusTypeSupportInterface (const SystemStatusTypeSupportInterface &);
      SystemStatusTypeSupportInterface & operator = (const SystemStatusTypeSupportInterface &);
   };

   class SystemStatusDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef SystemStatusDataWriter_ptr _ptr_type;
      typedef SystemStatusDataWriter_var _var_type;

      static SystemStatusDataWriter_ptr _duplicate (SystemStatusDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static SystemStatusDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static SystemStatusDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static SystemStatusDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      SystemStatusDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const SystemStatus& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const SystemStatus& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const SystemStatus& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const SystemStatus& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const SystemStatus& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const SystemStatus& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const SystemStatus& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const SystemStatus& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const SystemStatus& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const SystemStatus& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (SystemStatus& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const SystemStatus& instance_data) = 0;

   protected:
      SystemStatusDataWriter () {};
      ~SystemStatusDataWriter () {};
   private:
      SystemStatusDataWriter (const SystemStatusDataWriter &);
      SystemStatusDataWriter & operator = (const SystemStatusDataWriter &);
   };

   class SystemStatusDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef SystemStatusDataReader_ptr _ptr_type;
      typedef SystemStatusDataReader_var _var_type;

      static SystemStatusDataReader_ptr _duplicate (SystemStatusDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static SystemStatusDataReader_ptr _narrow (DDS::Object_ptr obj);
      static SystemStatusDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static SystemStatusDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      SystemStatusDataReader_ptr _this () { return this; }

      virtual DDS::Long read (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (SystemStatus& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (SystemStatus& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (SystemStatus& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const SystemStatus& instance) = 0;

   protected:
      SystemStatusDataReader () {};
      ~SystemStatusDataReader () {};
   private:
      SystemStatusDataReader (const SystemStatusDataReader &);
      SystemStatusDataReader & operator = (const SystemStatusDataReader &);
   };

   class SystemStatusDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef SystemStatusDataReaderView_ptr _ptr_type;
      typedef SystemStatusDataReaderView_var _var_type;

      static SystemStatusDataReaderView_ptr _duplicate (SystemStatusDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static SystemStatusDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static SystemStatusDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static SystemStatusDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      SystemStatusDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (SystemStatus& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (SystemStatus& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (SystemStatusSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (SystemStatus& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const SystemStatus& instance) = 0;

   protected:
      SystemStatusDataReaderView () {};
      ~SystemStatusDataReaderView () {};
   private:
      SystemStatusDataReaderView (const SystemStatusDataReaderView &);
      SystemStatusDataReaderView & operator = (const SystemStatusDataReaderView &);
   };

   struct TangentActuatorAbsolutePositionStepsSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < TangentActuatorAbsolutePositionSteps, struct TangentActuatorAbsolutePositionStepsSeq_uniq_> TangentActuatorAbsolutePositionStepsSeq;
   typedef DDS_DCPSSequence_var < TangentActuatorAbsolutePositionStepsSeq> TangentActuatorAbsolutePositionStepsSeq_var;
   typedef DDS_DCPSSequence_out < TangentActuatorAbsolutePositionStepsSeq> TangentActuatorAbsolutePositionStepsSeq_out;
   class TangentActuatorAbsolutePositionStepsTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef TangentActuatorAbsolutePositionStepsTypeSupportInterface_ptr _ptr_type;
      typedef TangentActuatorAbsolutePositionStepsTypeSupportInterface_var _var_type;

      static TangentActuatorAbsolutePositionStepsTypeSupportInterface_ptr _duplicate (TangentActuatorAbsolutePositionStepsTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TangentActuatorAbsolutePositionStepsTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static TangentActuatorAbsolutePositionStepsTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TangentActuatorAbsolutePositionStepsTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      TangentActuatorAbsolutePositionStepsTypeSupportInterface_ptr _this () { return this; }


   protected:
      TangentActuatorAbsolutePositionStepsTypeSupportInterface () {};
      ~TangentActuatorAbsolutePositionStepsTypeSupportInterface () {};
   private:
      TangentActuatorAbsolutePositionStepsTypeSupportInterface (const TangentActuatorAbsolutePositionStepsTypeSupportInterface &);
      TangentActuatorAbsolutePositionStepsTypeSupportInterface & operator = (const TangentActuatorAbsolutePositionStepsTypeSupportInterface &);
   };

   class TangentActuatorAbsolutePositionStepsDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef TangentActuatorAbsolutePositionStepsDataWriter_ptr _ptr_type;
      typedef TangentActuatorAbsolutePositionStepsDataWriter_var _var_type;

      static TangentActuatorAbsolutePositionStepsDataWriter_ptr _duplicate (TangentActuatorAbsolutePositionStepsDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TangentActuatorAbsolutePositionStepsDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static TangentActuatorAbsolutePositionStepsDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TangentActuatorAbsolutePositionStepsDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      TangentActuatorAbsolutePositionStepsDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const TangentActuatorAbsolutePositionSteps& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const TangentActuatorAbsolutePositionSteps& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const TangentActuatorAbsolutePositionSteps& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const TangentActuatorAbsolutePositionSteps& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const TangentActuatorAbsolutePositionSteps& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const TangentActuatorAbsolutePositionSteps& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const TangentActuatorAbsolutePositionSteps& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const TangentActuatorAbsolutePositionSteps& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const TangentActuatorAbsolutePositionSteps& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const TangentActuatorAbsolutePositionSteps& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (TangentActuatorAbsolutePositionSteps& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TangentActuatorAbsolutePositionSteps& instance_data) = 0;

   protected:
      TangentActuatorAbsolutePositionStepsDataWriter () {};
      ~TangentActuatorAbsolutePositionStepsDataWriter () {};
   private:
      TangentActuatorAbsolutePositionStepsDataWriter (const TangentActuatorAbsolutePositionStepsDataWriter &);
      TangentActuatorAbsolutePositionStepsDataWriter & operator = (const TangentActuatorAbsolutePositionStepsDataWriter &);
   };

   class TangentActuatorAbsolutePositionStepsDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef TangentActuatorAbsolutePositionStepsDataReader_ptr _ptr_type;
      typedef TangentActuatorAbsolutePositionStepsDataReader_var _var_type;

      static TangentActuatorAbsolutePositionStepsDataReader_ptr _duplicate (TangentActuatorAbsolutePositionStepsDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TangentActuatorAbsolutePositionStepsDataReader_ptr _narrow (DDS::Object_ptr obj);
      static TangentActuatorAbsolutePositionStepsDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TangentActuatorAbsolutePositionStepsDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      TangentActuatorAbsolutePositionStepsDataReader_ptr _this () { return this; }

      virtual DDS::Long read (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TangentActuatorAbsolutePositionSteps& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TangentActuatorAbsolutePositionSteps& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TangentActuatorAbsolutePositionSteps& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TangentActuatorAbsolutePositionSteps& instance) = 0;

   protected:
      TangentActuatorAbsolutePositionStepsDataReader () {};
      ~TangentActuatorAbsolutePositionStepsDataReader () {};
   private:
      TangentActuatorAbsolutePositionStepsDataReader (const TangentActuatorAbsolutePositionStepsDataReader &);
      TangentActuatorAbsolutePositionStepsDataReader & operator = (const TangentActuatorAbsolutePositionStepsDataReader &);
   };

   class TangentActuatorAbsolutePositionStepsDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef TangentActuatorAbsolutePositionStepsDataReaderView_ptr _ptr_type;
      typedef TangentActuatorAbsolutePositionStepsDataReaderView_var _var_type;

      static TangentActuatorAbsolutePositionStepsDataReaderView_ptr _duplicate (TangentActuatorAbsolutePositionStepsDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TangentActuatorAbsolutePositionStepsDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static TangentActuatorAbsolutePositionStepsDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TangentActuatorAbsolutePositionStepsDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      TangentActuatorAbsolutePositionStepsDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TangentActuatorAbsolutePositionSteps& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TangentActuatorAbsolutePositionSteps& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TangentActuatorAbsolutePositionStepsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TangentActuatorAbsolutePositionSteps& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TangentActuatorAbsolutePositionSteps& instance) = 0;

   protected:
      TangentActuatorAbsolutePositionStepsDataReaderView () {};
      ~TangentActuatorAbsolutePositionStepsDataReaderView () {};
   private:
      TangentActuatorAbsolutePositionStepsDataReaderView (const TangentActuatorAbsolutePositionStepsDataReaderView &);
      TangentActuatorAbsolutePositionStepsDataReaderView & operator = (const TangentActuatorAbsolutePositionStepsDataReaderView &);
   };

   struct TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < TangentActuatorPositionAbsoluteEncoderPositionMeasured, struct TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq_uniq_> TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq;
   typedef DDS_DCPSSequence_var < TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq> TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq_var;
   typedef DDS_DCPSSequence_out < TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq> TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq_out;
   class TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_ptr _ptr_type;
      typedef TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_var _var_type;

      static TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_ptr _duplicate (TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface_ptr _this () { return this; }


   protected:
      TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface () {};
      ~TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface () {};
   private:
      TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface (const TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface &);
      TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface & operator = (const TangentActuatorPositionAbsoluteEncoderPositionMeasuredTypeSupportInterface &);
   };

   class TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_ptr _ptr_type;
      typedef TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_var _var_type;

      static TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_ptr _duplicate (TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const TangentActuatorPositionAbsoluteEncoderPositionMeasured& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const TangentActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const TangentActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const TangentActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const TangentActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const TangentActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const TangentActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const TangentActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const TangentActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const TangentActuatorPositionAbsoluteEncoderPositionMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (TangentActuatorPositionAbsoluteEncoderPositionMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TangentActuatorPositionAbsoluteEncoderPositionMeasured& instance_data) = 0;

   protected:
      TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter () {};
      ~TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter () {};
   private:
      TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter (const TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter &);
      TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter & operator = (const TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataWriter &);
   };

   class TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_ptr _ptr_type;
      typedef TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_var _var_type;

      static TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_ptr _duplicate (TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_ptr _narrow (DDS::Object_ptr obj);
      static TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader_ptr _this () { return this; }

      virtual DDS::Long read (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TangentActuatorPositionAbsoluteEncoderPositionMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TangentActuatorPositionAbsoluteEncoderPositionMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TangentActuatorPositionAbsoluteEncoderPositionMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TangentActuatorPositionAbsoluteEncoderPositionMeasured& instance) = 0;

   protected:
      TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader () {};
      ~TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader () {};
   private:
      TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader (const TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader &);
      TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader & operator = (const TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReader &);
   };

   class TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_ptr _ptr_type;
      typedef TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_var _var_type;

      static TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_ptr _duplicate (TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TangentActuatorPositionAbsoluteEncoderPositionMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TangentActuatorPositionAbsoluteEncoderPositionMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TangentActuatorPositionAbsoluteEncoderPositionMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TangentActuatorPositionAbsoluteEncoderPositionMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TangentActuatorPositionAbsoluteEncoderPositionMeasured& instance) = 0;

   protected:
      TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView () {};
      ~TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView () {};
   private:
      TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView (const TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView &);
      TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView & operator = (const TangentActuatorPositionAbsoluteEncoderPositionMeasuredDataReaderView &);
   };

   struct TangentForcesMeasuredSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < TangentForcesMeasured, struct TangentForcesMeasuredSeq_uniq_> TangentForcesMeasuredSeq;
   typedef DDS_DCPSSequence_var < TangentForcesMeasuredSeq> TangentForcesMeasuredSeq_var;
   typedef DDS_DCPSSequence_out < TangentForcesMeasuredSeq> TangentForcesMeasuredSeq_out;
   class TangentForcesMeasuredTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef TangentForcesMeasuredTypeSupportInterface_ptr _ptr_type;
      typedef TangentForcesMeasuredTypeSupportInterface_var _var_type;

      static TangentForcesMeasuredTypeSupportInterface_ptr _duplicate (TangentForcesMeasuredTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TangentForcesMeasuredTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static TangentForcesMeasuredTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TangentForcesMeasuredTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      TangentForcesMeasuredTypeSupportInterface_ptr _this () { return this; }


   protected:
      TangentForcesMeasuredTypeSupportInterface () {};
      ~TangentForcesMeasuredTypeSupportInterface () {};
   private:
      TangentForcesMeasuredTypeSupportInterface (const TangentForcesMeasuredTypeSupportInterface &);
      TangentForcesMeasuredTypeSupportInterface & operator = (const TangentForcesMeasuredTypeSupportInterface &);
   };

   class TangentForcesMeasuredDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef TangentForcesMeasuredDataWriter_ptr _ptr_type;
      typedef TangentForcesMeasuredDataWriter_var _var_type;

      static TangentForcesMeasuredDataWriter_ptr _duplicate (TangentForcesMeasuredDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TangentForcesMeasuredDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static TangentForcesMeasuredDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TangentForcesMeasuredDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      TangentForcesMeasuredDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const TangentForcesMeasured& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const TangentForcesMeasured& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const TangentForcesMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const TangentForcesMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const TangentForcesMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const TangentForcesMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const TangentForcesMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const TangentForcesMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const TangentForcesMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const TangentForcesMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (TangentForcesMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TangentForcesMeasured& instance_data) = 0;

   protected:
      TangentForcesMeasuredDataWriter () {};
      ~TangentForcesMeasuredDataWriter () {};
   private:
      TangentForcesMeasuredDataWriter (const TangentForcesMeasuredDataWriter &);
      TangentForcesMeasuredDataWriter & operator = (const TangentForcesMeasuredDataWriter &);
   };

   class TangentForcesMeasuredDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef TangentForcesMeasuredDataReader_ptr _ptr_type;
      typedef TangentForcesMeasuredDataReader_var _var_type;

      static TangentForcesMeasuredDataReader_ptr _duplicate (TangentForcesMeasuredDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TangentForcesMeasuredDataReader_ptr _narrow (DDS::Object_ptr obj);
      static TangentForcesMeasuredDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TangentForcesMeasuredDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      TangentForcesMeasuredDataReader_ptr _this () { return this; }

      virtual DDS::Long read (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TangentForcesMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TangentForcesMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TangentForcesMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TangentForcesMeasured& instance) = 0;

   protected:
      TangentForcesMeasuredDataReader () {};
      ~TangentForcesMeasuredDataReader () {};
   private:
      TangentForcesMeasuredDataReader (const TangentForcesMeasuredDataReader &);
      TangentForcesMeasuredDataReader & operator = (const TangentForcesMeasuredDataReader &);
   };

   class TangentForcesMeasuredDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef TangentForcesMeasuredDataReaderView_ptr _ptr_type;
      typedef TangentForcesMeasuredDataReaderView_var _var_type;

      static TangentForcesMeasuredDataReaderView_ptr _duplicate (TangentForcesMeasuredDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TangentForcesMeasuredDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static TangentForcesMeasuredDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TangentForcesMeasuredDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      TangentForcesMeasuredDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TangentForcesMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TangentForcesMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TangentForcesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TangentForcesMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TangentForcesMeasured& instance) = 0;

   protected:
      TangentForcesMeasuredDataReaderView () {};
      ~TangentForcesMeasuredDataReaderView () {};
   private:
      TangentForcesMeasuredDataReaderView (const TangentForcesMeasuredDataReaderView &);
      TangentForcesMeasuredDataReaderView & operator = (const TangentForcesMeasuredDataReaderView &);
   };

   struct TargetForcesSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < TargetForces, struct TargetForcesSeq_uniq_> TargetForcesSeq;
   typedef DDS_DCPSSequence_var < TargetForcesSeq> TargetForcesSeq_var;
   typedef DDS_DCPSSequence_out < TargetForcesSeq> TargetForcesSeq_out;
   class TargetForcesTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef TargetForcesTypeSupportInterface_ptr _ptr_type;
      typedef TargetForcesTypeSupportInterface_var _var_type;

      static TargetForcesTypeSupportInterface_ptr _duplicate (TargetForcesTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TargetForcesTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static TargetForcesTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TargetForcesTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      TargetForcesTypeSupportInterface_ptr _this () { return this; }


   protected:
      TargetForcesTypeSupportInterface () {};
      ~TargetForcesTypeSupportInterface () {};
   private:
      TargetForcesTypeSupportInterface (const TargetForcesTypeSupportInterface &);
      TargetForcesTypeSupportInterface & operator = (const TargetForcesTypeSupportInterface &);
   };

   class TargetForcesDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef TargetForcesDataWriter_ptr _ptr_type;
      typedef TargetForcesDataWriter_var _var_type;

      static TargetForcesDataWriter_ptr _duplicate (TargetForcesDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TargetForcesDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static TargetForcesDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TargetForcesDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      TargetForcesDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const TargetForces& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const TargetForces& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const TargetForces& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const TargetForces& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const TargetForces& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const TargetForces& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const TargetForces& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const TargetForces& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const TargetForces& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const TargetForces& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (TargetForces& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TargetForces& instance_data) = 0;

   protected:
      TargetForcesDataWriter () {};
      ~TargetForcesDataWriter () {};
   private:
      TargetForcesDataWriter (const TargetForcesDataWriter &);
      TargetForcesDataWriter & operator = (const TargetForcesDataWriter &);
   };

   class TargetForcesDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef TargetForcesDataReader_ptr _ptr_type;
      typedef TargetForcesDataReader_var _var_type;

      static TargetForcesDataReader_ptr _duplicate (TargetForcesDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TargetForcesDataReader_ptr _narrow (DDS::Object_ptr obj);
      static TargetForcesDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TargetForcesDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      TargetForcesDataReader_ptr _this () { return this; }

      virtual DDS::Long read (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TargetForces& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TargetForces& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TargetForces& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TargetForces& instance) = 0;

   protected:
      TargetForcesDataReader () {};
      ~TargetForcesDataReader () {};
   private:
      TargetForcesDataReader (const TargetForcesDataReader &);
      TargetForcesDataReader & operator = (const TargetForcesDataReader &);
   };

   class TargetForcesDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef TargetForcesDataReaderView_ptr _ptr_type;
      typedef TargetForcesDataReaderView_var _var_type;

      static TargetForcesDataReaderView_ptr _duplicate (TargetForcesDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TargetForcesDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static TargetForcesDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TargetForcesDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      TargetForcesDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TargetForces& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TargetForces& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TargetForcesSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TargetForces& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TargetForces& instance) = 0;

   protected:
      TargetForcesDataReaderView () {};
      ~TargetForcesDataReaderView () {};
   private:
      TargetForcesDataReaderView (const TargetForcesDataReaderView &);
      TargetForcesDataReaderView & operator = (const TargetForcesDataReaderView &);
   };

   struct TemperaturesMeasuredSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < TemperaturesMeasured, struct TemperaturesMeasuredSeq_uniq_> TemperaturesMeasuredSeq;
   typedef DDS_DCPSSequence_var < TemperaturesMeasuredSeq> TemperaturesMeasuredSeq_var;
   typedef DDS_DCPSSequence_out < TemperaturesMeasuredSeq> TemperaturesMeasuredSeq_out;
   class TemperaturesMeasuredTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef TemperaturesMeasuredTypeSupportInterface_ptr _ptr_type;
      typedef TemperaturesMeasuredTypeSupportInterface_var _var_type;

      static TemperaturesMeasuredTypeSupportInterface_ptr _duplicate (TemperaturesMeasuredTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TemperaturesMeasuredTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static TemperaturesMeasuredTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TemperaturesMeasuredTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      TemperaturesMeasuredTypeSupportInterface_ptr _this () { return this; }


   protected:
      TemperaturesMeasuredTypeSupportInterface () {};
      ~TemperaturesMeasuredTypeSupportInterface () {};
   private:
      TemperaturesMeasuredTypeSupportInterface (const TemperaturesMeasuredTypeSupportInterface &);
      TemperaturesMeasuredTypeSupportInterface & operator = (const TemperaturesMeasuredTypeSupportInterface &);
   };

   class TemperaturesMeasuredDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef TemperaturesMeasuredDataWriter_ptr _ptr_type;
      typedef TemperaturesMeasuredDataWriter_var _var_type;

      static TemperaturesMeasuredDataWriter_ptr _duplicate (TemperaturesMeasuredDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TemperaturesMeasuredDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static TemperaturesMeasuredDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TemperaturesMeasuredDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      TemperaturesMeasuredDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const TemperaturesMeasured& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const TemperaturesMeasured& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const TemperaturesMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const TemperaturesMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const TemperaturesMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const TemperaturesMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const TemperaturesMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const TemperaturesMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const TemperaturesMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const TemperaturesMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (TemperaturesMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TemperaturesMeasured& instance_data) = 0;

   protected:
      TemperaturesMeasuredDataWriter () {};
      ~TemperaturesMeasuredDataWriter () {};
   private:
      TemperaturesMeasuredDataWriter (const TemperaturesMeasuredDataWriter &);
      TemperaturesMeasuredDataWriter & operator = (const TemperaturesMeasuredDataWriter &);
   };

   class TemperaturesMeasuredDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef TemperaturesMeasuredDataReader_ptr _ptr_type;
      typedef TemperaturesMeasuredDataReader_var _var_type;

      static TemperaturesMeasuredDataReader_ptr _duplicate (TemperaturesMeasuredDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TemperaturesMeasuredDataReader_ptr _narrow (DDS::Object_ptr obj);
      static TemperaturesMeasuredDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TemperaturesMeasuredDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      TemperaturesMeasuredDataReader_ptr _this () { return this; }

      virtual DDS::Long read (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TemperaturesMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TemperaturesMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TemperaturesMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TemperaturesMeasured& instance) = 0;

   protected:
      TemperaturesMeasuredDataReader () {};
      ~TemperaturesMeasuredDataReader () {};
   private:
      TemperaturesMeasuredDataReader (const TemperaturesMeasuredDataReader &);
      TemperaturesMeasuredDataReader & operator = (const TemperaturesMeasuredDataReader &);
   };

   class TemperaturesMeasuredDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef TemperaturesMeasuredDataReaderView_ptr _ptr_type;
      typedef TemperaturesMeasuredDataReaderView_var _var_type;

      static TemperaturesMeasuredDataReaderView_ptr _duplicate (TemperaturesMeasuredDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TemperaturesMeasuredDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static TemperaturesMeasuredDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TemperaturesMeasuredDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      TemperaturesMeasuredDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TemperaturesMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TemperaturesMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TemperaturesMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TemperaturesMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TemperaturesMeasured& instance) = 0;

   protected:
      TemperaturesMeasuredDataReaderView () {};
      ~TemperaturesMeasuredDataReaderView () {};
   private:
      TemperaturesMeasuredDataReaderView (const TemperaturesMeasuredDataReaderView &);
      TemperaturesMeasuredDataReaderView & operator = (const TemperaturesMeasuredDataReaderView &);
   };

   struct ZenithAngleMeasuredSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < ZenithAngleMeasured, struct ZenithAngleMeasuredSeq_uniq_> ZenithAngleMeasuredSeq;
   typedef DDS_DCPSSequence_var < ZenithAngleMeasuredSeq> ZenithAngleMeasuredSeq_var;
   typedef DDS_DCPSSequence_out < ZenithAngleMeasuredSeq> ZenithAngleMeasuredSeq_out;
   class ZenithAngleMeasuredTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ZenithAngleMeasuredTypeSupportInterface_ptr _ptr_type;
      typedef ZenithAngleMeasuredTypeSupportInterface_var _var_type;

      static ZenithAngleMeasuredTypeSupportInterface_ptr _duplicate (ZenithAngleMeasuredTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ZenithAngleMeasuredTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ZenithAngleMeasuredTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ZenithAngleMeasuredTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ZenithAngleMeasuredTypeSupportInterface_ptr _this () { return this; }


   protected:
      ZenithAngleMeasuredTypeSupportInterface () {};
      ~ZenithAngleMeasuredTypeSupportInterface () {};
   private:
      ZenithAngleMeasuredTypeSupportInterface (const ZenithAngleMeasuredTypeSupportInterface &);
      ZenithAngleMeasuredTypeSupportInterface & operator = (const ZenithAngleMeasuredTypeSupportInterface &);
   };

   class ZenithAngleMeasuredDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ZenithAngleMeasuredDataWriter_ptr _ptr_type;
      typedef ZenithAngleMeasuredDataWriter_var _var_type;

      static ZenithAngleMeasuredDataWriter_ptr _duplicate (ZenithAngleMeasuredDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ZenithAngleMeasuredDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ZenithAngleMeasuredDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ZenithAngleMeasuredDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ZenithAngleMeasuredDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const ZenithAngleMeasured& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const ZenithAngleMeasured& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const ZenithAngleMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const ZenithAngleMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const ZenithAngleMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const ZenithAngleMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const ZenithAngleMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const ZenithAngleMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const ZenithAngleMeasured& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const ZenithAngleMeasured& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (ZenithAngleMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ZenithAngleMeasured& instance_data) = 0;

   protected:
      ZenithAngleMeasuredDataWriter () {};
      ~ZenithAngleMeasuredDataWriter () {};
   private:
      ZenithAngleMeasuredDataWriter (const ZenithAngleMeasuredDataWriter &);
      ZenithAngleMeasuredDataWriter & operator = (const ZenithAngleMeasuredDataWriter &);
   };

   class ZenithAngleMeasuredDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ZenithAngleMeasuredDataReader_ptr _ptr_type;
      typedef ZenithAngleMeasuredDataReader_var _var_type;

      static ZenithAngleMeasuredDataReader_ptr _duplicate (ZenithAngleMeasuredDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ZenithAngleMeasuredDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ZenithAngleMeasuredDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ZenithAngleMeasuredDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ZenithAngleMeasuredDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (ZenithAngleMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (ZenithAngleMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (ZenithAngleMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ZenithAngleMeasured& instance) = 0;

   protected:
      ZenithAngleMeasuredDataReader () {};
      ~ZenithAngleMeasuredDataReader () {};
   private:
      ZenithAngleMeasuredDataReader (const ZenithAngleMeasuredDataReader &);
      ZenithAngleMeasuredDataReader & operator = (const ZenithAngleMeasuredDataReader &);
   };

   class ZenithAngleMeasuredDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ZenithAngleMeasuredDataReaderView_ptr _ptr_type;
      typedef ZenithAngleMeasuredDataReaderView_var _var_type;

      static ZenithAngleMeasuredDataReaderView_ptr _duplicate (ZenithAngleMeasuredDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ZenithAngleMeasuredDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ZenithAngleMeasuredDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ZenithAngleMeasuredDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ZenithAngleMeasuredDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (ZenithAngleMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (ZenithAngleMeasured& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ZenithAngleMeasuredSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (ZenithAngleMeasured& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ZenithAngleMeasured& instance) = 0;

   protected:
      ZenithAngleMeasuredDataReaderView () {};
      ~ZenithAngleMeasuredDataReaderView () {};
   private:
      ZenithAngleMeasuredDataReaderView (const ZenithAngleMeasuredDataReaderView &);
      ZenithAngleMeasuredDataReaderView & operator = (const ZenithAngleMeasuredDataReaderView &);
   };

   struct command_ApplyBendingModeSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_ApplyBendingMode, struct command_ApplyBendingModeSeq_uniq_> command_ApplyBendingModeSeq;
   typedef DDS_DCPSSequence_var < command_ApplyBendingModeSeq> command_ApplyBendingModeSeq_var;
   typedef DDS_DCPSSequence_out < command_ApplyBendingModeSeq> command_ApplyBendingModeSeq_out;
   class command_ApplyBendingModeTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_ApplyBendingModeTypeSupportInterface_ptr _ptr_type;
      typedef command_ApplyBendingModeTypeSupportInterface_var _var_type;

      static command_ApplyBendingModeTypeSupportInterface_ptr _duplicate (command_ApplyBendingModeTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_ApplyBendingModeTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_ApplyBendingModeTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_ApplyBendingModeTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_ApplyBendingModeTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_ApplyBendingModeTypeSupportInterface () {};
      ~command_ApplyBendingModeTypeSupportInterface () {};
   private:
      command_ApplyBendingModeTypeSupportInterface (const command_ApplyBendingModeTypeSupportInterface &);
      command_ApplyBendingModeTypeSupportInterface & operator = (const command_ApplyBendingModeTypeSupportInterface &);
   };

   class command_ApplyBendingModeDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_ApplyBendingModeDataWriter_ptr _ptr_type;
      typedef command_ApplyBendingModeDataWriter_var _var_type;

      static command_ApplyBendingModeDataWriter_ptr _duplicate (command_ApplyBendingModeDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_ApplyBendingModeDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_ApplyBendingModeDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_ApplyBendingModeDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_ApplyBendingModeDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_ApplyBendingMode& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_ApplyBendingMode& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_ApplyBendingMode& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_ApplyBendingMode& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_ApplyBendingMode& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_ApplyBendingMode& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_ApplyBendingMode& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_ApplyBendingMode& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_ApplyBendingMode& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_ApplyBendingMode& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_ApplyBendingMode& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_ApplyBendingMode& instance_data) = 0;

   protected:
      command_ApplyBendingModeDataWriter () {};
      ~command_ApplyBendingModeDataWriter () {};
   private:
      command_ApplyBendingModeDataWriter (const command_ApplyBendingModeDataWriter &);
      command_ApplyBendingModeDataWriter & operator = (const command_ApplyBendingModeDataWriter &);
   };

   class command_ApplyBendingModeDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_ApplyBendingModeDataReader_ptr _ptr_type;
      typedef command_ApplyBendingModeDataReader_var _var_type;

      static command_ApplyBendingModeDataReader_ptr _duplicate (command_ApplyBendingModeDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_ApplyBendingModeDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_ApplyBendingModeDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_ApplyBendingModeDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_ApplyBendingModeDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_ApplyBendingMode& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_ApplyBendingMode& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_ApplyBendingMode& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_ApplyBendingMode& instance) = 0;

   protected:
      command_ApplyBendingModeDataReader () {};
      ~command_ApplyBendingModeDataReader () {};
   private:
      command_ApplyBendingModeDataReader (const command_ApplyBendingModeDataReader &);
      command_ApplyBendingModeDataReader & operator = (const command_ApplyBendingModeDataReader &);
   };

   class command_ApplyBendingModeDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_ApplyBendingModeDataReaderView_ptr _ptr_type;
      typedef command_ApplyBendingModeDataReaderView_var _var_type;

      static command_ApplyBendingModeDataReaderView_ptr _duplicate (command_ApplyBendingModeDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_ApplyBendingModeDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_ApplyBendingModeDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_ApplyBendingModeDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_ApplyBendingModeDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_ApplyBendingMode& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_ApplyBendingMode& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_ApplyBendingModeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_ApplyBendingMode& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_ApplyBendingMode& instance) = 0;

   protected:
      command_ApplyBendingModeDataReaderView () {};
      ~command_ApplyBendingModeDataReaderView () {};
   private:
      command_ApplyBendingModeDataReaderView (const command_ApplyBendingModeDataReaderView &);
      command_ApplyBendingModeDataReaderView & operator = (const command_ApplyBendingModeDataReaderView &);
   };

   struct command_ApplyForceSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_ApplyForce, struct command_ApplyForceSeq_uniq_> command_ApplyForceSeq;
   typedef DDS_DCPSSequence_var < command_ApplyForceSeq> command_ApplyForceSeq_var;
   typedef DDS_DCPSSequence_out < command_ApplyForceSeq> command_ApplyForceSeq_out;
   class command_ApplyForceTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_ApplyForceTypeSupportInterface_ptr _ptr_type;
      typedef command_ApplyForceTypeSupportInterface_var _var_type;

      static command_ApplyForceTypeSupportInterface_ptr _duplicate (command_ApplyForceTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_ApplyForceTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_ApplyForceTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_ApplyForceTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_ApplyForceTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_ApplyForceTypeSupportInterface () {};
      ~command_ApplyForceTypeSupportInterface () {};
   private:
      command_ApplyForceTypeSupportInterface (const command_ApplyForceTypeSupportInterface &);
      command_ApplyForceTypeSupportInterface & operator = (const command_ApplyForceTypeSupportInterface &);
   };

   class command_ApplyForceDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_ApplyForceDataWriter_ptr _ptr_type;
      typedef command_ApplyForceDataWriter_var _var_type;

      static command_ApplyForceDataWriter_ptr _duplicate (command_ApplyForceDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_ApplyForceDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_ApplyForceDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_ApplyForceDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_ApplyForceDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_ApplyForce& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_ApplyForce& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_ApplyForce& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_ApplyForce& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_ApplyForce& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_ApplyForce& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_ApplyForce& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_ApplyForce& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_ApplyForce& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_ApplyForce& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_ApplyForce& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_ApplyForce& instance_data) = 0;

   protected:
      command_ApplyForceDataWriter () {};
      ~command_ApplyForceDataWriter () {};
   private:
      command_ApplyForceDataWriter (const command_ApplyForceDataWriter &);
      command_ApplyForceDataWriter & operator = (const command_ApplyForceDataWriter &);
   };

   class command_ApplyForceDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_ApplyForceDataReader_ptr _ptr_type;
      typedef command_ApplyForceDataReader_var _var_type;

      static command_ApplyForceDataReader_ptr _duplicate (command_ApplyForceDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_ApplyForceDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_ApplyForceDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_ApplyForceDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_ApplyForceDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_ApplyForce& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_ApplyForce& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_ApplyForce& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_ApplyForce& instance) = 0;

   protected:
      command_ApplyForceDataReader () {};
      ~command_ApplyForceDataReader () {};
   private:
      command_ApplyForceDataReader (const command_ApplyForceDataReader &);
      command_ApplyForceDataReader & operator = (const command_ApplyForceDataReader &);
   };

   class command_ApplyForceDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_ApplyForceDataReaderView_ptr _ptr_type;
      typedef command_ApplyForceDataReaderView_var _var_type;

      static command_ApplyForceDataReaderView_ptr _duplicate (command_ApplyForceDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_ApplyForceDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_ApplyForceDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_ApplyForceDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_ApplyForceDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_ApplyForce& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_ApplyForce& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_ApplyForceSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_ApplyForce& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_ApplyForce& instance) = 0;

   protected:
      command_ApplyForceDataReaderView () {};
      ~command_ApplyForceDataReaderView () {};
   private:
      command_ApplyForceDataReaderView (const command_ApplyForceDataReaderView &);
      command_ApplyForceDataReaderView & operator = (const command_ApplyForceDataReaderView &);
   };

   struct command_MoveAxialActuatorSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_MoveAxialActuator, struct command_MoveAxialActuatorSeq_uniq_> command_MoveAxialActuatorSeq;
   typedef DDS_DCPSSequence_var < command_MoveAxialActuatorSeq> command_MoveAxialActuatorSeq_var;
   typedef DDS_DCPSSequence_out < command_MoveAxialActuatorSeq> command_MoveAxialActuatorSeq_out;
   class command_MoveAxialActuatorTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_MoveAxialActuatorTypeSupportInterface_ptr _ptr_type;
      typedef command_MoveAxialActuatorTypeSupportInterface_var _var_type;

      static command_MoveAxialActuatorTypeSupportInterface_ptr _duplicate (command_MoveAxialActuatorTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_MoveAxialActuatorTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_MoveAxialActuatorTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_MoveAxialActuatorTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_MoveAxialActuatorTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_MoveAxialActuatorTypeSupportInterface () {};
      ~command_MoveAxialActuatorTypeSupportInterface () {};
   private:
      command_MoveAxialActuatorTypeSupportInterface (const command_MoveAxialActuatorTypeSupportInterface &);
      command_MoveAxialActuatorTypeSupportInterface & operator = (const command_MoveAxialActuatorTypeSupportInterface &);
   };

   class command_MoveAxialActuatorDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_MoveAxialActuatorDataWriter_ptr _ptr_type;
      typedef command_MoveAxialActuatorDataWriter_var _var_type;

      static command_MoveAxialActuatorDataWriter_ptr _duplicate (command_MoveAxialActuatorDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_MoveAxialActuatorDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_MoveAxialActuatorDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_MoveAxialActuatorDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_MoveAxialActuatorDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_MoveAxialActuator& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_MoveAxialActuator& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_MoveAxialActuator& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_MoveAxialActuator& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_MoveAxialActuator& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_MoveAxialActuator& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_MoveAxialActuator& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_MoveAxialActuator& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_MoveAxialActuator& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_MoveAxialActuator& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_MoveAxialActuator& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_MoveAxialActuator& instance_data) = 0;

   protected:
      command_MoveAxialActuatorDataWriter () {};
      ~command_MoveAxialActuatorDataWriter () {};
   private:
      command_MoveAxialActuatorDataWriter (const command_MoveAxialActuatorDataWriter &);
      command_MoveAxialActuatorDataWriter & operator = (const command_MoveAxialActuatorDataWriter &);
   };

   class command_MoveAxialActuatorDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_MoveAxialActuatorDataReader_ptr _ptr_type;
      typedef command_MoveAxialActuatorDataReader_var _var_type;

      static command_MoveAxialActuatorDataReader_ptr _duplicate (command_MoveAxialActuatorDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_MoveAxialActuatorDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_MoveAxialActuatorDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_MoveAxialActuatorDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_MoveAxialActuatorDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_MoveAxialActuator& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_MoveAxialActuator& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_MoveAxialActuator& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_MoveAxialActuator& instance) = 0;

   protected:
      command_MoveAxialActuatorDataReader () {};
      ~command_MoveAxialActuatorDataReader () {};
   private:
      command_MoveAxialActuatorDataReader (const command_MoveAxialActuatorDataReader &);
      command_MoveAxialActuatorDataReader & operator = (const command_MoveAxialActuatorDataReader &);
   };

   class command_MoveAxialActuatorDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_MoveAxialActuatorDataReaderView_ptr _ptr_type;
      typedef command_MoveAxialActuatorDataReaderView_var _var_type;

      static command_MoveAxialActuatorDataReaderView_ptr _duplicate (command_MoveAxialActuatorDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_MoveAxialActuatorDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_MoveAxialActuatorDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_MoveAxialActuatorDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_MoveAxialActuatorDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_MoveAxialActuator& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_MoveAxialActuator& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_MoveAxialActuatorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_MoveAxialActuator& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_MoveAxialActuator& instance) = 0;

   protected:
      command_MoveAxialActuatorDataReaderView () {};
      ~command_MoveAxialActuatorDataReaderView () {};
   private:
      command_MoveAxialActuatorDataReaderView (const command_MoveAxialActuatorDataReaderView &);
      command_MoveAxialActuatorDataReaderView & operator = (const command_MoveAxialActuatorDataReaderView &);
   };

   struct command_PositionMirrorSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_PositionMirror, struct command_PositionMirrorSeq_uniq_> command_PositionMirrorSeq;
   typedef DDS_DCPSSequence_var < command_PositionMirrorSeq> command_PositionMirrorSeq_var;
   typedef DDS_DCPSSequence_out < command_PositionMirrorSeq> command_PositionMirrorSeq_out;
   class command_PositionMirrorTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_PositionMirrorTypeSupportInterface_ptr _ptr_type;
      typedef command_PositionMirrorTypeSupportInterface_var _var_type;

      static command_PositionMirrorTypeSupportInterface_ptr _duplicate (command_PositionMirrorTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_PositionMirrorTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_PositionMirrorTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_PositionMirrorTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_PositionMirrorTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_PositionMirrorTypeSupportInterface () {};
      ~command_PositionMirrorTypeSupportInterface () {};
   private:
      command_PositionMirrorTypeSupportInterface (const command_PositionMirrorTypeSupportInterface &);
      command_PositionMirrorTypeSupportInterface & operator = (const command_PositionMirrorTypeSupportInterface &);
   };

   class command_PositionMirrorDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_PositionMirrorDataWriter_ptr _ptr_type;
      typedef command_PositionMirrorDataWriter_var _var_type;

      static command_PositionMirrorDataWriter_ptr _duplicate (command_PositionMirrorDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_PositionMirrorDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_PositionMirrorDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_PositionMirrorDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_PositionMirrorDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_PositionMirror& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_PositionMirror& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_PositionMirror& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_PositionMirror& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_PositionMirror& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_PositionMirror& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_PositionMirror& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_PositionMirror& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_PositionMirror& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_PositionMirror& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_PositionMirror& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_PositionMirror& instance_data) = 0;

   protected:
      command_PositionMirrorDataWriter () {};
      ~command_PositionMirrorDataWriter () {};
   private:
      command_PositionMirrorDataWriter (const command_PositionMirrorDataWriter &);
      command_PositionMirrorDataWriter & operator = (const command_PositionMirrorDataWriter &);
   };

   class command_PositionMirrorDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_PositionMirrorDataReader_ptr _ptr_type;
      typedef command_PositionMirrorDataReader_var _var_type;

      static command_PositionMirrorDataReader_ptr _duplicate (command_PositionMirrorDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_PositionMirrorDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_PositionMirrorDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_PositionMirrorDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_PositionMirrorDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_PositionMirror& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_PositionMirror& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_PositionMirror& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_PositionMirror& instance) = 0;

   protected:
      command_PositionMirrorDataReader () {};
      ~command_PositionMirrorDataReader () {};
   private:
      command_PositionMirrorDataReader (const command_PositionMirrorDataReader &);
      command_PositionMirrorDataReader & operator = (const command_PositionMirrorDataReader &);
   };

   class command_PositionMirrorDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_PositionMirrorDataReaderView_ptr _ptr_type;
      typedef command_PositionMirrorDataReaderView_var _var_type;

      static command_PositionMirrorDataReaderView_ptr _duplicate (command_PositionMirrorDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_PositionMirrorDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_PositionMirrorDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_PositionMirrorDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_PositionMirrorDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_PositionMirror& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_PositionMirror& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_PositionMirrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_PositionMirror& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_PositionMirror& instance) = 0;

   protected:
      command_PositionMirrorDataReaderView () {};
      ~command_PositionMirrorDataReaderView () {};
   private:
      command_PositionMirrorDataReaderView (const command_PositionMirrorDataReaderView &);
      command_PositionMirrorDataReaderView & operator = (const command_PositionMirrorDataReaderView &);
   };

   struct command_SetCorrectionModeSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_SetCorrectionMode, struct command_SetCorrectionModeSeq_uniq_> command_SetCorrectionModeSeq;
   typedef DDS_DCPSSequence_var < command_SetCorrectionModeSeq> command_SetCorrectionModeSeq_var;
   typedef DDS_DCPSSequence_out < command_SetCorrectionModeSeq> command_SetCorrectionModeSeq_out;
   class command_SetCorrectionModeTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_SetCorrectionModeTypeSupportInterface_ptr _ptr_type;
      typedef command_SetCorrectionModeTypeSupportInterface_var _var_type;

      static command_SetCorrectionModeTypeSupportInterface_ptr _duplicate (command_SetCorrectionModeTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_SetCorrectionModeTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_SetCorrectionModeTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_SetCorrectionModeTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_SetCorrectionModeTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_SetCorrectionModeTypeSupportInterface () {};
      ~command_SetCorrectionModeTypeSupportInterface () {};
   private:
      command_SetCorrectionModeTypeSupportInterface (const command_SetCorrectionModeTypeSupportInterface &);
      command_SetCorrectionModeTypeSupportInterface & operator = (const command_SetCorrectionModeTypeSupportInterface &);
   };

   class command_SetCorrectionModeDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_SetCorrectionModeDataWriter_ptr _ptr_type;
      typedef command_SetCorrectionModeDataWriter_var _var_type;

      static command_SetCorrectionModeDataWriter_ptr _duplicate (command_SetCorrectionModeDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_SetCorrectionModeDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_SetCorrectionModeDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_SetCorrectionModeDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_SetCorrectionModeDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_SetCorrectionMode& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_SetCorrectionMode& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_SetCorrectionMode& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_SetCorrectionMode& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_SetCorrectionMode& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_SetCorrectionMode& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_SetCorrectionMode& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_SetCorrectionMode& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_SetCorrectionMode& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_SetCorrectionMode& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_SetCorrectionMode& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_SetCorrectionMode& instance_data) = 0;

   protected:
      command_SetCorrectionModeDataWriter () {};
      ~command_SetCorrectionModeDataWriter () {};
   private:
      command_SetCorrectionModeDataWriter (const command_SetCorrectionModeDataWriter &);
      command_SetCorrectionModeDataWriter & operator = (const command_SetCorrectionModeDataWriter &);
   };

   class command_SetCorrectionModeDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_SetCorrectionModeDataReader_ptr _ptr_type;
      typedef command_SetCorrectionModeDataReader_var _var_type;

      static command_SetCorrectionModeDataReader_ptr _duplicate (command_SetCorrectionModeDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_SetCorrectionModeDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_SetCorrectionModeDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_SetCorrectionModeDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_SetCorrectionModeDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_SetCorrectionMode& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_SetCorrectionMode& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_SetCorrectionMode& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_SetCorrectionMode& instance) = 0;

   protected:
      command_SetCorrectionModeDataReader () {};
      ~command_SetCorrectionModeDataReader () {};
   private:
      command_SetCorrectionModeDataReader (const command_SetCorrectionModeDataReader &);
      command_SetCorrectionModeDataReader & operator = (const command_SetCorrectionModeDataReader &);
   };

   class command_SetCorrectionModeDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_SetCorrectionModeDataReaderView_ptr _ptr_type;
      typedef command_SetCorrectionModeDataReaderView_var _var_type;

      static command_SetCorrectionModeDataReaderView_ptr _duplicate (command_SetCorrectionModeDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_SetCorrectionModeDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_SetCorrectionModeDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_SetCorrectionModeDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_SetCorrectionModeDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_SetCorrectionMode& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_SetCorrectionMode& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_SetCorrectionModeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_SetCorrectionMode& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_SetCorrectionMode& instance) = 0;

   protected:
      command_SetCorrectionModeDataReaderView () {};
      ~command_SetCorrectionModeDataReaderView () {};
   private:
      command_SetCorrectionModeDataReaderView (const command_SetCorrectionModeDataReaderView &);
      command_SetCorrectionModeDataReaderView & operator = (const command_SetCorrectionModeDataReaderView &);
   };

   struct logevent_M2AssemblyInPositionSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_M2AssemblyInPosition, struct logevent_M2AssemblyInPositionSeq_uniq_> logevent_M2AssemblyInPositionSeq;
   typedef DDS_DCPSSequence_var < logevent_M2AssemblyInPositionSeq> logevent_M2AssemblyInPositionSeq_var;
   typedef DDS_DCPSSequence_out < logevent_M2AssemblyInPositionSeq> logevent_M2AssemblyInPositionSeq_out;
   class logevent_M2AssemblyInPositionTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_M2AssemblyInPositionTypeSupportInterface_ptr _ptr_type;
      typedef logevent_M2AssemblyInPositionTypeSupportInterface_var _var_type;

      static logevent_M2AssemblyInPositionTypeSupportInterface_ptr _duplicate (logevent_M2AssemblyInPositionTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_M2AssemblyInPositionTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_M2AssemblyInPositionTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_M2AssemblyInPositionTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_M2AssemblyInPositionTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_M2AssemblyInPositionTypeSupportInterface () {};
      ~logevent_M2AssemblyInPositionTypeSupportInterface () {};
   private:
      logevent_M2AssemblyInPositionTypeSupportInterface (const logevent_M2AssemblyInPositionTypeSupportInterface &);
      logevent_M2AssemblyInPositionTypeSupportInterface & operator = (const logevent_M2AssemblyInPositionTypeSupportInterface &);
   };

   class logevent_M2AssemblyInPositionDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_M2AssemblyInPositionDataWriter_ptr _ptr_type;
      typedef logevent_M2AssemblyInPositionDataWriter_var _var_type;

      static logevent_M2AssemblyInPositionDataWriter_ptr _duplicate (logevent_M2AssemblyInPositionDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_M2AssemblyInPositionDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_M2AssemblyInPositionDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_M2AssemblyInPositionDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_M2AssemblyInPositionDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_M2AssemblyInPosition& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_M2AssemblyInPosition& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_M2AssemblyInPosition& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_M2AssemblyInPosition& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_M2AssemblyInPosition& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_M2AssemblyInPosition& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_M2AssemblyInPosition& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_M2AssemblyInPosition& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_M2AssemblyInPosition& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_M2AssemblyInPosition& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_M2AssemblyInPosition& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_M2AssemblyInPosition& instance_data) = 0;

   protected:
      logevent_M2AssemblyInPositionDataWriter () {};
      ~logevent_M2AssemblyInPositionDataWriter () {};
   private:
      logevent_M2AssemblyInPositionDataWriter (const logevent_M2AssemblyInPositionDataWriter &);
      logevent_M2AssemblyInPositionDataWriter & operator = (const logevent_M2AssemblyInPositionDataWriter &);
   };

   class logevent_M2AssemblyInPositionDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_M2AssemblyInPositionDataReader_ptr _ptr_type;
      typedef logevent_M2AssemblyInPositionDataReader_var _var_type;

      static logevent_M2AssemblyInPositionDataReader_ptr _duplicate (logevent_M2AssemblyInPositionDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_M2AssemblyInPositionDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_M2AssemblyInPositionDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_M2AssemblyInPositionDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_M2AssemblyInPositionDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_M2AssemblyInPosition& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_M2AssemblyInPosition& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_M2AssemblyInPosition& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_M2AssemblyInPosition& instance) = 0;

   protected:
      logevent_M2AssemblyInPositionDataReader () {};
      ~logevent_M2AssemblyInPositionDataReader () {};
   private:
      logevent_M2AssemblyInPositionDataReader (const logevent_M2AssemblyInPositionDataReader &);
      logevent_M2AssemblyInPositionDataReader & operator = (const logevent_M2AssemblyInPositionDataReader &);
   };

   class logevent_M2AssemblyInPositionDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_M2AssemblyInPositionDataReaderView_ptr _ptr_type;
      typedef logevent_M2AssemblyInPositionDataReaderView_var _var_type;

      static logevent_M2AssemblyInPositionDataReaderView_ptr _duplicate (logevent_M2AssemblyInPositionDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_M2AssemblyInPositionDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_M2AssemblyInPositionDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_M2AssemblyInPositionDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_M2AssemblyInPositionDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_M2AssemblyInPosition& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_M2AssemblyInPosition& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_M2AssemblyInPositionSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_M2AssemblyInPosition& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_M2AssemblyInPosition& instance) = 0;

   protected:
      logevent_M2AssemblyInPositionDataReaderView () {};
      ~logevent_M2AssemblyInPositionDataReaderView () {};
   private:
      logevent_M2AssemblyInPositionDataReaderView (const logevent_M2AssemblyInPositionDataReaderView &);
      logevent_M2AssemblyInPositionDataReaderView & operator = (const logevent_M2AssemblyInPositionDataReaderView &);
   };

   struct logevent_M2DetailedStateSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_M2DetailedState, struct logevent_M2DetailedStateSeq_uniq_> logevent_M2DetailedStateSeq;
   typedef DDS_DCPSSequence_var < logevent_M2DetailedStateSeq> logevent_M2DetailedStateSeq_var;
   typedef DDS_DCPSSequence_out < logevent_M2DetailedStateSeq> logevent_M2DetailedStateSeq_out;
   class logevent_M2DetailedStateTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_M2DetailedStateTypeSupportInterface_ptr _ptr_type;
      typedef logevent_M2DetailedStateTypeSupportInterface_var _var_type;

      static logevent_M2DetailedStateTypeSupportInterface_ptr _duplicate (logevent_M2DetailedStateTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_M2DetailedStateTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_M2DetailedStateTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_M2DetailedStateTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_M2DetailedStateTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_M2DetailedStateTypeSupportInterface () {};
      ~logevent_M2DetailedStateTypeSupportInterface () {};
   private:
      logevent_M2DetailedStateTypeSupportInterface (const logevent_M2DetailedStateTypeSupportInterface &);
      logevent_M2DetailedStateTypeSupportInterface & operator = (const logevent_M2DetailedStateTypeSupportInterface &);
   };

   class logevent_M2DetailedStateDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_M2DetailedStateDataWriter_ptr _ptr_type;
      typedef logevent_M2DetailedStateDataWriter_var _var_type;

      static logevent_M2DetailedStateDataWriter_ptr _duplicate (logevent_M2DetailedStateDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_M2DetailedStateDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_M2DetailedStateDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_M2DetailedStateDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_M2DetailedStateDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_M2DetailedState& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_M2DetailedState& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_M2DetailedState& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_M2DetailedState& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_M2DetailedState& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_M2DetailedState& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_M2DetailedState& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_M2DetailedState& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_M2DetailedState& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_M2DetailedState& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_M2DetailedState& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_M2DetailedState& instance_data) = 0;

   protected:
      logevent_M2DetailedStateDataWriter () {};
      ~logevent_M2DetailedStateDataWriter () {};
   private:
      logevent_M2DetailedStateDataWriter (const logevent_M2DetailedStateDataWriter &);
      logevent_M2DetailedStateDataWriter & operator = (const logevent_M2DetailedStateDataWriter &);
   };

   class logevent_M2DetailedStateDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_M2DetailedStateDataReader_ptr _ptr_type;
      typedef logevent_M2DetailedStateDataReader_var _var_type;

      static logevent_M2DetailedStateDataReader_ptr _duplicate (logevent_M2DetailedStateDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_M2DetailedStateDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_M2DetailedStateDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_M2DetailedStateDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_M2DetailedStateDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_M2DetailedState& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_M2DetailedState& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_M2DetailedState& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_M2DetailedState& instance) = 0;

   protected:
      logevent_M2DetailedStateDataReader () {};
      ~logevent_M2DetailedStateDataReader () {};
   private:
      logevent_M2DetailedStateDataReader (const logevent_M2DetailedStateDataReader &);
      logevent_M2DetailedStateDataReader & operator = (const logevent_M2DetailedStateDataReader &);
   };

   class logevent_M2DetailedStateDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_M2DetailedStateDataReaderView_ptr _ptr_type;
      typedef logevent_M2DetailedStateDataReaderView_var _var_type;

      static logevent_M2DetailedStateDataReaderView_ptr _duplicate (logevent_M2DetailedStateDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_M2DetailedStateDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_M2DetailedStateDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_M2DetailedStateDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_M2DetailedStateDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_M2DetailedState& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_M2DetailedState& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_M2DetailedStateSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_M2DetailedState& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_M2DetailedState& instance) = 0;

   protected:
      logevent_M2DetailedStateDataReaderView () {};
      ~logevent_M2DetailedStateDataReaderView () {};
   private:
      logevent_M2DetailedStateDataReaderView (const logevent_M2DetailedStateDataReaderView &);
      logevent_M2DetailedStateDataReaderView & operator = (const logevent_M2DetailedStateDataReaderView &);
   };

   struct logevent_M2FaultStateSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_M2FaultState, struct logevent_M2FaultStateSeq_uniq_> logevent_M2FaultStateSeq;
   typedef DDS_DCPSSequence_var < logevent_M2FaultStateSeq> logevent_M2FaultStateSeq_var;
   typedef DDS_DCPSSequence_out < logevent_M2FaultStateSeq> logevent_M2FaultStateSeq_out;
   class logevent_M2FaultStateTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_M2FaultStateTypeSupportInterface_ptr _ptr_type;
      typedef logevent_M2FaultStateTypeSupportInterface_var _var_type;

      static logevent_M2FaultStateTypeSupportInterface_ptr _duplicate (logevent_M2FaultStateTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_M2FaultStateTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_M2FaultStateTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_M2FaultStateTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_M2FaultStateTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_M2FaultStateTypeSupportInterface () {};
      ~logevent_M2FaultStateTypeSupportInterface () {};
   private:
      logevent_M2FaultStateTypeSupportInterface (const logevent_M2FaultStateTypeSupportInterface &);
      logevent_M2FaultStateTypeSupportInterface & operator = (const logevent_M2FaultStateTypeSupportInterface &);
   };

   class logevent_M2FaultStateDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_M2FaultStateDataWriter_ptr _ptr_type;
      typedef logevent_M2FaultStateDataWriter_var _var_type;

      static logevent_M2FaultStateDataWriter_ptr _duplicate (logevent_M2FaultStateDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_M2FaultStateDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_M2FaultStateDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_M2FaultStateDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_M2FaultStateDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_M2FaultState& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_M2FaultState& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_M2FaultState& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_M2FaultState& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_M2FaultState& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_M2FaultState& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_M2FaultState& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_M2FaultState& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_M2FaultState& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_M2FaultState& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_M2FaultState& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_M2FaultState& instance_data) = 0;

   protected:
      logevent_M2FaultStateDataWriter () {};
      ~logevent_M2FaultStateDataWriter () {};
   private:
      logevent_M2FaultStateDataWriter (const logevent_M2FaultStateDataWriter &);
      logevent_M2FaultStateDataWriter & operator = (const logevent_M2FaultStateDataWriter &);
   };

   class logevent_M2FaultStateDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_M2FaultStateDataReader_ptr _ptr_type;
      typedef logevent_M2FaultStateDataReader_var _var_type;

      static logevent_M2FaultStateDataReader_ptr _duplicate (logevent_M2FaultStateDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_M2FaultStateDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_M2FaultStateDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_M2FaultStateDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_M2FaultStateDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_M2FaultState& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_M2FaultState& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_M2FaultState& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_M2FaultState& instance) = 0;

   protected:
      logevent_M2FaultStateDataReader () {};
      ~logevent_M2FaultStateDataReader () {};
   private:
      logevent_M2FaultStateDataReader (const logevent_M2FaultStateDataReader &);
      logevent_M2FaultStateDataReader & operator = (const logevent_M2FaultStateDataReader &);
   };

   class logevent_M2FaultStateDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_M2FaultStateDataReaderView_ptr _ptr_type;
      typedef logevent_M2FaultStateDataReaderView_var _var_type;

      static logevent_M2FaultStateDataReaderView_ptr _duplicate (logevent_M2FaultStateDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_M2FaultStateDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_M2FaultStateDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_M2FaultStateDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_M2FaultStateDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_M2FaultState& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_M2FaultState& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_M2FaultStateSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_M2FaultState& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_M2FaultState& instance) = 0;

   protected:
      logevent_M2FaultStateDataReaderView () {};
      ~logevent_M2FaultStateDataReaderView () {};
   private:
      logevent_M2FaultStateDataReaderView (const logevent_M2FaultStateDataReaderView &);
      logevent_M2FaultStateDataReaderView & operator = (const logevent_M2FaultStateDataReaderView &);
   };

   struct logevent_M2SummaryStateSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_M2SummaryState, struct logevent_M2SummaryStateSeq_uniq_> logevent_M2SummaryStateSeq;
   typedef DDS_DCPSSequence_var < logevent_M2SummaryStateSeq> logevent_M2SummaryStateSeq_var;
   typedef DDS_DCPSSequence_out < logevent_M2SummaryStateSeq> logevent_M2SummaryStateSeq_out;
   class logevent_M2SummaryStateTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_M2SummaryStateTypeSupportInterface_ptr _ptr_type;
      typedef logevent_M2SummaryStateTypeSupportInterface_var _var_type;

      static logevent_M2SummaryStateTypeSupportInterface_ptr _duplicate (logevent_M2SummaryStateTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_M2SummaryStateTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_M2SummaryStateTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_M2SummaryStateTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_M2SummaryStateTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_M2SummaryStateTypeSupportInterface () {};
      ~logevent_M2SummaryStateTypeSupportInterface () {};
   private:
      logevent_M2SummaryStateTypeSupportInterface (const logevent_M2SummaryStateTypeSupportInterface &);
      logevent_M2SummaryStateTypeSupportInterface & operator = (const logevent_M2SummaryStateTypeSupportInterface &);
   };

   class logevent_M2SummaryStateDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_M2SummaryStateDataWriter_ptr _ptr_type;
      typedef logevent_M2SummaryStateDataWriter_var _var_type;

      static logevent_M2SummaryStateDataWriter_ptr _duplicate (logevent_M2SummaryStateDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_M2SummaryStateDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_M2SummaryStateDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_M2SummaryStateDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_M2SummaryStateDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_M2SummaryState& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_M2SummaryState& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_M2SummaryState& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_M2SummaryState& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_M2SummaryState& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_M2SummaryState& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_M2SummaryState& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_M2SummaryState& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_M2SummaryState& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_M2SummaryState& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_M2SummaryState& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_M2SummaryState& instance_data) = 0;

   protected:
      logevent_M2SummaryStateDataWriter () {};
      ~logevent_M2SummaryStateDataWriter () {};
   private:
      logevent_M2SummaryStateDataWriter (const logevent_M2SummaryStateDataWriter &);
      logevent_M2SummaryStateDataWriter & operator = (const logevent_M2SummaryStateDataWriter &);
   };

   class logevent_M2SummaryStateDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_M2SummaryStateDataReader_ptr _ptr_type;
      typedef logevent_M2SummaryStateDataReader_var _var_type;

      static logevent_M2SummaryStateDataReader_ptr _duplicate (logevent_M2SummaryStateDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_M2SummaryStateDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_M2SummaryStateDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_M2SummaryStateDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_M2SummaryStateDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_M2SummaryState& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_M2SummaryState& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_M2SummaryState& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_M2SummaryState& instance) = 0;

   protected:
      logevent_M2SummaryStateDataReader () {};
      ~logevent_M2SummaryStateDataReader () {};
   private:
      logevent_M2SummaryStateDataReader (const logevent_M2SummaryStateDataReader &);
      logevent_M2SummaryStateDataReader & operator = (const logevent_M2SummaryStateDataReader &);
   };

   class logevent_M2SummaryStateDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_M2SummaryStateDataReaderView_ptr _ptr_type;
      typedef logevent_M2SummaryStateDataReaderView_var _var_type;

      static logevent_M2SummaryStateDataReaderView_ptr _duplicate (logevent_M2SummaryStateDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_M2SummaryStateDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_M2SummaryStateDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_M2SummaryStateDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_M2SummaryStateDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_M2SummaryState& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_M2SummaryState& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_M2SummaryStateSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_M2SummaryState& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_M2SummaryState& instance) = 0;

   protected:
      logevent_M2SummaryStateDataReaderView () {};
      ~logevent_M2SummaryStateDataReaderView () {};
   private:
      logevent_M2SummaryStateDataReaderView (const logevent_M2SummaryStateDataReaderView &);
      logevent_M2SummaryStateDataReaderView & operator = (const logevent_M2SummaryStateDataReaderView &);
   };

   struct commandSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command, struct commandSeq_uniq_> commandSeq;
   typedef DDS_DCPSSequence_var < commandSeq> commandSeq_var;
   typedef DDS_DCPSSequence_out < commandSeq> commandSeq_out;
   class commandTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef commandTypeSupportInterface_ptr _ptr_type;
      typedef commandTypeSupportInterface_var _var_type;

      static commandTypeSupportInterface_ptr _duplicate (commandTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static commandTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      commandTypeSupportInterface_ptr _this () { return this; }


   protected:
      commandTypeSupportInterface () {};
      ~commandTypeSupportInterface () {};
   private:
      commandTypeSupportInterface (const commandTypeSupportInterface &);
      commandTypeSupportInterface & operator = (const commandTypeSupportInterface &);
   };

   class commandDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef commandDataWriter_ptr _ptr_type;
      typedef commandDataWriter_var _var_type;

      static commandDataWriter_ptr _duplicate (commandDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static commandDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      commandDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command& instance_data) = 0;

   protected:
      commandDataWriter () {};
      ~commandDataWriter () {};
   private:
      commandDataWriter (const commandDataWriter &);
      commandDataWriter & operator = (const commandDataWriter &);
   };

   class commandDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef commandDataReader_ptr _ptr_type;
      typedef commandDataReader_var _var_type;

      static commandDataReader_ptr _duplicate (commandDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandDataReader_ptr _narrow (DDS::Object_ptr obj);
      static commandDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      commandDataReader_ptr _this () { return this; }

      virtual DDS::Long read (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (commandSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command& instance) = 0;

   protected:
      commandDataReader () {};
      ~commandDataReader () {};
   private:
      commandDataReader (const commandDataReader &);
      commandDataReader & operator = (const commandDataReader &);
   };

   class commandDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef commandDataReaderView_ptr _ptr_type;
      typedef commandDataReaderView_var _var_type;

      static commandDataReaderView_ptr _duplicate (commandDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static commandDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      commandDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (commandSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command& instance) = 0;

   protected:
      commandDataReaderView () {};
      ~commandDataReaderView () {};
   private:
      commandDataReaderView (const commandDataReaderView &);
      commandDataReaderView & operator = (const commandDataReaderView &);
   };

   struct ackcmdSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < ackcmd, struct ackcmdSeq_uniq_> ackcmdSeq;
   typedef DDS_DCPSSequence_var < ackcmdSeq> ackcmdSeq_var;
   typedef DDS_DCPSSequence_out < ackcmdSeq> ackcmdSeq_out;
   class ackcmdTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ackcmdTypeSupportInterface_ptr _ptr_type;
      typedef ackcmdTypeSupportInterface_var _var_type;

      static ackcmdTypeSupportInterface_ptr _duplicate (ackcmdTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdTypeSupportInterface_ptr _this () { return this; }


   protected:
      ackcmdTypeSupportInterface () {};
      ~ackcmdTypeSupportInterface () {};
   private:
      ackcmdTypeSupportInterface (const ackcmdTypeSupportInterface &);
      ackcmdTypeSupportInterface & operator = (const ackcmdTypeSupportInterface &);
   };

   class ackcmdDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ackcmdDataWriter_ptr _ptr_type;
      typedef ackcmdDataWriter_var _var_type;

      static ackcmdDataWriter_ptr _duplicate (ackcmdDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const ackcmd& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const ackcmd& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (ackcmd& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ackcmd& instance_data) = 0;

   protected:
      ackcmdDataWriter () {};
      ~ackcmdDataWriter () {};
   private:
      ackcmdDataWriter (const ackcmdDataWriter &);
      ackcmdDataWriter & operator = (const ackcmdDataWriter &);
   };

   class ackcmdDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ackcmdDataReader_ptr _ptr_type;
      typedef ackcmdDataReader_var _var_type;

      static ackcmdDataReader_ptr _duplicate (ackcmdDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (ackcmd& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ackcmd& instance) = 0;

   protected:
      ackcmdDataReader () {};
      ~ackcmdDataReader () {};
   private:
      ackcmdDataReader (const ackcmdDataReader &);
      ackcmdDataReader & operator = (const ackcmdDataReader &);
   };

   class ackcmdDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ackcmdDataReaderView_ptr _ptr_type;
      typedef ackcmdDataReaderView_var _var_type;

      static ackcmdDataReaderView_ptr _duplicate (ackcmdDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (ackcmd& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ackcmd& instance) = 0;

   protected:
      ackcmdDataReaderView () {};
      ~ackcmdDataReaderView () {};
   private:
      ackcmdDataReaderView (const ackcmdDataReaderView &);
      ackcmdDataReaderView & operator = (const ackcmdDataReaderView &);
   };

   struct logeventSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent, struct logeventSeq_uniq_> logeventSeq;
   typedef DDS_DCPSSequence_var < logeventSeq> logeventSeq_var;
   typedef DDS_DCPSSequence_out < logeventSeq> logeventSeq_out;
   class logeventTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logeventTypeSupportInterface_ptr _ptr_type;
      typedef logeventTypeSupportInterface_var _var_type;

      static logeventTypeSupportInterface_ptr _duplicate (logeventTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logeventTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventTypeSupportInterface_ptr _this () { return this; }


   protected:
      logeventTypeSupportInterface () {};
      ~logeventTypeSupportInterface () {};
   private:
      logeventTypeSupportInterface (const logeventTypeSupportInterface &);
      logeventTypeSupportInterface & operator = (const logeventTypeSupportInterface &);
   };

   class logeventDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logeventDataWriter_ptr _ptr_type;
      typedef logeventDataWriter_var _var_type;

      static logeventDataWriter_ptr _duplicate (logeventDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logeventDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent& instance_data) = 0;

   protected:
      logeventDataWriter () {};
      ~logeventDataWriter () {};
   private:
      logeventDataWriter (const logeventDataWriter &);
      logeventDataWriter & operator = (const logeventDataWriter &);
   };

   class logeventDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logeventDataReader_ptr _ptr_type;
      typedef logeventDataReader_var _var_type;

      static logeventDataReader_ptr _duplicate (logeventDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logeventDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent& instance) = 0;

   protected:
      logeventDataReader () {};
      ~logeventDataReader () {};
   private:
      logeventDataReader (const logeventDataReader &);
      logeventDataReader & operator = (const logeventDataReader &);
   };

   class logeventDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logeventDataReaderView_ptr _ptr_type;
      typedef logeventDataReaderView_var _var_type;

      static logeventDataReaderView_ptr _duplicate (logeventDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logeventDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent& instance) = 0;

   protected:
      logeventDataReaderView () {};
      ~logeventDataReaderView () {};
   private:
      logeventDataReaderView (const logeventDataReaderView &);
      logeventDataReaderView & operator = (const logeventDataReaderView &);
   };

}




#endif 
