#!/bin/sh

echo "Setting up SAL Kafka build environment"

export MAVEN_RELEASE=3.9.8
export AVRO_RELEASE=1.11.1
export BOOST_RELEASE=1.78
export JDK_RELEASE=17
export KAFKA_RELEASE=7.6
export JACKSON_RELEASE=2.15.2
export LIBRDKAFKA_RELEASE=2.6.1
export JAVA_HOME=/usr/lib/jvm/java-17-openjdk
export LSST_SDK_INSTALL=/opt/lsst/tssw/ts_sal

if [ -z "$LSST_SAL_PREFIX" ]; then
 export LSST_SAL_PREFIX=/opt/lsst/ts_sal
fi

echo "Using : "
echo "        LSST_SAL_PREFIX = $LSST_SAL_PREFIX"
echo "        Avro version = $AVRO_RELEASE"
echo "        Boost version = $BOOST_RELEASE"
echo "        Java version = $JDK_RELEASE"
echo "        Maven version = $MAVEN_RELEASE"
echo "        Kafka version = $KAFKA_RELEASE"

update_dependencies()
{
	echo "Updating dependencies available from repo's"
	mkdir -p $LSST_SAL_PREFIX
	chown -R $USER $LSST_SAL_PREFIX/..
	chgrp -R $USER $LSST_SAL_PREFIX/..
	dnf install -y epel-release
	dnf install -y yum-utils
	dnf config-manager -y --set-enabled powertools
	dnf update
	if [ -f /.dockerenv ]; then
	  dnf install -y python3.11 python3.11-devel python3.11-pip
	  ln -sf /usr/bin/python3.11 /etc/alternatives/python3
	fi
	dnf install -y ant cmake boost${BOOST_RELEASE}-devel jansson-devel asciidoc curl libcurl-devel zlib-devel maven doxygen fmt fmt-devel snappy snappy-devel csnappy
	if [ -f /.dockerenv ]; then
	  dnf install -y java-${JDK_RELEASE}-openjdk java-${JDK_RELEASE}-openjdk-devel java-${JDK_RELEASE}-openjdk-javadoc
	fi
}

maven()
{
	echo "Downloading and building Maven"
	mkdir external-packages
	cd external-packages
	curl -O https://dlcdn.apache.org/maven/maven-3/${MAVEN_RELEASE}/source/apache-maven-${MAVEN_RELEASE}-src.tar.gz
	tar xzf apache-maven-${MAVEN_RELEASE}-src.tar.gz
	cd apache-maven-${MAVEN_RELEASE}
	mvn -DdistributionTargetDir="$LSST_SAL_PREFIX/../maven/apache-maven-${MAVEN_RELEASE}-SNAPSHOT" clean package

	export PATH=$LSST_SAL_PREFIX/..//maven/apache-maven-${MAVEN_RELEASE}-SNAPSHOT/bin/:${PATH}
	mkdir -p $LSST_SAL_PREFIX/bin
	mkdir -p $LSST_SAL_PREFIX/include
	mkdir -p $LSST_SAL_PREFIX/lib
	ln -sf $LSST_SAL_PREFIX/../maven/apache-maven-${MAVEN_RELEASE}-SNAPSHOT/bin/mvn $LSST_SAL_PREFIX/bin/mvn
}

avro()
{
	echo "Downloading and building Avro"
	cd $HOME/external-packages
	curl -O https://archive.apache.org/dist/avro/avro-${AVRO_RELEASE}/avro-src-${AVRO_RELEASE}.tar.gz
	tar xvzf avro-src-${AVRO_RELEASE}.tar.gz
	cd $HOME/external-packages/avro-src-${AVRO_RELEASE}/lang/c++
	./build.sh install
	cd build
	cp lib* $LSST_SAL_PREFIX/lib/.
	cp avrogencpp $LSST_SAL_PREFIX/bin/.
	mkdir  -p $LSST_SAL_PREFIX/include/avro
	cp -r ../api/* $LSST_SAL_PREFIX/include/avro/.
	cp -r ../impl $LSST_SAL_PREFIX/include/.

	cd $HOME/external-packages/avro-src-${AVRO_RELEASE}/lang/c
	if [ -f /.dockerenv ]; then
	  cp /usr/include/jansson*.h $CONDA_PREFIX/include/.
	  cp /usr/include/jansson*.h $CONDA_PREFIX/include/.
	  cp /usr/lib64/libjansson* $CONDA_PREFIX/lib/.
	fi
	./build.sh test
	./cmake_avrolib.sh || true
	cd build/avrolib/lib64
	cp lib* $LSST_SAL_PREFIX/lib/.
	cd ../include
	cp -r * $LSST_SAL_PREFIX/include/.

	cd $HOME/external-packages
	curl -O https://packages.confluent.io/archive/${KAFKA_RELEASE}/confluent-community-${KAFKA_RELEASE}.0.tar.gz
	tar xzf confluent-community-${KAFKA_RELEASE}.0.tar.gz
	cd confluent-${KAFKA_RELEASE}.0/share/java
	cp kafka-rest-lib/common-config*.jar ${LSST_SAL_PREFIX}/lib/.
	cp kafka-rest-lib/common-utils*.jar ${LSST_SAL_PREFIX}/lib/.
	cp kafka-rest-lib/kafka_*.jar ${LSST_SAL_PREFIX}/lib/.
	cp kafka-rest-lib/kafka-clients*.jar ${LSST_SAL_PREFIX}/lib/.
	cp kafka-rest-lib/kafka-schema-registry-client*.jar ${LSST_SAL_PREFIX}/lib/.
	cp kafka-rest-lib/kafka-avro-serializer*.jar ${LSST_SAL_PREFIX}/lib/.
	cp kafka-rest-lib/lz4-java*.jar ${LSST_SAL_PREFIX}/lib/.
	cp kafka-rest-bin/slf4j-api*.jar ${LSST_SAL_PREFIX}/lib/.
	cp kafka-rest-lib/snappy-java*.jar ${LSST_SAL_PREFIX}/lib/.
	cp kafka-rest-lib/zstd-jni*.jar ${LSST_SAL_PREFIX}/lib/.

	curl -O https://repo1.maven.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformat-avro/${JACKSON_RELEASE}/jackson-dataformat-avro-${JACKSON_RELEASE}.jar
	mv jackson-dataformat-avro-${JACKSON_RELEASE}.jar ${LSST_SAL_PREFIX}/lib/.

	cd $HOME/external-packages/avro-src-${AVRO_RELEASE}/lang/java
	./build.sh test
	./build.sh dist
	cp ./avro/target/avro-1.11.1.jar $LSST_SAL_PREFIX/lib/.
	cp ./compiler/target/avro-compiler-1.11.1.jar $LSST_SAL_PREFIX/lib/.
	cp ./maven-plugin/target/avro-maven-plugin-1.11.1.jar $LSST_SAL_PREFIX/lib/.
	cp ./tools/target/avro-tools-1.11.1.jar $LSST_SAL_PREFIX/lib/.
}

librdkafka()
{
	echo "Downloading and building librdkafka"
	cd $HOME/external-packages
	git clone https://github.com/confluentinc/librdkafka
	cd librdkafka
	git checkout v$LIBRDKAFKA_RELEASE
	./configure --prefix=$LSST_SAL_PREFIX
	make 
	make install

	if [ -f /.dockerenv ]; then
	   cd $HOME/external-packages
	   git clone https://github.com/google/snappy
	  cd snappy
	  git submodule update --init
	  mkdir build
	  cd build
	  cmake ../.
	  make
	  make install
	  ar x libsnappy.a
	  gcc -fPIC -shared -o libsnappy.so.1 *.o -lc -lc++
	  cp libsnappy.so.1 $LSST_SAL_PREFIX/lib/.
	  cp $CONDA_PREFIX/lib/libstdc++.so.6.0.32  $LSST_SAL_PREFIX/lib/libstdc++.so.6
	fi
}

libserdes()
{
	echo "Downloading and building libserdes"
	ln -sf /usr/include/boost$BOOST_RELEASE/boost $LSST_SAL_PREFIX/include/boost
	cd $HOME/external-packages
	git clone https://github.com/confluentinc/libserdes
	cd libserdes
	export LD_LIBRARY_PATH=$LSST_SAL_PREFIX/lib:$LD_LIBRARY_PATH
	./configure --prefix=$LSST_SAL_PREFIX --includedir=$LSST_SAL_PREFIX/include --libdir=$LSST_SAL_PREFIX/lib
	export CPPFLAGS=-I$LSST_SAL_PREFIX/include/avro
	make
	make install
}

m1m3_extras()
{
	# Extras for M1M3
	cd $HOME/external-packages
	if [ -f /.dockerenv ]; then
	  tar xzf Catch2.tgz
	else
	  git clone https://github.com/catchorg/Catch2
	fi
	cd Catch2
	rm -fr build
	mkdir build
	cd build
	cmake ../.
	make
	make install
	if [ -f /.dockerenv ]; then
	  echo "Do NOT install spdlog,libyaml,yaml-cpp as lsst-scipipe already has them"
	else
	  dnf install -y spdlog spdlog-devel
	  dnf install -y libyaml-devel yaml-cpp yaml-cpp-devel
	  export PKG_CONFIG_PATH=/usr/local/share/pkgconfig
	fi
}

while getobs ab: name
do
	case $name in 
	update) update_dependencies;;
	maven) maven;;
	avro) avro;;
	librdkafka) librdkafka;;
	libserdes) libserdes;;
	m1m3) m1m3_extras;;
	?)
		update_dependencies
		maven
		avro
		librdkafka
		libserdes
		m1m3_extras;;
	esac
done

echo "Used external packages : "
echo "        Avro version = $AVRO_RELEASE"
echo "        Boost version = $BOOST_RELEASE"
echo "        Java version = $JDK_RELEASE"
echo "        Maven version = $MAVEN_RELEASE"
echo "----------------------------------------------------------"
echo "----------------------------------------------------------"
echo "----------------------------------------------------------"
echo "------- SAL Kafka Build Environment setup complete -------"
echo "----------------------------------------------------------"
echo "----------------------------------------------------------"
echo "----------------------------------------------------------"
