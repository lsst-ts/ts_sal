#!/usr/bin/env tclsh

#
# Command line tool for SAL code/document/etc generation.
#

proc print_help {} {
   puts stdout "SAL generator tool - Usage :

	salgenerator subsystem (command \[args\] ...)

   where command may be

		generate - all steps to generate SAL wrappers for specified language
		validate - check the XML Telemetry/Command/LogEvent definitions
                sal      - generate SAL wrappers for specified language : cpp, idl, java
                apidoc   - generate interface documentation for the specified language : cpp, java
                lib      - generate shared library
		labview  - generate LabVIEW low-level interface
		maven    - generate a maven project
		link     - link a SAL program
                rpm	 - generate runtime RPM
		verbose  - be more verbose ;-)
"
  exit 2
}

if { $argc < 2 } { print_help }


set SAL_DIR $env(SAL_DIR)
set OSPL_HOME $env(OSPL_HOME)
set COMMANDS "validate efd writers compile cpp idl isocpp java jni lib link maven tcl db icd labview html apidoc rpm sal shmem sim simd verbose fastest generate upload"
foreach o $COMMANDS {
  set OPTIONS($o) 0
  if { [lsearch [string tolower $argv] $o] > -1 } {
     set OPTIONS($o) 1
  }
}

set SAL_WORK_DIR $env(SAL_WORK_DIR)
if { [file exists $SAL_WORK_DIR] == 0 } {
   errorexit "Working directory $SAL_WORK_DIR does not exist"
}

if { [file exists $env(TS_XML_DIR)] } {
   cd $env(TS_XML_DIR)
   set XMLVERSION [string trim [exec git describe --tags --dirty] "v"]
 } else {
   errorexit "Please adjust setup.env so that TS_XML_DIR is correct"
}

cd $SAL_WORK_DIR
puts stdout "SAL_WORK_DIR=$SAL_WORK_DIR"

catch {exec mkdir saltemptest} ok
if { [file exists saltemptest] == 0 } {
   errorexit "Working directory $SAL_WORK_DIR does not have write permission"
}
exec mkdir -p $SAL_WORK_DIR/include
exec mkdir -p $SAL_WORK_DIR/lib


source $SAL_DIR/versioning.tcl
source $SAL_DIR/utilities.tcl
source $SAL_DIR/activaterevcodes.tcl
source $SAL_DIR/add_system_dictionary.tcl

puts stdout "argv = $argv"
set RELVERSION ""
if { [string range [lindex $argv end] 0 7] == "version=" } {
  set RELVERSION [string range [lindex $argv end] 8 end]
  set argv [lrange $argv 0 [expr [llength $argv]-2]]
}

puts stdout "SAL generator - [set SALVERSION]"

set TSUBSYSTEMS ""
foreach i $argv {
  puts stdout "checking $i"
  if { $i == "python" } {
    errorexit "python API generation no longer supported  - use ts_salobj"
  }
  if { [lsearch $COMMANDS $i] < 0 } {
    if { [lsearch $SYSDIC(systems) $i] < 0 } {
      puts stdout "
*******************************************************************************
******************** ERROR - Subsystem not defined ****************************
*******************************************************************************

	$env(TS_XML_DIR)/python/lsst/ts/xml/data/sal_interfaces/SALSubsystems.xml does not include

 	the $i subsystem, please check spelling, or add it


*******************************************************************************
*******************************************************************************"
      exit 3
    }
    set xml ""
    catch { set xml [glob $env(TS_XML_DIR)/python/lsst/ts/xml/data/sal_interfaces/$i/[set i]_*.xml] }
    if { $xml == "" } {
      puts stdout "
*******************************************************************************
*********************** WARNING - Generics only *******************************
*******************************************************************************

	$env(TS_XML_DIR)/python/lsst/ts/xml/data/sal_interfaces has no XML definition files for

 	the $i subsystem. Including generics only.


*******************************************************************************
*******************************************************************************"
    }
    if { [lsearch $SYSDIC(systems) $i] > -1 } {
      lappend TSUBSYSTEMS $i
    }
  }
}



foreach subsys $TSUBSYSTEMS {
   if { [lsearch $SYSDIC(systems) $subsys] < 0 } {
      puts stdout "
*******************************************************************************
****************** WARNING - Subsystem not defined ****************************
*******************************************************************************

	$env(TS_XML_DIR)/python/lsst/ts/xml/data/sal_interfaces/SALSubsystems.xml does not include

 	the $subsys subsystem, please check spelling, or add it


*******************************************************************************
*******************************************************************************"
"
     exit 5
  }
}

# Generate runs all steps needed to get lib for given language
if { $OPTIONS(generate) } {
  set result [exec salgenerator $TSUBSYSTEMS validate] ; puts stdout $result
  catch { set result [exec salgenerator $TSUBSYSTEMS html] } ok ; puts stdout $ok
  if { $OPTIONS(cpp) } { set result [exec salgenerator $TSUBSYSTEMS sal cpp] ; puts stdout $result }
  if { $OPTIONS(java) } {
     set result [exec salgenerator $TSUBSYSTEMS sal java] ; puts stdout $result
     set result [exec salgenerator $TSUBSYSTEMS maven] ; puts stdout $result
  }
  if { $OPTIONS(labview) } {
     set result [exec salgenerator $TSUBSYSTEMS sal cpp] ; puts stdout $result
     set result [exec salgenerator $TSUBSYSTEMS labview] ; puts stdout $result
  }
  set result [exec salgenerator $TSUBSYSTEMS lib] ; puts stdout $result
  exit 0
}


puts stdout "XMLVERSION = $XMLVERSION"

if { $RELVERSION != "" } {
  set SALRELEASE "[set XMLVERSION].$RELVERSION-[set SALVERSION]"
} else {
  set SALRELEASE "[set XMLVERSION]-[set SALVERSION]"
}

set OSPL_RELEASE $env(OSPL_RELEASE)

if { $OPTIONS(idl) && $OPTIONS(sal) == 0 } {
   errorexit "Use the sal option in conjunction with the idl option"
}

if { $OPTIONS(validate) || $OPTIONS(idl) } {
  exec mkdir -p $SAL_WORK_DIR/idl-templates/validated
  source $SAL_DIR/parseXML.tcl
  set all $TSUBSYSTEMS
  stdlog "Processing $all"
  foreach i $all {
    set IDXENUMDONE($i) 0
    if { [file exists $env(TS_XML_DIR)/python/lsst/ts/xml/data/sal_interfaces/SALGenerics.xml] } {
      set x none
      puts stdout "Add Generic Commands and Events"
      set SALSubsys $i
      source $SAL_DIR/processgenerics.tcl
      generategenerics $i
    }
    gentopicdefsql $i
    foreach d "idl-templates idl-templates/validated" {
      set old ""
      catch {set old [glob $SAL_WORK_DIR/$d/[set i]_*.idl]}
      foreach o $old {
        exec rm $o
      }
    }
    foreach t "Telemetry Commands Events" {
      if { [file exists $env(TS_XML_DIR)/python/lsst/ts/xml/data/sal_interfaces/$i/[set i]_[set t].xml] } {
        if { [file size $env(TS_XML_DIR)/python/lsst/ts/xml/data/sal_interfaces/$i/[set i]_[set t].xml] > 0 } {
          parseXMLtoidl $env(TS_XML_DIR)/python/lsst/ts/xml/data/sal_interfaces/$i/[set i]_[set t].xml
          stdlog "Imported $i $t interface definitions"
        }
      }
    }
    parseXMLtoidl $SAL_WORK_DIR/[set i]_Generics.xml
    stdlog "Imported $i Generic interface definitions"
    stdlog "Validating $i interface IDL format definitions"
    catch {
      set hascmd [glob $SAL_WORK_DIR/idl-templates/[set i]_command_*.idl]
      createackcmdidl $i [info exists SYSDIC($i,keyedID)]
    }
    set new [lsort [glob $SAL_WORK_DIR/idl-templates/[set i]_*.idl]]
    foreach n $new {
      checkidl [file tail $n]
    }
    updateRevCodes $i
    updateMetaData $i
    stdlog "Completed $i validation\n\n"
  }
}


# For html option , process everything
if { $OPTIONS(html) } {
  stdlog "WARNING : html option is deprecated, please use the apidoc option in future"
  exit 0
}

if { $OPTIONS(apidoc) } {
  if { $OPTIONS(upload) } {set TSUBSYSTEMS upload }
  foreach s $TSUBSYSTEMS {
    if { $s != "apidoc" } {
      if { $s != "upload" } {stdlog "Building API documentation for $s subsystem"}
      set result none
      catch { set result [exec $SAL_DIR/apiDocumentation.tcl $s] } bad
      if { $result == "none" } {stdlog $bad}
      if { $OPTIONS(verbose) } {stdlog $result}
    }
    set fin [open /tmp/docbuild_[set s].log r]
    while { [gets $fin rec] > -1 } {stdlog $rec}
    close $fin
  }
  exit
}


if { $OPTIONS(maven) } {
  cd $SAL_WORK_DIR
  source $SAL_DIR/gencommandtestsjava.tcl
  source $SAL_DIR/mavenize.tcl
  source $SAL_DIR/gensalcodes.tcl
  set SALVERSION [lindex [split $SALVERSION "-"] 0]
  set XMLVERSION [lindex [split $XMLVERSION "-"] 0]
  set mvnrelease [set XMLVERSION]_[set SALVERSION][set RELVERSION]
  foreach subsys $TSUBSYSTEMS {
    checkTopicTypes $subsys
    set result ""
    set bad ""
    puts stdout "Creating maven directories maven/[set subsys]-[set mvnrelease]"
    catch { set result [mavenize $subsys] } bad
    puts stdout "$result"
    puts stderr "$bad"
#     puts stdout "Creating unit tests maven/[set subsys]-[set mvnrelease]"
#     catch { set result [mavenunittests $subsys] } bad
#     puts stdout "$result"
#     puts stderr "$bad"
    cd maven/[set subsys]-[set mvnrelease]
    puts stdout "Running maven install"
    set result ""
    set bad ""
    catch { set result [exec mvn --no-transfer-progress -Dmaven.javadoc.skip=true -DskipTests install] } bad
    puts stdout "$result"
    puts stderr "$bad"
    set result none
    catch { set result [genauthlisttestsjava $subsys] } bad
    stdlog "$result"
    if { $result == "none" } {stdlog $bad ; errorexit "failure in genauthlisttestsjava" }
#     puts stdout "Updating local repository"
#     catch { set result [exec mvn --no-transfer-progress install -DperformRelease=true -DcreateChecksum=true] } bad
#     puts stdout "$result"
#     puts stderr "$bad"
  }
  puts stdout "Using version $mvnrelease for the maven project"
}


catch {exec rmdir saltemptest}
exec mkdir -p .salwork
set TARGETS ""
if { $OPTIONS(lib) == 0 || $OPTIONS(generate) == 1 } {
  set matches $TSUBSYSTEMS
  foreach f [glob $SAL_WORK_DIR/idl-templates/validated/[set matches]_*.idl] {
    set TARGETS "$TARGETS [file tail $f]"
  }
  if { $TARGETS == "" } {
    errorexit "No validated Interface Definition files match $TSUBSYSTEMS"
  } else {
    stdlog "Targets for build : $TARGETS"
  }
}


if { $OPTIONS(sal) } {
  set DONE_CMDEVT 0
  set ONEDDSGEN 0
  if { [expr $OPTIONS(cpp) + $OPTIONS(isocpp) + $OPTIONS(java) + $OPTIONS(idl)] == 0 } {
    stdlog "=========================================================================="
    stdlog "ERROR :  sal option requires a language choice , cpp/idl/java"
    stdlog "=========================================================================="
    exit 6
  }
  cd $SAL_WORK_DIR
  set base [lindex [split [lindex $TARGETS 0] _] 0]
  clearAssets $base
  source $SAL_DIR/gensimplesample.tcl
  source $SAL_DIR/gensalcodes.tcl
  checkTopicTypes $base
  source $SAL_WORK_DIR/idl-templates/validated/[set base]_revCodes.tcl
  readMetaData $base
  catch { set idlfile [makesalidl $base] } bad
  puts stdout $bad
  puts stdout $idlfile
  updateRevCodes $base
  if { $OPTIONS(idl) == 0 } {
    source $SAL_WORK_DIR/idl-templates/validated/[set base]_revCodes.tcl
    genGenericCodes $base
    genTelemetryCodes $idlfile $TARGETS
    genSingleProcessTests $base
  } else {
    exec cp $SAL_WORK_DIR/idl-templates/validated/sal/sal_revCoded_[set base].idl $SAL_WORK_DIR/[set base]/.
  }
  checkAssets $base
}

if { $OPTIONS(lib) } {
  foreach s $TSUBSYSTEMS {
    if { $s != "lib" } {
      stdlog "Building shared library for $s subsystem"
      set result none
      if { $OPTIONS(verbose) } {stdlog "Calling $env(TS_SAL_DIR)/bin/buildsharedlib $s"}
      catch { set result [exec $env(TS_SAL_DIR)/bin/buildsharedlib $s] } bad
      if { $OPTIONS(verbose) } {stdlog $result}
    }
    if { [file exists $SAL_WORK_DIR/[set s]/labview/SALLV_[set s].so] } {
      exec cp $SAL_WORK_DIR/[set s]/labview/SALLV_[set s].so $SAL_WORK_DIR/lib/.
    }
    if { [file exists $SAL_WORK_DIR/[set s]/cpp/libsacpp_[set s]_types.so] } {
      exec cp $SAL_WORK_DIR/[set s]/cpp/libsacpp_[set s]_types.so $SAL_WORK_DIR/lib/.
    }
  }
}


if { $OPTIONS(rpm) } {
  cd $SAL_WORK_DIR
  source $SAL_DIR/gensalrpms.tcl
  set SALVERSION [join [lrange [split $SALVERSION ".-_"] 0 2] "."]
  set XMLVERSION [join [lrange [split $XMLVERSION ".-_"] 0 2] "."]
  foreach s $TSUBSYSTEMS {
    if { $s != "rpm" } {
      stdlog "Building runtime RPM for $s subsystem"
      set result none
      catch { set result [updateruntime $s] } bad
      if { $result == "none" } {stdlog $bad}
      if { $OPTIONS(verbose) } {stdlog $result}
      if { [info exists SYSDIC([set s],cpp)] } {
        stdlog "Building test runtime RPM for $s subsystem"
        set result none
        catch { set result [updateruntime $s 1] } bad
        if { $result == "none" } {stdlog $bad}
        if { $OPTIONS(verbose) } {stdlog $result}
      }
    }
  }
}


if { $OPTIONS(labview) } {
  set subsys [lindex [split [lindex $TARGETS 0] _] 0]
  source $SAL_WORK_DIR/idl-templates/validated/[set subsys]_revCodes.tcl
  source $SAL_DIR/genshmemlabview.tcl
  cd $SAL_WORK_DIR
  stdlog "Generating LabVIEW low level code for $subsys"
  if { [file exists $SAL_WORK_DIR/idl-templates/validated/[set subsys]_cmddef.tcl] } {
    source $SAL_WORK_DIR/idl-templates/validated/[set subsys]_cmddef.tcl
  }
  if { [file exists $SAL_WORK_DIR/idl-templates/validated/[set subsys]_evtdef.tcl] } {
    source $SAL_WORK_DIR/idl-templates/validated/[set subsys]_evtdef.tcl
  }
  set result none
  catch { set result [genshmemlabview $subsys] } bad
  if { $result == "none" } {stdlog $bad}
  puts stdout $bad
  if { $OPTIONS(verbose) } {stdlog $result}
}


### TSUBSYSTEMS is svcSAL_topicname
if { $OPTIONS(compile) } {
  set topic [string range [file rootname $TSUBSYSTEMS] 7 end]
  set result none
  catch {set result [exec g++  -g -I. -I/opt/lsstsal/scripts/code/include/sal -I$OSPL_HOME/include/dcps/C++/SACPP -I$OSPL_HOME/include -I$OSPL_HOME/include/sys -I/opt/simd/include -I../include -pipe -Wall  -c -std=c++0x -I../shmem-[set topic] $TSUBSYSTEMS.cpp] } bad
  if { $result == "none" } {stdlog $bad}
  if { $bad != "" } {puts stdout $bad}
  exit
}


### usage is topicname program-name (no .cpp) link
if { $OPTIONS(link) } {
  set program lindex $argv 2]
  set topic [lindex $argv 1]
  set result none
  catch { set result [exec g++ -g -I. -I/opt/lsstsal/scripts/code/include/sal -I$OSPL_HOME/include/dcps/C++/SACPP -I$OSPL_HOME/include -I$OSPL_HOME/include/sys -I/opt/simd/include -I../include -pipe -Wall -std=c++0x -I../shmem-[set topic] svcSAL_$topic.o $program.cpp -o $program -L$OSPL_HOME/lib -ldcpsgapi -ldcpssacpp -lddsdatabase -lddsos -lboost_thread -lboost_program_options -lboost_system -lddsutil -lddsserialization -lddsserialization -lddskernel -lddsconf -lddsconfparser -lddsuser -L/opt/simd/lib -lSimD libdatamodel.a]} bad
  if { $result == "none" } {stdlog $bad}
  if { $bad != "" } {puts stdout $bad}
  exit
}


puts stdout "SALVERSION = $SALVERSION"
puts stdout "XMLVERSION = $XMLVERSION"
puts stdout "SAL_WORK_DIR = $SAL_WORK_DIR"
puts stdout "OSPL_HOME = $OSPL_HOME"
puts stdout "OSPL_RELEASE = $OSPL_RELEASE"
